"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_js_1 = require("../utils.js");
const media_type_object_js_1 = __importDefault(require("./media-type-object.js"));
const schema_object_js_1 = __importDefault(require("./schema-object.js"));
function transformRequestBodyObject(requestBodyObject, { path, ctx }) {
    let { indentLv } = ctx;
    const output = ["{"];
    indentLv++;
    output.push((0, utils_js_1.indent)(ctx.immutableTypes ? (0, utils_js_1.tsReadonly)("content: {") : "content: {", indentLv));
    indentLv++;
    if (!Object.keys(requestBodyObject.content).length) {
        output.push((0, utils_js_1.indent)(`${(0, utils_js_1.escStr)("*/*")}: never;`, indentLv));
    }
    for (const [contentType, mediaTypeObject] of (0, utils_js_1.getEntries)(requestBodyObject.content, ctx.alphabetize, ctx.excludeDeprecated)) {
        const c = (0, utils_js_1.getSchemaObjectComment)(mediaTypeObject, indentLv);
        if (c)
            output.push((0, utils_js_1.indent)(c, indentLv));
        let key = (0, utils_js_1.escStr)(contentType);
        if (ctx.immutableTypes)
            key = (0, utils_js_1.tsReadonly)(key);
        if ("$ref" in mediaTypeObject) {
            output.push((0, utils_js_1.indent)(`${key}: ${(0, schema_object_js_1.default)(mediaTypeObject, {
                path: `${path}/${contentType}`,
                ctx: { ...ctx, indentLv },
            })};`, indentLv));
        }
        else {
            const mediaType = (0, media_type_object_js_1.default)(mediaTypeObject, {
                path: `${path}/${contentType}`,
                ctx: { ...ctx, indentLv },
            });
            output.push((0, utils_js_1.indent)(`${key}: ${mediaType};`, indentLv));
        }
    }
    indentLv--;
    output.push((0, utils_js_1.indent)("};", indentLv));
    indentLv--;
    output.push((0, utils_js_1.indent)("}", indentLv));
    return output.join("\n");
}
exports.default = transformRequestBodyObject;
//# sourceMappingURL=request-body-object.js.map