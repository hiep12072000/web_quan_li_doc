"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_js_1 = require("../utils.js");
const media_type_object_js_1 = __importDefault(require("./media-type-object.js"));
const schema_object_js_1 = __importDefault(require("./schema-object.js"));
function transformHeaderObject(headerObject, { path, ctx }) {
    if (headerObject.schema)
        return (0, schema_object_js_1.default)(headerObject.schema, { path, ctx });
    if (headerObject.content) {
        let { indentLv } = ctx;
        const output = ["{"];
        indentLv++;
        for (const [contentType, mediaTypeObject] of (0, utils_js_1.getEntries)(headerObject.content, ctx.alphabetize, ctx.excludeDeprecated)) {
            const c = (0, utils_js_1.getSchemaObjectComment)(mediaTypeObject, indentLv);
            if (c)
                output.push((0, utils_js_1.indent)(c, indentLv));
            let key = (0, utils_js_1.escStr)(contentType);
            if (ctx.immutableTypes)
                key = (0, utils_js_1.tsReadonly)(key);
            if ("$ref" in mediaTypeObject) {
                output.push((0, utils_js_1.indent)(`${key}: ${(0, schema_object_js_1.default)(mediaTypeObject, { path: `${path}/${contentType}`, ctx })};`, indentLv));
            }
            else {
                const mediaType = (0, media_type_object_js_1.default)(mediaTypeObject, { path: `${path}/${contentType}`, ctx });
                output.push((0, utils_js_1.indent)(`${key}: ${mediaType};`, indentLv));
            }
        }
        indentLv--;
        output.push((0, utils_js_1.indent)("}", indentLv));
        return output.join("\n");
    }
    return "unknown";
}
exports.default = transformHeaderObject;
//# sourceMappingURL=header-object.js.map