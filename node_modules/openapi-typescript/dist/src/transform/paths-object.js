"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_js_1 = require("../utils.js");
const parameter_object_js_1 = __importDefault(require("./parameter-object.js"));
const path_item_object_js_1 = __importDefault(require("./path-item-object.js"));
const OPERATIONS = ["get", "post", "put", "delete", "options", "head", "patch", "trace"];
function extractPathParams(obj) {
    const params = new Map();
    if (obj && "parameters" in obj) {
        for (const p of obj.parameters ?? []) {
            if ("in" in p && p.in === "path")
                params.set(p.name, p);
        }
    }
    return params;
}
function transformPathsObject(pathsObject, ctx) {
    let { indentLv } = ctx;
    const output = ["{"];
    indentLv++;
    for (const [url, pathItemObject] of (0, utils_js_1.getEntries)(pathsObject, ctx.alphabetize, ctx.excludeDeprecated)) {
        if (!pathItemObject || typeof pathItemObject !== "object")
            continue;
        let path = url;
        if ("$ref" in pathItemObject) {
            const c = (0, utils_js_1.getSchemaObjectComment)(pathItemObject, indentLv);
            if (c)
                output.push((0, utils_js_1.indent)(c, indentLv));
            output.push((0, utils_js_1.indent)(`${(0, utils_js_1.escStr)(path)}: ${pathItemObject.$ref};`, indentLv));
            continue;
        }
        const pathParams = new Map([...extractPathParams(pathItemObject), ...OPERATIONS.flatMap((op) => Array.from(extractPathParams(pathItemObject[op])))]);
        if (ctx.pathParamsAsTypes && pathParams.size) {
            for (const p of pathParams.values()) {
                const paramType = (0, parameter_object_js_1.default)(p, { path: `#/paths/${url}/parameters/${p.name}`, ctx });
                path = path.replace(`{${p.name}}`, `\${${paramType}}`);
            }
            path = `[path: \`${path}\`]`;
        }
        else {
            path = (0, utils_js_1.escStr)(path);
        }
        output.push((0, utils_js_1.indent)(`${path}: ${(0, path_item_object_js_1.default)(pathItemObject, {
            path: `#/paths/${url}`,
            ctx: { ...ctx, indentLv },
        })};`, indentLv));
    }
    indentLv--;
    output.push((0, utils_js_1.indent)("}", indentLv));
    return output.join("\n");
}
exports.default = transformPathsObject;
//# sourceMappingURL=paths-object.js.map