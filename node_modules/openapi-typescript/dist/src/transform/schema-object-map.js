"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_js_1 = require("../utils.js");
const parameter_object_js_1 = __importDefault(require("./parameter-object.js"));
const path_item_object_js_1 = __importDefault(require("./path-item-object.js"));
const schema_object_js_1 = __importDefault(require("./schema-object.js"));
function transformSchemaObjectMap(schemaObjMap, { path, ctx }) {
    let { indentLv } = ctx;
    const output = ["{"];
    indentLv++;
    outer: for (const [name, schemaObject] of (0, utils_js_1.getEntries)(schemaObjMap, ctx.alphabetize, ctx.excludeDeprecated)) {
        if (!schemaObject || typeof schemaObject !== "object")
            continue;
        const c = (0, utils_js_1.getSchemaObjectComment)(schemaObject, indentLv);
        if (c)
            output.push((0, utils_js_1.indent)(c, indentLv));
        let key = (0, utils_js_1.escObjKey)(name);
        if (ctx.immutableTypes || schemaObject.readOnly)
            key = (0, utils_js_1.tsReadonly)(key);
        if (!("type" in schemaObject) && !("$ref" in schemaObject)) {
            for (const method of ["get", "put", "post", "delete", "options", "head", "patch", "trace"]) {
                if (method in schemaObject) {
                    output.push((0, utils_js_1.indent)(`${key}: ${(0, path_item_object_js_1.default)(schemaObject, { path: `${path}${name}`, ctx: { ...ctx, indentLv } })};`, indentLv));
                    continue outer;
                }
            }
        }
        if ("in" in schemaObject) {
            output.push((0, utils_js_1.indent)(`${key}: ${(0, parameter_object_js_1.default)(schemaObject, { path: `${path}${name}`, ctx: { ...ctx, indentLv } })};`, indentLv));
            continue;
        }
        output.push((0, utils_js_1.indent)(`${key}: ${(0, schema_object_js_1.default)(schemaObject, { path: `${path}${name}`, ctx: { ...ctx, indentLv } })};`, indentLv));
    }
    indentLv--;
    output.push((0, utils_js_1.indent)("}", indentLv));
    return output.join("\n");
}
exports.default = transformSchemaObjectMap;
//# sourceMappingURL=schema-object-map.js.map