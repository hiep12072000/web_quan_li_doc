"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_js_1 = require("../utils.js");
const header_object_js_1 = __importDefault(require("./header-object.js"));
const media_type_object_js_1 = __importDefault(require("./media-type-object.js"));
function transformResponseObject(responseObject, { path, ctx }) {
    const output = ["{"];
    let { indentLv } = ctx;
    if (responseObject.headers) {
        indentLv++;
        output.push((0, utils_js_1.indent)(`headers: {`, indentLv));
        indentLv++;
        for (const [name, headerObject] of (0, utils_js_1.getEntries)(responseObject.headers, ctx.alphabetize, ctx.excludeDeprecated)) {
            const c = (0, utils_js_1.getSchemaObjectComment)(headerObject, indentLv);
            if (c)
                output.push((0, utils_js_1.indent)(c, indentLv));
            let key = (0, utils_js_1.escObjKey)(name);
            if (ctx.immutableTypes)
                key = (0, utils_js_1.tsReadonly)(key);
            if ("$ref" in headerObject) {
                output.push((0, utils_js_1.indent)(`${key}: ${headerObject.$ref};`, indentLv));
            }
            else {
                if (!headerObject.required)
                    key = (0, utils_js_1.tsOptionalProperty)(key);
                output.push((0, utils_js_1.indent)(`${key}: ${(0, header_object_js_1.default)(headerObject, {
                    path: `${path}/headers/${name}`,
                    ctx: { ...ctx, indentLv },
                })};`, indentLv));
            }
        }
        indentLv--;
        output.push((0, utils_js_1.indent)(`};`, indentLv));
        indentLv--;
    }
    if (responseObject.content) {
        indentLv++;
        output.push((0, utils_js_1.indent)("content: {", indentLv));
        indentLv++;
        for (const [contentType, mediaTypeObject] of (0, utils_js_1.getEntries)(responseObject.content, ctx.alphabetize, ctx.excludeDeprecated)) {
            let key = (0, utils_js_1.escStr)(contentType);
            if (ctx.immutableTypes)
                key = (0, utils_js_1.tsReadonly)(key);
            output.push((0, utils_js_1.indent)(`${key}: ${(0, media_type_object_js_1.default)(mediaTypeObject, {
                path: `${path}/content/${contentType}`,
                ctx: { ...ctx, indentLv: indentLv },
            })};`, indentLv));
        }
        indentLv--;
        output.push((0, utils_js_1.indent)("};", indentLv));
        indentLv--;
    }
    else {
        indentLv++;
        output.push((0, utils_js_1.indent)("content: never;", indentLv));
        indentLv--;
    }
    output.push((0, utils_js_1.indent)("}", indentLv));
    return output.join("\n");
}
exports.default = transformResponseObject;
//# sourceMappingURL=response-object.js.map