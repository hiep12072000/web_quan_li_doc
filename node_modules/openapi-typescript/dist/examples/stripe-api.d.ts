export interface paths {
    "/v1/account": {
        get: operations["GetAccount"];
    };
    "/v1/account_links": {
        post: operations["PostAccountLinks"];
    };
    "/v1/accounts": {
        get: operations["GetAccounts"];
        post: operations["PostAccounts"];
    };
    "/v1/accounts/{account}": {
        get: operations["GetAccountsAccount"];
        post: operations["PostAccountsAccount"];
        delete: operations["DeleteAccountsAccount"];
    };
    "/v1/accounts/{account}/bank_accounts": {
        post: operations["PostAccountsAccountBankAccounts"];
    };
    "/v1/accounts/{account}/bank_accounts/{id}": {
        get: operations["GetAccountsAccountBankAccountsId"];
        post: operations["PostAccountsAccountBankAccountsId"];
        delete: operations["DeleteAccountsAccountBankAccountsId"];
    };
    "/v1/accounts/{account}/capabilities": {
        get: operations["GetAccountsAccountCapabilities"];
    };
    "/v1/accounts/{account}/capabilities/{capability}": {
        get: operations["GetAccountsAccountCapabilitiesCapability"];
        post: operations["PostAccountsAccountCapabilitiesCapability"];
    };
    "/v1/accounts/{account}/external_accounts": {
        get: operations["GetAccountsAccountExternalAccounts"];
        post: operations["PostAccountsAccountExternalAccounts"];
    };
    "/v1/accounts/{account}/external_accounts/{id}": {
        get: operations["GetAccountsAccountExternalAccountsId"];
        post: operations["PostAccountsAccountExternalAccountsId"];
        delete: operations["DeleteAccountsAccountExternalAccountsId"];
    };
    "/v1/accounts/{account}/login_links": {
        post: operations["PostAccountsAccountLoginLinks"];
    };
    "/v1/accounts/{account}/people": {
        get: operations["GetAccountsAccountPeople"];
        post: operations["PostAccountsAccountPeople"];
    };
    "/v1/accounts/{account}/people/{person}": {
        get: operations["GetAccountsAccountPeoplePerson"];
        post: operations["PostAccountsAccountPeoplePerson"];
        delete: operations["DeleteAccountsAccountPeoplePerson"];
    };
    "/v1/accounts/{account}/persons": {
        get: operations["GetAccountsAccountPersons"];
        post: operations["PostAccountsAccountPersons"];
    };
    "/v1/accounts/{account}/persons/{person}": {
        get: operations["GetAccountsAccountPersonsPerson"];
        post: operations["PostAccountsAccountPersonsPerson"];
        delete: operations["DeleteAccountsAccountPersonsPerson"];
    };
    "/v1/accounts/{account}/reject": {
        post: operations["PostAccountsAccountReject"];
    };
    "/v1/apple_pay/domains": {
        get: operations["GetApplePayDomains"];
        post: operations["PostApplePayDomains"];
    };
    "/v1/apple_pay/domains/{domain}": {
        get: operations["GetApplePayDomainsDomain"];
        delete: operations["DeleteApplePayDomainsDomain"];
    };
    "/v1/application_fees": {
        get: operations["GetApplicationFees"];
    };
    "/v1/application_fees/{fee}/refunds/{id}": {
        get: operations["GetApplicationFeesFeeRefundsId"];
        post: operations["PostApplicationFeesFeeRefundsId"];
    };
    "/v1/application_fees/{id}": {
        get: operations["GetApplicationFeesId"];
    };
    "/v1/application_fees/{id}/refund": {
        post: operations["PostApplicationFeesIdRefund"];
    };
    "/v1/application_fees/{id}/refunds": {
        get: operations["GetApplicationFeesIdRefunds"];
        post: operations["PostApplicationFeesIdRefunds"];
    };
    "/v1/apps/secrets": {
        get: operations["GetAppsSecrets"];
        post: operations["PostAppsSecrets"];
    };
    "/v1/apps/secrets/delete": {
        post: operations["PostAppsSecretsDelete"];
    };
    "/v1/apps/secrets/find": {
        get: operations["GetAppsSecretsFind"];
    };
    "/v1/balance": {
        get: operations["GetBalance"];
    };
    "/v1/balance/history": {
        get: operations["GetBalanceHistory"];
    };
    "/v1/balance/history/{id}": {
        get: operations["GetBalanceHistoryId"];
    };
    "/v1/balance_transactions": {
        get: operations["GetBalanceTransactions"];
    };
    "/v1/balance_transactions/{id}": {
        get: operations["GetBalanceTransactionsId"];
    };
    "/v1/billing_portal/configurations": {
        get: operations["GetBillingPortalConfigurations"];
        post: operations["PostBillingPortalConfigurations"];
    };
    "/v1/billing_portal/configurations/{configuration}": {
        get: operations["GetBillingPortalConfigurationsConfiguration"];
        post: operations["PostBillingPortalConfigurationsConfiguration"];
    };
    "/v1/billing_portal/sessions": {
        post: operations["PostBillingPortalSessions"];
    };
    "/v1/charges": {
        get: operations["GetCharges"];
        post: operations["PostCharges"];
    };
    "/v1/charges/search": {
        get: operations["GetChargesSearch"];
    };
    "/v1/charges/{charge}": {
        get: operations["GetChargesCharge"];
        post: operations["PostChargesCharge"];
    };
    "/v1/charges/{charge}/capture": {
        post: operations["PostChargesChargeCapture"];
    };
    "/v1/charges/{charge}/dispute": {
        get: operations["GetChargesChargeDispute"];
        post: operations["PostChargesChargeDispute"];
    };
    "/v1/charges/{charge}/dispute/close": {
        post: operations["PostChargesChargeDisputeClose"];
    };
    "/v1/charges/{charge}/refund": {
        post: operations["PostChargesChargeRefund"];
    };
    "/v1/charges/{charge}/refunds": {
        get: operations["GetChargesChargeRefunds"];
        post: operations["PostChargesChargeRefunds"];
    };
    "/v1/charges/{charge}/refunds/{refund}": {
        get: operations["GetChargesChargeRefundsRefund"];
        post: operations["PostChargesChargeRefundsRefund"];
    };
    "/v1/checkout/sessions": {
        get: operations["GetCheckoutSessions"];
        post: operations["PostCheckoutSessions"];
    };
    "/v1/checkout/sessions/{session}": {
        get: operations["GetCheckoutSessionsSession"];
    };
    "/v1/checkout/sessions/{session}/expire": {
        post: operations["PostCheckoutSessionsSessionExpire"];
    };
    "/v1/checkout/sessions/{session}/line_items": {
        get: operations["GetCheckoutSessionsSessionLineItems"];
    };
    "/v1/country_specs": {
        get: operations["GetCountrySpecs"];
    };
    "/v1/country_specs/{country}": {
        get: operations["GetCountrySpecsCountry"];
    };
    "/v1/coupons": {
        get: operations["GetCoupons"];
        post: operations["PostCoupons"];
    };
    "/v1/coupons/{coupon}": {
        get: operations["GetCouponsCoupon"];
        post: operations["PostCouponsCoupon"];
        delete: operations["DeleteCouponsCoupon"];
    };
    "/v1/credit_notes": {
        get: operations["GetCreditNotes"];
        post: operations["PostCreditNotes"];
    };
    "/v1/credit_notes/preview": {
        get: operations["GetCreditNotesPreview"];
    };
    "/v1/credit_notes/preview/lines": {
        get: operations["GetCreditNotesPreviewLines"];
    };
    "/v1/credit_notes/{credit_note}/lines": {
        get: operations["GetCreditNotesCreditNoteLines"];
    };
    "/v1/credit_notes/{id}": {
        get: operations["GetCreditNotesId"];
        post: operations["PostCreditNotesId"];
    };
    "/v1/credit_notes/{id}/void": {
        post: operations["PostCreditNotesIdVoid"];
    };
    "/v1/customers": {
        get: operations["GetCustomers"];
        post: operations["PostCustomers"];
    };
    "/v1/customers/search": {
        get: operations["GetCustomersSearch"];
    };
    "/v1/customers/{customer}": {
        get: operations["GetCustomersCustomer"];
        post: operations["PostCustomersCustomer"];
        delete: operations["DeleteCustomersCustomer"];
    };
    "/v1/customers/{customer}/balance_transactions": {
        get: operations["GetCustomersCustomerBalanceTransactions"];
        post: operations["PostCustomersCustomerBalanceTransactions"];
    };
    "/v1/customers/{customer}/balance_transactions/{transaction}": {
        get: operations["GetCustomersCustomerBalanceTransactionsTransaction"];
        post: operations["PostCustomersCustomerBalanceTransactionsTransaction"];
    };
    "/v1/customers/{customer}/bank_accounts": {
        get: operations["GetCustomersCustomerBankAccounts"];
        post: operations["PostCustomersCustomerBankAccounts"];
    };
    "/v1/customers/{customer}/bank_accounts/{id}": {
        get: operations["GetCustomersCustomerBankAccountsId"];
        post: operations["PostCustomersCustomerBankAccountsId"];
        delete: operations["DeleteCustomersCustomerBankAccountsId"];
    };
    "/v1/customers/{customer}/bank_accounts/{id}/verify": {
        post: operations["PostCustomersCustomerBankAccountsIdVerify"];
    };
    "/v1/customers/{customer}/cards": {
        get: operations["GetCustomersCustomerCards"];
        post: operations["PostCustomersCustomerCards"];
    };
    "/v1/customers/{customer}/cards/{id}": {
        get: operations["GetCustomersCustomerCardsId"];
        post: operations["PostCustomersCustomerCardsId"];
        delete: operations["DeleteCustomersCustomerCardsId"];
    };
    "/v1/customers/{customer}/cash_balance": {
        get: operations["GetCustomersCustomerCashBalance"];
        post: operations["PostCustomersCustomerCashBalance"];
    };
    "/v1/customers/{customer}/cash_balance_transactions": {
        get: operations["GetCustomersCustomerCashBalanceTransactions"];
    };
    "/v1/customers/{customer}/cash_balance_transactions/{transaction}": {
        get: operations["GetCustomersCustomerCashBalanceTransactionsTransaction"];
    };
    "/v1/customers/{customer}/discount": {
        get: operations["GetCustomersCustomerDiscount"];
        delete: operations["DeleteCustomersCustomerDiscount"];
    };
    "/v1/customers/{customer}/funding_instructions": {
        post: operations["PostCustomersCustomerFundingInstructions"];
    };
    "/v1/customers/{customer}/payment_methods": {
        get: operations["GetCustomersCustomerPaymentMethods"];
    };
    "/v1/customers/{customer}/payment_methods/{payment_method}": {
        get: operations["GetCustomersCustomerPaymentMethodsPaymentMethod"];
    };
    "/v1/customers/{customer}/sources": {
        get: operations["GetCustomersCustomerSources"];
        post: operations["PostCustomersCustomerSources"];
    };
    "/v1/customers/{customer}/sources/{id}": {
        get: operations["GetCustomersCustomerSourcesId"];
        post: operations["PostCustomersCustomerSourcesId"];
        delete: operations["DeleteCustomersCustomerSourcesId"];
    };
    "/v1/customers/{customer}/sources/{id}/verify": {
        post: operations["PostCustomersCustomerSourcesIdVerify"];
    };
    "/v1/customers/{customer}/subscriptions": {
        get: operations["GetCustomersCustomerSubscriptions"];
        post: operations["PostCustomersCustomerSubscriptions"];
    };
    "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}": {
        get: operations["GetCustomersCustomerSubscriptionsSubscriptionExposedId"];
        post: operations["PostCustomersCustomerSubscriptionsSubscriptionExposedId"];
        delete: operations["DeleteCustomersCustomerSubscriptionsSubscriptionExposedId"];
    };
    "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount": {
        get: operations["GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount"];
        delete: operations["DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount"];
    };
    "/v1/customers/{customer}/tax_ids": {
        get: operations["GetCustomersCustomerTaxIds"];
        post: operations["PostCustomersCustomerTaxIds"];
    };
    "/v1/customers/{customer}/tax_ids/{id}": {
        get: operations["GetCustomersCustomerTaxIdsId"];
        delete: operations["DeleteCustomersCustomerTaxIdsId"];
    };
    "/v1/disputes": {
        get: operations["GetDisputes"];
    };
    "/v1/disputes/{dispute}": {
        get: operations["GetDisputesDispute"];
        post: operations["PostDisputesDispute"];
    };
    "/v1/disputes/{dispute}/close": {
        post: operations["PostDisputesDisputeClose"];
    };
    "/v1/ephemeral_keys": {
        post: operations["PostEphemeralKeys"];
    };
    "/v1/ephemeral_keys/{key}": {
        delete: operations["DeleteEphemeralKeysKey"];
    };
    "/v1/events": {
        get: operations["GetEvents"];
    };
    "/v1/events/{id}": {
        get: operations["GetEventsId"];
    };
    "/v1/exchange_rates": {
        get: operations["GetExchangeRates"];
    };
    "/v1/exchange_rates/{rate_id}": {
        get: operations["GetExchangeRatesRateId"];
    };
    "/v1/file_links": {
        get: operations["GetFileLinks"];
        post: operations["PostFileLinks"];
    };
    "/v1/file_links/{link}": {
        get: operations["GetFileLinksLink"];
        post: operations["PostFileLinksLink"];
    };
    "/v1/files": {
        get: operations["GetFiles"];
        post: operations["PostFiles"];
    };
    "/v1/files/{file}": {
        get: operations["GetFilesFile"];
    };
    "/v1/financial_connections/accounts": {
        get: operations["GetFinancialConnectionsAccounts"];
    };
    "/v1/financial_connections/accounts/{account}": {
        get: operations["GetFinancialConnectionsAccountsAccount"];
    };
    "/v1/financial_connections/accounts/{account}/disconnect": {
        post: operations["PostFinancialConnectionsAccountsAccountDisconnect"];
    };
    "/v1/financial_connections/accounts/{account}/owners": {
        get: operations["GetFinancialConnectionsAccountsAccountOwners"];
    };
    "/v1/financial_connections/accounts/{account}/refresh": {
        post: operations["PostFinancialConnectionsAccountsAccountRefresh"];
    };
    "/v1/financial_connections/sessions": {
        post: operations["PostFinancialConnectionsSessions"];
    };
    "/v1/financial_connections/sessions/{session}": {
        get: operations["GetFinancialConnectionsSessionsSession"];
    };
    "/v1/identity/verification_reports": {
        get: operations["GetIdentityVerificationReports"];
    };
    "/v1/identity/verification_reports/{report}": {
        get: operations["GetIdentityVerificationReportsReport"];
    };
    "/v1/identity/verification_sessions": {
        get: operations["GetIdentityVerificationSessions"];
        post: operations["PostIdentityVerificationSessions"];
    };
    "/v1/identity/verification_sessions/{session}": {
        get: operations["GetIdentityVerificationSessionsSession"];
        post: operations["PostIdentityVerificationSessionsSession"];
    };
    "/v1/identity/verification_sessions/{session}/cancel": {
        post: operations["PostIdentityVerificationSessionsSessionCancel"];
    };
    "/v1/identity/verification_sessions/{session}/redact": {
        post: operations["PostIdentityVerificationSessionsSessionRedact"];
    };
    "/v1/invoiceitems": {
        get: operations["GetInvoiceitems"];
        post: operations["PostInvoiceitems"];
    };
    "/v1/invoiceitems/{invoiceitem}": {
        get: operations["GetInvoiceitemsInvoiceitem"];
        post: operations["PostInvoiceitemsInvoiceitem"];
        delete: operations["DeleteInvoiceitemsInvoiceitem"];
    };
    "/v1/invoices": {
        get: operations["GetInvoices"];
        post: operations["PostInvoices"];
    };
    "/v1/invoices/search": {
        get: operations["GetInvoicesSearch"];
    };
    "/v1/invoices/upcoming": {
        get: operations["GetInvoicesUpcoming"];
    };
    "/v1/invoices/upcoming/lines": {
        get: operations["GetInvoicesUpcomingLines"];
    };
    "/v1/invoices/{invoice}": {
        get: operations["GetInvoicesInvoice"];
        post: operations["PostInvoicesInvoice"];
        delete: operations["DeleteInvoicesInvoice"];
    };
    "/v1/invoices/{invoice}/finalize": {
        post: operations["PostInvoicesInvoiceFinalize"];
    };
    "/v1/invoices/{invoice}/lines": {
        get: operations["GetInvoicesInvoiceLines"];
    };
    "/v1/invoices/{invoice}/mark_uncollectible": {
        post: operations["PostInvoicesInvoiceMarkUncollectible"];
    };
    "/v1/invoices/{invoice}/pay": {
        post: operations["PostInvoicesInvoicePay"];
    };
    "/v1/invoices/{invoice}/send": {
        post: operations["PostInvoicesInvoiceSend"];
    };
    "/v1/invoices/{invoice}/void": {
        post: operations["PostInvoicesInvoiceVoid"];
    };
    "/v1/issuing/authorizations": {
        get: operations["GetIssuingAuthorizations"];
    };
    "/v1/issuing/authorizations/{authorization}": {
        get: operations["GetIssuingAuthorizationsAuthorization"];
        post: operations["PostIssuingAuthorizationsAuthorization"];
    };
    "/v1/issuing/authorizations/{authorization}/approve": {
        post: operations["PostIssuingAuthorizationsAuthorizationApprove"];
    };
    "/v1/issuing/authorizations/{authorization}/decline": {
        post: operations["PostIssuingAuthorizationsAuthorizationDecline"];
    };
    "/v1/issuing/cardholders": {
        get: operations["GetIssuingCardholders"];
        post: operations["PostIssuingCardholders"];
    };
    "/v1/issuing/cardholders/{cardholder}": {
        get: operations["GetIssuingCardholdersCardholder"];
        post: operations["PostIssuingCardholdersCardholder"];
    };
    "/v1/issuing/cards": {
        get: operations["GetIssuingCards"];
        post: operations["PostIssuingCards"];
    };
    "/v1/issuing/cards/{card}": {
        get: operations["GetIssuingCardsCard"];
        post: operations["PostIssuingCardsCard"];
    };
    "/v1/issuing/disputes": {
        get: operations["GetIssuingDisputes"];
        post: operations["PostIssuingDisputes"];
    };
    "/v1/issuing/disputes/{dispute}": {
        get: operations["GetIssuingDisputesDispute"];
        post: operations["PostIssuingDisputesDispute"];
    };
    "/v1/issuing/disputes/{dispute}/submit": {
        post: operations["PostIssuingDisputesDisputeSubmit"];
    };
    "/v1/issuing/settlements": {
        get: operations["GetIssuingSettlements"];
    };
    "/v1/issuing/settlements/{settlement}": {
        get: operations["GetIssuingSettlementsSettlement"];
        post: operations["PostIssuingSettlementsSettlement"];
    };
    "/v1/issuing/transactions": {
        get: operations["GetIssuingTransactions"];
    };
    "/v1/issuing/transactions/{transaction}": {
        get: operations["GetIssuingTransactionsTransaction"];
        post: operations["PostIssuingTransactionsTransaction"];
    };
    "/v1/link_account_sessions": {
        post: operations["PostLinkAccountSessions"];
    };
    "/v1/link_account_sessions/{session}": {
        get: operations["GetLinkAccountSessionsSession"];
    };
    "/v1/linked_accounts": {
        get: operations["GetLinkedAccounts"];
    };
    "/v1/linked_accounts/{account}": {
        get: operations["GetLinkedAccountsAccount"];
    };
    "/v1/linked_accounts/{account}/disconnect": {
        post: operations["PostLinkedAccountsAccountDisconnect"];
    };
    "/v1/linked_accounts/{account}/owners": {
        get: operations["GetLinkedAccountsAccountOwners"];
    };
    "/v1/linked_accounts/{account}/refresh": {
        post: operations["PostLinkedAccountsAccountRefresh"];
    };
    "/v1/mandates/{mandate}": {
        get: operations["GetMandatesMandate"];
    };
    "/v1/payment_intents": {
        get: operations["GetPaymentIntents"];
        post: operations["PostPaymentIntents"];
    };
    "/v1/payment_intents/search": {
        get: operations["GetPaymentIntentsSearch"];
    };
    "/v1/payment_intents/{intent}": {
        get: operations["GetPaymentIntentsIntent"];
        post: operations["PostPaymentIntentsIntent"];
    };
    "/v1/payment_intents/{intent}/apply_customer_balance": {
        post: operations["PostPaymentIntentsIntentApplyCustomerBalance"];
    };
    "/v1/payment_intents/{intent}/cancel": {
        post: operations["PostPaymentIntentsIntentCancel"];
    };
    "/v1/payment_intents/{intent}/capture": {
        post: operations["PostPaymentIntentsIntentCapture"];
    };
    "/v1/payment_intents/{intent}/confirm": {
        post: operations["PostPaymentIntentsIntentConfirm"];
    };
    "/v1/payment_intents/{intent}/increment_authorization": {
        post: operations["PostPaymentIntentsIntentIncrementAuthorization"];
    };
    "/v1/payment_intents/{intent}/verify_microdeposits": {
        post: operations["PostPaymentIntentsIntentVerifyMicrodeposits"];
    };
    "/v1/payment_links": {
        get: operations["GetPaymentLinks"];
        post: operations["PostPaymentLinks"];
    };
    "/v1/payment_links/{payment_link}": {
        get: operations["GetPaymentLinksPaymentLink"];
        post: operations["PostPaymentLinksPaymentLink"];
    };
    "/v1/payment_links/{payment_link}/line_items": {
        get: operations["GetPaymentLinksPaymentLinkLineItems"];
    };
    "/v1/payment_methods": {
        get: operations["GetPaymentMethods"];
        post: operations["PostPaymentMethods"];
    };
    "/v1/payment_methods/{payment_method}": {
        get: operations["GetPaymentMethodsPaymentMethod"];
        post: operations["PostPaymentMethodsPaymentMethod"];
    };
    "/v1/payment_methods/{payment_method}/attach": {
        post: operations["PostPaymentMethodsPaymentMethodAttach"];
    };
    "/v1/payment_methods/{payment_method}/detach": {
        post: operations["PostPaymentMethodsPaymentMethodDetach"];
    };
    "/v1/payouts": {
        get: operations["GetPayouts"];
        post: operations["PostPayouts"];
    };
    "/v1/payouts/{payout}": {
        get: operations["GetPayoutsPayout"];
        post: operations["PostPayoutsPayout"];
    };
    "/v1/payouts/{payout}/cancel": {
        post: operations["PostPayoutsPayoutCancel"];
    };
    "/v1/payouts/{payout}/reverse": {
        post: operations["PostPayoutsPayoutReverse"];
    };
    "/v1/plans": {
        get: operations["GetPlans"];
        post: operations["PostPlans"];
    };
    "/v1/plans/{plan}": {
        get: operations["GetPlansPlan"];
        post: operations["PostPlansPlan"];
        delete: operations["DeletePlansPlan"];
    };
    "/v1/prices": {
        get: operations["GetPrices"];
        post: operations["PostPrices"];
    };
    "/v1/prices/search": {
        get: operations["GetPricesSearch"];
    };
    "/v1/prices/{price}": {
        get: operations["GetPricesPrice"];
        post: operations["PostPricesPrice"];
    };
    "/v1/products": {
        get: operations["GetProducts"];
        post: operations["PostProducts"];
    };
    "/v1/products/search": {
        get: operations["GetProductsSearch"];
    };
    "/v1/products/{id}": {
        get: operations["GetProductsId"];
        post: operations["PostProductsId"];
        delete: operations["DeleteProductsId"];
    };
    "/v1/promotion_codes": {
        get: operations["GetPromotionCodes"];
        post: operations["PostPromotionCodes"];
    };
    "/v1/promotion_codes/{promotion_code}": {
        get: operations["GetPromotionCodesPromotionCode"];
        post: operations["PostPromotionCodesPromotionCode"];
    };
    "/v1/quotes": {
        get: operations["GetQuotes"];
        post: operations["PostQuotes"];
    };
    "/v1/quotes/{quote}": {
        get: operations["GetQuotesQuote"];
        post: operations["PostQuotesQuote"];
    };
    "/v1/quotes/{quote}/accept": {
        post: operations["PostQuotesQuoteAccept"];
    };
    "/v1/quotes/{quote}/cancel": {
        post: operations["PostQuotesQuoteCancel"];
    };
    "/v1/quotes/{quote}/computed_upfront_line_items": {
        get: operations["GetQuotesQuoteComputedUpfrontLineItems"];
    };
    "/v1/quotes/{quote}/finalize": {
        post: operations["PostQuotesQuoteFinalize"];
    };
    "/v1/quotes/{quote}/line_items": {
        get: operations["GetQuotesQuoteLineItems"];
    };
    "/v1/quotes/{quote}/pdf": {
        get: operations["GetQuotesQuotePdf"];
    };
    "/v1/radar/early_fraud_warnings": {
        get: operations["GetRadarEarlyFraudWarnings"];
    };
    "/v1/radar/early_fraud_warnings/{early_fraud_warning}": {
        get: operations["GetRadarEarlyFraudWarningsEarlyFraudWarning"];
    };
    "/v1/radar/value_list_items": {
        get: operations["GetRadarValueListItems"];
        post: operations["PostRadarValueListItems"];
    };
    "/v1/radar/value_list_items/{item}": {
        get: operations["GetRadarValueListItemsItem"];
        delete: operations["DeleteRadarValueListItemsItem"];
    };
    "/v1/radar/value_lists": {
        get: operations["GetRadarValueLists"];
        post: operations["PostRadarValueLists"];
    };
    "/v1/radar/value_lists/{value_list}": {
        get: operations["GetRadarValueListsValueList"];
        post: operations["PostRadarValueListsValueList"];
        delete: operations["DeleteRadarValueListsValueList"];
    };
    "/v1/refunds": {
        get: operations["GetRefunds"];
        post: operations["PostRefunds"];
    };
    "/v1/refunds/{refund}": {
        get: operations["GetRefundsRefund"];
        post: operations["PostRefundsRefund"];
    };
    "/v1/refunds/{refund}/cancel": {
        post: operations["PostRefundsRefundCancel"];
    };
    "/v1/reporting/report_runs": {
        get: operations["GetReportingReportRuns"];
        post: operations["PostReportingReportRuns"];
    };
    "/v1/reporting/report_runs/{report_run}": {
        get: operations["GetReportingReportRunsReportRun"];
    };
    "/v1/reporting/report_types": {
        get: operations["GetReportingReportTypes"];
    };
    "/v1/reporting/report_types/{report_type}": {
        get: operations["GetReportingReportTypesReportType"];
    };
    "/v1/reviews": {
        get: operations["GetReviews"];
    };
    "/v1/reviews/{review}": {
        get: operations["GetReviewsReview"];
    };
    "/v1/reviews/{review}/approve": {
        post: operations["PostReviewsReviewApprove"];
    };
    "/v1/setup_attempts": {
        get: operations["GetSetupAttempts"];
    };
    "/v1/setup_intents": {
        get: operations["GetSetupIntents"];
        post: operations["PostSetupIntents"];
    };
    "/v1/setup_intents/{intent}": {
        get: operations["GetSetupIntentsIntent"];
        post: operations["PostSetupIntentsIntent"];
    };
    "/v1/setup_intents/{intent}/cancel": {
        post: operations["PostSetupIntentsIntentCancel"];
    };
    "/v1/setup_intents/{intent}/confirm": {
        post: operations["PostSetupIntentsIntentConfirm"];
    };
    "/v1/setup_intents/{intent}/verify_microdeposits": {
        post: operations["PostSetupIntentsIntentVerifyMicrodeposits"];
    };
    "/v1/shipping_rates": {
        get: operations["GetShippingRates"];
        post: operations["PostShippingRates"];
    };
    "/v1/shipping_rates/{shipping_rate_token}": {
        get: operations["GetShippingRatesShippingRateToken"];
        post: operations["PostShippingRatesShippingRateToken"];
    };
    "/v1/sigma/scheduled_query_runs": {
        get: operations["GetSigmaScheduledQueryRuns"];
    };
    "/v1/sigma/scheduled_query_runs/{scheduled_query_run}": {
        get: operations["GetSigmaScheduledQueryRunsScheduledQueryRun"];
    };
    "/v1/sources": {
        post: operations["PostSources"];
    };
    "/v1/sources/{source}": {
        get: operations["GetSourcesSource"];
        post: operations["PostSourcesSource"];
    };
    "/v1/sources/{source}/mandate_notifications/{mandate_notification}": {
        get: operations["GetSourcesSourceMandateNotificationsMandateNotification"];
    };
    "/v1/sources/{source}/source_transactions": {
        get: operations["GetSourcesSourceSourceTransactions"];
    };
    "/v1/sources/{source}/source_transactions/{source_transaction}": {
        get: operations["GetSourcesSourceSourceTransactionsSourceTransaction"];
    };
    "/v1/sources/{source}/verify": {
        post: operations["PostSourcesSourceVerify"];
    };
    "/v1/subscription_items": {
        get: operations["GetSubscriptionItems"];
        post: operations["PostSubscriptionItems"];
    };
    "/v1/subscription_items/{item}": {
        get: operations["GetSubscriptionItemsItem"];
        post: operations["PostSubscriptionItemsItem"];
        delete: operations["DeleteSubscriptionItemsItem"];
    };
    "/v1/subscription_items/{subscription_item}/usage_record_summaries": {
        get: operations["GetSubscriptionItemsSubscriptionItemUsageRecordSummaries"];
    };
    "/v1/subscription_items/{subscription_item}/usage_records": {
        post: operations["PostSubscriptionItemsSubscriptionItemUsageRecords"];
    };
    "/v1/subscription_schedules": {
        get: operations["GetSubscriptionSchedules"];
        post: operations["PostSubscriptionSchedules"];
    };
    "/v1/subscription_schedules/{schedule}": {
        get: operations["GetSubscriptionSchedulesSchedule"];
        post: operations["PostSubscriptionSchedulesSchedule"];
    };
    "/v1/subscription_schedules/{schedule}/cancel": {
        post: operations["PostSubscriptionSchedulesScheduleCancel"];
    };
    "/v1/subscription_schedules/{schedule}/release": {
        post: operations["PostSubscriptionSchedulesScheduleRelease"];
    };
    "/v1/subscriptions": {
        get: operations["GetSubscriptions"];
        post: operations["PostSubscriptions"];
    };
    "/v1/subscriptions/search": {
        get: operations["GetSubscriptionsSearch"];
    };
    "/v1/subscriptions/{subscription_exposed_id}": {
        get: operations["GetSubscriptionsSubscriptionExposedId"];
        post: operations["PostSubscriptionsSubscriptionExposedId"];
        delete: operations["DeleteSubscriptionsSubscriptionExposedId"];
    };
    "/v1/subscriptions/{subscription_exposed_id}/discount": {
        delete: operations["DeleteSubscriptionsSubscriptionExposedIdDiscount"];
    };
    "/v1/subscriptions/{subscription}/resume": {
        post: operations["PostSubscriptionsSubscriptionResume"];
    };
    "/v1/tax/calculations": {
        post: operations["PostTaxCalculations"];
    };
    "/v1/tax/calculations/{calculation}/line_items": {
        get: operations["GetTaxCalculationsCalculationLineItems"];
    };
    "/v1/tax/settings": {
        get: operations["GetTaxSettings"];
        post: operations["PostTaxSettings"];
    };
    "/v1/tax/transactions/create_from_calculation": {
        post: operations["PostTaxTransactionsCreateFromCalculation"];
    };
    "/v1/tax/transactions/create_reversal": {
        post: operations["PostTaxTransactionsCreateReversal"];
    };
    "/v1/tax/transactions/{transaction}": {
        get: operations["GetTaxTransactionsTransaction"];
    };
    "/v1/tax/transactions/{transaction}/line_items": {
        get: operations["GetTaxTransactionsTransactionLineItems"];
    };
    "/v1/tax_codes": {
        get: operations["GetTaxCodes"];
    };
    "/v1/tax_codes/{id}": {
        get: operations["GetTaxCodesId"];
    };
    "/v1/tax_rates": {
        get: operations["GetTaxRates"];
        post: operations["PostTaxRates"];
    };
    "/v1/tax_rates/{tax_rate}": {
        get: operations["GetTaxRatesTaxRate"];
        post: operations["PostTaxRatesTaxRate"];
    };
    "/v1/terminal/configurations": {
        get: operations["GetTerminalConfigurations"];
        post: operations["PostTerminalConfigurations"];
    };
    "/v1/terminal/configurations/{configuration}": {
        get: operations["GetTerminalConfigurationsConfiguration"];
        post: operations["PostTerminalConfigurationsConfiguration"];
        delete: operations["DeleteTerminalConfigurationsConfiguration"];
    };
    "/v1/terminal/connection_tokens": {
        post: operations["PostTerminalConnectionTokens"];
    };
    "/v1/terminal/locations": {
        get: operations["GetTerminalLocations"];
        post: operations["PostTerminalLocations"];
    };
    "/v1/terminal/locations/{location}": {
        get: operations["GetTerminalLocationsLocation"];
        post: operations["PostTerminalLocationsLocation"];
        delete: operations["DeleteTerminalLocationsLocation"];
    };
    "/v1/terminal/readers": {
        get: operations["GetTerminalReaders"];
        post: operations["PostTerminalReaders"];
    };
    "/v1/terminal/readers/{reader}": {
        get: operations["GetTerminalReadersReader"];
        post: operations["PostTerminalReadersReader"];
        delete: operations["DeleteTerminalReadersReader"];
    };
    "/v1/terminal/readers/{reader}/cancel_action": {
        post: operations["PostTerminalReadersReaderCancelAction"];
    };
    "/v1/terminal/readers/{reader}/process_payment_intent": {
        post: operations["PostTerminalReadersReaderProcessPaymentIntent"];
    };
    "/v1/terminal/readers/{reader}/process_setup_intent": {
        post: operations["PostTerminalReadersReaderProcessSetupIntent"];
    };
    "/v1/terminal/readers/{reader}/refund_payment": {
        post: operations["PostTerminalReadersReaderRefundPayment"];
    };
    "/v1/terminal/readers/{reader}/set_reader_display": {
        post: operations["PostTerminalReadersReaderSetReaderDisplay"];
    };
    "/v1/test_helpers/customers/{customer}/fund_cash_balance": {
        post: operations["PostTestHelpersCustomersCustomerFundCashBalance"];
    };
    "/v1/test_helpers/issuing/cards/{card}/shipping/deliver": {
        post: operations["PostTestHelpersIssuingCardsCardShippingDeliver"];
    };
    "/v1/test_helpers/issuing/cards/{card}/shipping/fail": {
        post: operations["PostTestHelpersIssuingCardsCardShippingFail"];
    };
    "/v1/test_helpers/issuing/cards/{card}/shipping/return": {
        post: operations["PostTestHelpersIssuingCardsCardShippingReturn"];
    };
    "/v1/test_helpers/issuing/cards/{card}/shipping/ship": {
        post: operations["PostTestHelpersIssuingCardsCardShippingShip"];
    };
    "/v1/test_helpers/refunds/{refund}/expire": {
        post: operations["PostTestHelpersRefundsRefundExpire"];
    };
    "/v1/test_helpers/terminal/readers/{reader}/present_payment_method": {
        post: operations["PostTestHelpersTerminalReadersReaderPresentPaymentMethod"];
    };
    "/v1/test_helpers/test_clocks": {
        get: operations["GetTestHelpersTestClocks"];
        post: operations["PostTestHelpersTestClocks"];
    };
    "/v1/test_helpers/test_clocks/{test_clock}": {
        get: operations["GetTestHelpersTestClocksTestClock"];
        delete: operations["DeleteTestHelpersTestClocksTestClock"];
    };
    "/v1/test_helpers/test_clocks/{test_clock}/advance": {
        post: operations["PostTestHelpersTestClocksTestClockAdvance"];
    };
    "/v1/test_helpers/treasury/inbound_transfers/{id}/fail": {
        post: operations["PostTestHelpersTreasuryInboundTransfersIdFail"];
    };
    "/v1/test_helpers/treasury/inbound_transfers/{id}/return": {
        post: operations["PostTestHelpersTreasuryInboundTransfersIdReturn"];
    };
    "/v1/test_helpers/treasury/inbound_transfers/{id}/succeed": {
        post: operations["PostTestHelpersTreasuryInboundTransfersIdSucceed"];
    };
    "/v1/test_helpers/treasury/outbound_payments/{id}/fail": {
        post: operations["PostTestHelpersTreasuryOutboundPaymentsIdFail"];
    };
    "/v1/test_helpers/treasury/outbound_payments/{id}/post": {
        post: operations["PostTestHelpersTreasuryOutboundPaymentsIdPost"];
    };
    "/v1/test_helpers/treasury/outbound_payments/{id}/return": {
        post: operations["PostTestHelpersTreasuryOutboundPaymentsIdReturn"];
    };
    "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/fail": {
        post: operations["PostTestHelpersTreasuryOutboundTransfersOutboundTransferFail"];
    };
    "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/post": {
        post: operations["PostTestHelpersTreasuryOutboundTransfersOutboundTransferPost"];
    };
    "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/return": {
        post: operations["PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturn"];
    };
    "/v1/test_helpers/treasury/received_credits": {
        post: operations["PostTestHelpersTreasuryReceivedCredits"];
    };
    "/v1/test_helpers/treasury/received_debits": {
        post: operations["PostTestHelpersTreasuryReceivedDebits"];
    };
    "/v1/tokens": {
        post: operations["PostTokens"];
    };
    "/v1/tokens/{token}": {
        get: operations["GetTokensToken"];
    };
    "/v1/topups": {
        get: operations["GetTopups"];
        post: operations["PostTopups"];
    };
    "/v1/topups/{topup}": {
        get: operations["GetTopupsTopup"];
        post: operations["PostTopupsTopup"];
    };
    "/v1/topups/{topup}/cancel": {
        post: operations["PostTopupsTopupCancel"];
    };
    "/v1/transfers": {
        get: operations["GetTransfers"];
        post: operations["PostTransfers"];
    };
    "/v1/transfers/{id}/reversals": {
        get: operations["GetTransfersIdReversals"];
        post: operations["PostTransfersIdReversals"];
    };
    "/v1/transfers/{transfer}": {
        get: operations["GetTransfersTransfer"];
        post: operations["PostTransfersTransfer"];
    };
    "/v1/transfers/{transfer}/reversals/{id}": {
        get: operations["GetTransfersTransferReversalsId"];
        post: operations["PostTransfersTransferReversalsId"];
    };
    "/v1/treasury/credit_reversals": {
        get: operations["GetTreasuryCreditReversals"];
        post: operations["PostTreasuryCreditReversals"];
    };
    "/v1/treasury/credit_reversals/{credit_reversal}": {
        get: operations["GetTreasuryCreditReversalsCreditReversal"];
    };
    "/v1/treasury/debit_reversals": {
        get: operations["GetTreasuryDebitReversals"];
        post: operations["PostTreasuryDebitReversals"];
    };
    "/v1/treasury/debit_reversals/{debit_reversal}": {
        get: operations["GetTreasuryDebitReversalsDebitReversal"];
    };
    "/v1/treasury/financial_accounts": {
        get: operations["GetTreasuryFinancialAccounts"];
        post: operations["PostTreasuryFinancialAccounts"];
    };
    "/v1/treasury/financial_accounts/{financial_account}": {
        get: operations["GetTreasuryFinancialAccountsFinancialAccount"];
        post: operations["PostTreasuryFinancialAccountsFinancialAccount"];
    };
    "/v1/treasury/financial_accounts/{financial_account}/features": {
        get: operations["GetTreasuryFinancialAccountsFinancialAccountFeatures"];
        post: operations["PostTreasuryFinancialAccountsFinancialAccountFeatures"];
    };
    "/v1/treasury/inbound_transfers": {
        get: operations["GetTreasuryInboundTransfers"];
        post: operations["PostTreasuryInboundTransfers"];
    };
    "/v1/treasury/inbound_transfers/{id}": {
        get: operations["GetTreasuryInboundTransfersId"];
    };
    "/v1/treasury/inbound_transfers/{inbound_transfer}/cancel": {
        post: operations["PostTreasuryInboundTransfersInboundTransferCancel"];
    };
    "/v1/treasury/outbound_payments": {
        get: operations["GetTreasuryOutboundPayments"];
        post: operations["PostTreasuryOutboundPayments"];
    };
    "/v1/treasury/outbound_payments/{id}": {
        get: operations["GetTreasuryOutboundPaymentsId"];
    };
    "/v1/treasury/outbound_payments/{id}/cancel": {
        post: operations["PostTreasuryOutboundPaymentsIdCancel"];
    };
    "/v1/treasury/outbound_transfers": {
        get: operations["GetTreasuryOutboundTransfers"];
        post: operations["PostTreasuryOutboundTransfers"];
    };
    "/v1/treasury/outbound_transfers/{outbound_transfer}": {
        get: operations["GetTreasuryOutboundTransfersOutboundTransfer"];
    };
    "/v1/treasury/outbound_transfers/{outbound_transfer}/cancel": {
        post: operations["PostTreasuryOutboundTransfersOutboundTransferCancel"];
    };
    "/v1/treasury/received_credits": {
        get: operations["GetTreasuryReceivedCredits"];
    };
    "/v1/treasury/received_credits/{id}": {
        get: operations["GetTreasuryReceivedCreditsId"];
    };
    "/v1/treasury/received_debits": {
        get: operations["GetTreasuryReceivedDebits"];
    };
    "/v1/treasury/received_debits/{id}": {
        get: operations["GetTreasuryReceivedDebitsId"];
    };
    "/v1/treasury/transaction_entries": {
        get: operations["GetTreasuryTransactionEntries"];
    };
    "/v1/treasury/transaction_entries/{id}": {
        get: operations["GetTreasuryTransactionEntriesId"];
    };
    "/v1/treasury/transactions": {
        get: operations["GetTreasuryTransactions"];
    };
    "/v1/treasury/transactions/{id}": {
        get: operations["GetTreasuryTransactionsId"];
    };
    "/v1/webhook_endpoints": {
        get: operations["GetWebhookEndpoints"];
        post: operations["PostWebhookEndpoints"];
    };
    "/v1/webhook_endpoints/{webhook_endpoint}": {
        get: operations["GetWebhookEndpointsWebhookEndpoint"];
        post: operations["PostWebhookEndpointsWebhookEndpoint"];
        delete: operations["DeleteWebhookEndpointsWebhookEndpoint"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        account: {
            business_profile?: components["schemas"]["account_business_profile"] | null;
            business_type?: "company" | "government_entity" | "individual" | "non_profit" | null;
            capabilities?: components["schemas"]["account_capabilities"];
            charges_enabled?: boolean;
            company?: components["schemas"]["legal_entity_company"];
            controller?: components["schemas"]["account_unification_account_controller"];
            country?: string;
            created?: number;
            default_currency?: string;
            details_submitted?: boolean;
            email?: string | null;
            external_accounts?: {
                data: (components["schemas"]["bank_account"] | components["schemas"]["card"])[];
                has_more: boolean;
                object: "list";
                url: string;
            };
            future_requirements?: components["schemas"]["account_future_requirements"];
            id: string;
            individual?: components["schemas"]["person"];
            metadata?: {
                [key: string]: string;
            };
            object: "account";
            payouts_enabled?: boolean;
            requirements?: components["schemas"]["account_requirements"];
            settings?: components["schemas"]["account_settings"] | null;
            tos_acceptance?: components["schemas"]["account_tos_acceptance"];
            type?: "custom" | "express" | "standard";
        };
        account_bacs_debit_payments_settings: {
            display_name?: string;
        };
        account_branding_settings: {
            icon?: (string | components["schemas"]["file"]) | null;
            logo?: (string | components["schemas"]["file"]) | null;
            primary_color?: string | null;
            secondary_color?: string | null;
        };
        account_business_profile: {
            mcc?: string | null;
            monthly_estimated_revenue?: components["schemas"]["account_monthly_estimated_revenue"];
            name?: string | null;
            product_description?: string | null;
            support_address?: components["schemas"]["address"] | null;
            support_email?: string | null;
            support_phone?: string | null;
            support_url?: string | null;
            url?: string | null;
        };
        account_capabilities: {
            acss_debit_payments?: "active" | "inactive" | "pending";
            affirm_payments?: "active" | "inactive" | "pending";
            afterpay_clearpay_payments?: "active" | "inactive" | "pending";
            au_becs_debit_payments?: "active" | "inactive" | "pending";
            bacs_debit_payments?: "active" | "inactive" | "pending";
            bancontact_payments?: "active" | "inactive" | "pending";
            bank_transfer_payments?: "active" | "inactive" | "pending";
            blik_payments?: "active" | "inactive" | "pending";
            boleto_payments?: "active" | "inactive" | "pending";
            card_issuing?: "active" | "inactive" | "pending";
            card_payments?: "active" | "inactive" | "pending";
            cartes_bancaires_payments?: "active" | "inactive" | "pending";
            cashapp_payments?: "active" | "inactive" | "pending";
            eps_payments?: "active" | "inactive" | "pending";
            fpx_payments?: "active" | "inactive" | "pending";
            giropay_payments?: "active" | "inactive" | "pending";
            grabpay_payments?: "active" | "inactive" | "pending";
            ideal_payments?: "active" | "inactive" | "pending";
            india_international_payments?: "active" | "inactive" | "pending";
            jcb_payments?: "active" | "inactive" | "pending";
            klarna_payments?: "active" | "inactive" | "pending";
            konbini_payments?: "active" | "inactive" | "pending";
            legacy_payments?: "active" | "inactive" | "pending";
            link_payments?: "active" | "inactive" | "pending";
            oxxo_payments?: "active" | "inactive" | "pending";
            p24_payments?: "active" | "inactive" | "pending";
            paynow_payments?: "active" | "inactive" | "pending";
            promptpay_payments?: "active" | "inactive" | "pending";
            sepa_debit_payments?: "active" | "inactive" | "pending";
            sofort_payments?: "active" | "inactive" | "pending";
            tax_reporting_us_1099_k?: "active" | "inactive" | "pending";
            tax_reporting_us_1099_misc?: "active" | "inactive" | "pending";
            transfers?: "active" | "inactive" | "pending";
            treasury?: "active" | "inactive" | "pending";
            us_bank_account_ach_payments?: "active" | "inactive" | "pending";
            zip_payments?: "active" | "inactive" | "pending";
        };
        account_capability_future_requirements: {
            alternatives?: components["schemas"]["account_requirements_alternative"][] | null;
            current_deadline?: number | null;
            currently_due: string[];
            disabled_reason?: string | null;
            errors: components["schemas"]["account_requirements_error"][];
            eventually_due: string[];
            past_due: string[];
            pending_verification: string[];
        };
        account_capability_requirements: {
            alternatives?: components["schemas"]["account_requirements_alternative"][] | null;
            current_deadline?: number | null;
            currently_due: string[];
            disabled_reason?: string | null;
            errors: components["schemas"]["account_requirements_error"][];
            eventually_due: string[];
            past_due: string[];
            pending_verification: string[];
        };
        account_card_issuing_settings: {
            tos_acceptance?: components["schemas"]["card_issuing_account_terms_of_service"];
        };
        account_card_payments_settings: {
            decline_on?: components["schemas"]["account_decline_charge_on"];
            statement_descriptor_prefix?: string | null;
            statement_descriptor_prefix_kana?: string | null;
            statement_descriptor_prefix_kanji?: string | null;
        };
        account_dashboard_settings: {
            display_name?: string | null;
            timezone?: string | null;
        };
        account_decline_charge_on: {
            avs_failure: boolean;
            cvc_failure: boolean;
        };
        account_future_requirements: {
            alternatives?: components["schemas"]["account_requirements_alternative"][] | null;
            current_deadline?: number | null;
            currently_due?: string[] | null;
            disabled_reason?: string | null;
            errors?: components["schemas"]["account_requirements_error"][] | null;
            eventually_due?: string[] | null;
            past_due?: string[] | null;
            pending_verification?: string[] | null;
        };
        account_link: {
            created: number;
            expires_at: number;
            object: "account_link";
            url: string;
        };
        account_monthly_estimated_revenue: {
            amount: number;
            currency: string;
        };
        account_payments_settings: {
            statement_descriptor?: string | null;
            statement_descriptor_kana?: string | null;
            statement_descriptor_kanji?: string | null;
            statement_descriptor_prefix_kana?: string | null;
            statement_descriptor_prefix_kanji?: string | null;
        };
        account_payout_settings: {
            debit_negative_balances: boolean;
            schedule: components["schemas"]["transfer_schedule"];
            statement_descriptor?: string | null;
        };
        account_requirements: {
            alternatives?: components["schemas"]["account_requirements_alternative"][] | null;
            current_deadline?: number | null;
            currently_due?: string[] | null;
            disabled_reason?: string | null;
            errors?: components["schemas"]["account_requirements_error"][] | null;
            eventually_due?: string[] | null;
            past_due?: string[] | null;
            pending_verification?: string[] | null;
        };
        account_requirements_alternative: {
            alternative_fields_due: string[];
            original_fields_due: string[];
        };
        account_requirements_error: {
            code: "invalid_address_city_state_postal_code" | "invalid_dob_age_under_18" | "invalid_representative_country" | "invalid_street_address" | "invalid_tos_acceptance" | "invalid_value_other" | "verification_directors_mismatch" | "verification_document_address_mismatch" | "verification_document_address_missing" | "verification_document_corrupt" | "verification_document_country_not_supported" | "verification_document_directors_mismatch" | "verification_document_dob_mismatch" | "verification_document_duplicate_type" | "verification_document_expired" | "verification_document_failed_copy" | "verification_document_failed_greyscale" | "verification_document_failed_other" | "verification_document_failed_test_mode" | "verification_document_fraudulent" | "verification_document_id_number_mismatch" | "verification_document_id_number_missing" | "verification_document_incomplete" | "verification_document_invalid" | "verification_document_issue_or_expiry_date_missing" | "verification_document_manipulated" | "verification_document_missing_back" | "verification_document_missing_front" | "verification_document_name_mismatch" | "verification_document_name_missing" | "verification_document_nationality_mismatch" | "verification_document_not_readable" | "verification_document_not_signed" | "verification_document_not_uploaded" | "verification_document_photo_mismatch" | "verification_document_too_large" | "verification_document_type_not_supported" | "verification_extraneous_directors" | "verification_failed_address_match" | "verification_failed_business_iec_number" | "verification_failed_document_match" | "verification_failed_id_number_match" | "verification_failed_keyed_identity" | "verification_failed_keyed_match" | "verification_failed_name_match" | "verification_failed_other" | "verification_failed_residential_address" | "verification_failed_tax_id_match" | "verification_failed_tax_id_not_issued" | "verification_missing_directors" | "verification_missing_executives" | "verification_missing_owners" | "verification_requires_additional_memorandum_of_associations";
            reason: string;
            requirement: string;
        };
        account_sepa_debit_payments_settings: {
            creditor_id?: string;
        };
        account_settings: {
            bacs_debit_payments?: components["schemas"]["account_bacs_debit_payments_settings"];
            branding: components["schemas"]["account_branding_settings"];
            card_issuing?: components["schemas"]["account_card_issuing_settings"];
            card_payments: components["schemas"]["account_card_payments_settings"];
            dashboard: components["schemas"]["account_dashboard_settings"];
            payments: components["schemas"]["account_payments_settings"];
            payouts?: components["schemas"]["account_payout_settings"];
            sepa_debit_payments?: components["schemas"]["account_sepa_debit_payments_settings"];
            treasury?: components["schemas"]["account_treasury_settings"];
        };
        account_terms_of_service: {
            date?: number | null;
            ip?: string | null;
            user_agent?: string;
        };
        account_tos_acceptance: {
            date?: number | null;
            ip?: string | null;
            service_agreement?: string;
            user_agent?: string | null;
        };
        account_treasury_settings: {
            tos_acceptance?: components["schemas"]["account_terms_of_service"];
        };
        account_unification_account_controller: {
            is_controller?: boolean;
            type: "account" | "application";
        };
        address: {
            city?: string | null;
            country?: string | null;
            line1?: string | null;
            line2?: string | null;
            postal_code?: string | null;
            state?: string | null;
        };
        api_errors: {
            charge?: string;
            code?: string;
            decline_code?: string;
            doc_url?: string;
            message?: string;
            param?: string;
            payment_intent?: components["schemas"]["payment_intent"];
            payment_method?: components["schemas"]["payment_method"];
            payment_method_type?: string;
            request_log_url?: string;
            setup_intent?: components["schemas"]["setup_intent"];
            source?: components["schemas"]["bank_account"] | components["schemas"]["card"] | components["schemas"]["source"];
            type: "api_error" | "card_error" | "idempotency_error" | "invalid_request_error";
        };
        apple_pay_domain: {
            created: number;
            domain_name: string;
            id: string;
            livemode: boolean;
            object: "apple_pay_domain";
        };
        application: {
            id: string;
            name?: string | null;
            object: "application";
        };
        application_fee: {
            account: string | components["schemas"]["account"];
            amount: number;
            amount_refunded: number;
            application: string | components["schemas"]["application"];
            balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            charge: string | components["schemas"]["charge"];
            created: number;
            currency: string;
            id: string;
            livemode: boolean;
            object: "application_fee";
            originating_transaction?: (string | components["schemas"]["charge"]) | null;
            refunded: boolean;
            refunds: {
                data: components["schemas"]["fee_refund"][];
                has_more: boolean;
                object: "list";
                url: string;
            };
        };
        "apps.secret": {
            created: number;
            deleted?: boolean;
            expires_at?: number | null;
            id: string;
            livemode: boolean;
            name: string;
            object: "apps.secret";
            payload?: string | null;
            scope: components["schemas"]["secret_service_resource_scope"];
        };
        automatic_tax: {
            enabled: boolean;
            status?: "complete" | "failed" | "requires_location_inputs" | null;
        };
        balance: {
            available: components["schemas"]["balance_amount"][];
            connect_reserved?: components["schemas"]["balance_amount"][];
            instant_available?: components["schemas"]["balance_amount"][];
            issuing?: components["schemas"]["balance_detail"];
            livemode: boolean;
            object: "balance";
            pending: components["schemas"]["balance_amount"][];
        };
        balance_amount: {
            amount: number;
            currency: string;
            source_types?: components["schemas"]["balance_amount_by_source_type"];
        };
        balance_amount_by_source_type: {
            bank_account?: number;
            card?: number;
            fpx?: number;
        };
        balance_detail: {
            available: components["schemas"]["balance_amount"][];
        };
        balance_transaction: {
            amount: number;
            available_on: number;
            created: number;
            currency: string;
            description?: string | null;
            exchange_rate?: number | null;
            fee: number;
            fee_details: components["schemas"]["fee"][];
            id: string;
            net: number;
            object: "balance_transaction";
            reporting_category: string;
            source?: (string | components["schemas"]["application_fee"] | components["schemas"]["charge"] | components["schemas"]["connect_collection_transfer"] | components["schemas"]["dispute"] | components["schemas"]["fee_refund"] | components["schemas"]["issuing.authorization"] | components["schemas"]["issuing.dispute"] | components["schemas"]["issuing.transaction"] | components["schemas"]["payout"] | components["schemas"]["platform_tax_fee"] | components["schemas"]["refund"] | components["schemas"]["reserve_transaction"] | components["schemas"]["tax_deducted_at_source"] | components["schemas"]["topup"] | components["schemas"]["transfer"] | components["schemas"]["transfer_reversal"]) | null;
            status: string;
            type: "adjustment" | "advance" | "advance_funding" | "anticipation_repayment" | "application_fee" | "application_fee_refund" | "charge" | "connect_collection_transfer" | "contribution" | "issuing_authorization_hold" | "issuing_authorization_release" | "issuing_dispute" | "issuing_transaction" | "payment" | "payment_failure_refund" | "payment_refund" | "payment_reversal" | "payout" | "payout_cancel" | "payout_failure" | "refund" | "refund_failure" | "reserve_transaction" | "reserved_funds" | "stripe_fee" | "stripe_fx_fee" | "tax_fee" | "topup" | "topup_reversal" | "transfer" | "transfer_cancel" | "transfer_failure" | "transfer_refund";
        };
        bank_account: {
            account?: (string | components["schemas"]["account"]) | null;
            account_holder_name?: string | null;
            account_holder_type?: string | null;
            account_type?: string | null;
            available_payout_methods?: (("instant" | "standard")[]) | null;
            bank_name?: string | null;
            country: string;
            currency: string;
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            default_for_currency?: boolean | null;
            fingerprint?: string | null;
            future_requirements?: components["schemas"]["external_account_requirements"] | null;
            id: string;
            last4: string;
            metadata?: {
                [key: string]: string;
            } | null;
            object: "bank_account";
            requirements?: components["schemas"]["external_account_requirements"] | null;
            routing_number?: string | null;
            status: string;
        };
        bank_connections_resource_accountholder: {
            account?: string | components["schemas"]["account"];
            customer?: string | components["schemas"]["customer"];
            type: "account" | "customer";
        };
        bank_connections_resource_balance: {
            as_of: number;
            cash?: components["schemas"]["bank_connections_resource_balance_api_resource_cash_balance"];
            credit?: components["schemas"]["bank_connections_resource_balance_api_resource_credit_balance"];
            current: {
                [key: string]: number;
            };
            type: "cash" | "credit";
        };
        bank_connections_resource_balance_api_resource_cash_balance: {
            available?: {
                [key: string]: number;
            } | null;
        };
        bank_connections_resource_balance_api_resource_credit_balance: {
            used?: {
                [key: string]: number;
            } | null;
        };
        bank_connections_resource_balance_refresh: {
            last_attempted_at: number;
            status: "failed" | "pending" | "succeeded";
        };
        bank_connections_resource_link_account_session_filters: {
            countries?: string[] | null;
        };
        bank_connections_resource_ownership_refresh: {
            last_attempted_at: number;
            status: "failed" | "pending" | "succeeded";
        };
        billing_details: {
            address?: components["schemas"]["address"] | null;
            email?: string | null;
            name?: string | null;
            phone?: string | null;
        };
        "billing_portal.configuration": {
            active: boolean;
            application?: (string | components["schemas"]["application"] | components["schemas"]["deleted_application"]) | null;
            business_profile: components["schemas"]["portal_business_profile"];
            created: number;
            default_return_url?: string | null;
            features: components["schemas"]["portal_features"];
            id: string;
            is_default: boolean;
            livemode: boolean;
            login_page: components["schemas"]["portal_login_page"];
            metadata?: {
                [key: string]: string;
            } | null;
            object: "billing_portal.configuration";
            updated: number;
        };
        "billing_portal.session": {
            configuration: string | components["schemas"]["billing_portal.configuration"];
            created: number;
            customer: string;
            flow?: components["schemas"]["portal_flows_flow"] | null;
            id: string;
            livemode: boolean;
            locale?: "auto" | "bg" | "cs" | "da" | "de" | "el" | "en" | "en-AU" | "en-CA" | "en-GB" | "en-IE" | "en-IN" | "en-NZ" | "en-SG" | "es" | "es-419" | "et" | "fi" | "fil" | "fr" | "fr-CA" | "hr" | "hu" | "id" | "it" | "ja" | "ko" | "lt" | "lv" | "ms" | "mt" | "nb" | "nl" | "pl" | "pt" | "pt-BR" | "ro" | "ru" | "sk" | "sl" | "sv" | "th" | "tr" | "vi" | "zh" | "zh-HK" | "zh-TW" | null;
            object: "billing_portal.session";
            on_behalf_of?: string | null;
            return_url?: string | null;
            url: string;
        };
        cancellation_details: {
            comment?: string | null;
            feedback?: "customer_service" | "low_quality" | "missing_features" | "other" | "switched_service" | "too_complex" | "too_expensive" | "unused" | null;
            reason?: "cancellation_requested" | "payment_disputed" | "payment_failed" | null;
        };
        capability: {
            account: string | components["schemas"]["account"];
            future_requirements?: components["schemas"]["account_capability_future_requirements"];
            id: string;
            object: "capability";
            requested: boolean;
            requested_at?: number | null;
            requirements?: components["schemas"]["account_capability_requirements"];
            status: "active" | "disabled" | "inactive" | "pending" | "unrequested";
        };
        card: {
            account?: (string | components["schemas"]["account"]) | null;
            address_city?: string | null;
            address_country?: string | null;
            address_line1?: string | null;
            address_line1_check?: string | null;
            address_line2?: string | null;
            address_state?: string | null;
            address_zip?: string | null;
            address_zip_check?: string | null;
            available_payout_methods?: (("instant" | "standard")[]) | null;
            brand: string;
            country?: string | null;
            currency?: string | null;
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            cvc_check?: string | null;
            default_for_currency?: boolean | null;
            dynamic_last4?: string | null;
            exp_month: number;
            exp_year: number;
            fingerprint?: string | null;
            funding: string;
            id: string;
            last4: string;
            metadata?: {
                [key: string]: string;
            } | null;
            name?: string | null;
            object: "card";
            status?: string | null;
            tokenization_method?: string | null;
        };
        card_generated_from_payment_method_details: {
            card_present?: components["schemas"]["payment_method_details_card_present"];
            type: string;
        };
        card_issuing_account_terms_of_service: {
            date?: number | null;
            ip?: string | null;
            user_agent?: string;
        };
        card_mandate_payment_method_details: Record<string, never>;
        cash_balance: {
            available?: {
                [key: string]: number;
            } | null;
            customer: string;
            livemode: boolean;
            object: "cash_balance";
            settings: components["schemas"]["customer_balance_customer_balance_settings"];
        };
        charge: {
            amount: number;
            amount_captured: number;
            amount_refunded: number;
            application?: (string | components["schemas"]["application"]) | null;
            application_fee?: (string | components["schemas"]["application_fee"]) | null;
            application_fee_amount?: number | null;
            balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            billing_details: components["schemas"]["billing_details"];
            calculated_statement_descriptor?: string | null;
            captured: boolean;
            created: number;
            currency: string;
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            description?: string | null;
            disputed: boolean;
            failure_balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            failure_code?: string | null;
            failure_message?: string | null;
            fraud_details?: components["schemas"]["charge_fraud_details"] | null;
            id: string;
            invoice?: (string | components["schemas"]["invoice"]) | null;
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            object: "charge";
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            outcome?: components["schemas"]["charge_outcome"] | null;
            paid: boolean;
            payment_intent?: (string | components["schemas"]["payment_intent"]) | null;
            payment_method?: string | null;
            payment_method_details?: components["schemas"]["payment_method_details"] | null;
            radar_options?: components["schemas"]["radar_radar_options"];
            receipt_email?: string | null;
            receipt_number?: string | null;
            receipt_url?: string | null;
            refunded: boolean;
            refunds?: {
                data: components["schemas"]["refund"][];
                has_more: boolean;
                object: "list";
                url: string;
            } | null;
            review?: (string | components["schemas"]["review"]) | null;
            shipping?: components["schemas"]["shipping"] | null;
            source_transfer?: (string | components["schemas"]["transfer"]) | null;
            statement_descriptor?: string | null;
            statement_descriptor_suffix?: string | null;
            status: "failed" | "pending" | "succeeded";
            transfer?: string | components["schemas"]["transfer"];
            transfer_data?: components["schemas"]["charge_transfer_data"] | null;
            transfer_group?: string | null;
        };
        charge_fraud_details: {
            stripe_report?: string;
            user_report?: string;
        };
        charge_outcome: {
            network_status?: string | null;
            reason?: string | null;
            risk_level?: string;
            risk_score?: number;
            rule?: string | components["schemas"]["rule"];
            seller_message?: string | null;
            type: string;
        };
        charge_transfer_data: {
            amount?: number | null;
            destination: string | components["schemas"]["account"];
        };
        "checkout.session": {
            after_expiration?: components["schemas"]["payment_pages_checkout_session_after_expiration"] | null;
            allow_promotion_codes?: boolean | null;
            amount_subtotal?: number | null;
            amount_total?: number | null;
            automatic_tax: components["schemas"]["payment_pages_checkout_session_automatic_tax"];
            billing_address_collection?: "auto" | "required" | null;
            cancel_url?: string | null;
            client_reference_id?: string | null;
            consent?: components["schemas"]["payment_pages_checkout_session_consent"] | null;
            consent_collection?: components["schemas"]["payment_pages_checkout_session_consent_collection"] | null;
            created: number;
            currency?: string | null;
            currency_conversion?: components["schemas"]["payment_pages_checkout_session_currency_conversion"] | null;
            custom_fields: components["schemas"]["payment_pages_checkout_session_custom_fields"][];
            custom_text: components["schemas"]["payment_pages_checkout_session_custom_text"];
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            customer_creation?: "always" | "if_required" | null;
            customer_details?: components["schemas"]["payment_pages_checkout_session_customer_details"] | null;
            customer_email?: string | null;
            expires_at: number;
            id: string;
            invoice?: (string | components["schemas"]["invoice"]) | null;
            invoice_creation?: components["schemas"]["payment_pages_checkout_session_invoice_creation"] | null;
            line_items?: {
                data: components["schemas"]["item"][];
                has_more: boolean;
                object: "list";
                url: string;
            };
            livemode: boolean;
            locale?: "auto" | "bg" | "cs" | "da" | "de" | "el" | "en" | "en-GB" | "es" | "es-419" | "et" | "fi" | "fil" | "fr" | "fr-CA" | "hr" | "hu" | "id" | "it" | "ja" | "ko" | "lt" | "lv" | "ms" | "mt" | "nb" | "nl" | "pl" | "pt" | "pt-BR" | "ro" | "ru" | "sk" | "sl" | "sv" | "th" | "tr" | "vi" | "zh" | "zh-HK" | "zh-TW" | null;
            metadata?: {
                [key: string]: string;
            } | null;
            mode: "payment" | "setup" | "subscription";
            object: "checkout.session";
            payment_intent?: (string | components["schemas"]["payment_intent"]) | null;
            payment_link?: (string | components["schemas"]["payment_link"]) | null;
            payment_method_collection?: "always" | "if_required" | null;
            payment_method_options?: components["schemas"]["checkout_session_payment_method_options"] | null;
            payment_method_types: string[];
            payment_status: "no_payment_required" | "paid" | "unpaid";
            phone_number_collection?: components["schemas"]["payment_pages_checkout_session_phone_number_collection"];
            recovered_from?: string | null;
            setup_intent?: (string | components["schemas"]["setup_intent"]) | null;
            shipping_address_collection?: components["schemas"]["payment_pages_checkout_session_shipping_address_collection"] | null;
            shipping_cost?: components["schemas"]["payment_pages_checkout_session_shipping_cost"] | null;
            shipping_details?: components["schemas"]["shipping"] | null;
            shipping_options: components["schemas"]["payment_pages_checkout_session_shipping_option"][];
            status?: "complete" | "expired" | "open" | null;
            submit_type?: "auto" | "book" | "donate" | "pay" | null;
            subscription?: (string | components["schemas"]["subscription"]) | null;
            success_url?: string | null;
            tax_id_collection?: components["schemas"]["payment_pages_checkout_session_tax_id_collection"];
            total_details?: components["schemas"]["payment_pages_checkout_session_total_details"] | null;
            url?: string | null;
        };
        checkout_acss_debit_mandate_options: {
            custom_mandate_url?: string;
            default_for?: ("invoice" | "subscription")[];
            interval_description?: string | null;
            payment_schedule?: "combined" | "interval" | "sporadic" | null;
            transaction_type?: "business" | "personal" | null;
        };
        checkout_acss_debit_payment_method_options: {
            currency?: "cad" | "usd";
            mandate_options?: components["schemas"]["checkout_acss_debit_mandate_options"];
            setup_future_usage?: "none" | "off_session" | "on_session";
            verification_method?: "automatic" | "instant" | "microdeposits";
        };
        checkout_affirm_payment_method_options: {
            setup_future_usage?: "none";
        };
        checkout_afterpay_clearpay_payment_method_options: {
            setup_future_usage?: "none";
        };
        checkout_alipay_payment_method_options: {
            setup_future_usage?: "none";
        };
        checkout_au_becs_debit_payment_method_options: {
            setup_future_usage?: "none";
        };
        checkout_bacs_debit_payment_method_options: {
            setup_future_usage?: "none" | "off_session" | "on_session";
        };
        checkout_bancontact_payment_method_options: {
            setup_future_usage?: "none";
        };
        checkout_boleto_payment_method_options: {
            expires_after_days: number;
            setup_future_usage?: "none" | "off_session" | "on_session";
        };
        checkout_card_installments_options: {
            enabled?: boolean;
        };
        checkout_card_payment_method_options: {
            installments?: components["schemas"]["checkout_card_installments_options"];
            setup_future_usage?: "none" | "off_session" | "on_session";
            statement_descriptor_suffix_kana?: string;
            statement_descriptor_suffix_kanji?: string;
        };
        checkout_cashapp_payment_method_options: {
            setup_future_usage?: "none";
        };
        checkout_customer_balance_bank_transfer_payment_method_options: {
            eu_bank_transfer?: components["schemas"]["payment_method_options_customer_balance_eu_bank_account"];
            requested_address_types?: ("aba" | "iban" | "sepa" | "sort_code" | "spei" | "swift" | "zengin")[];
            type?: "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer" | null;
        };
        checkout_customer_balance_payment_method_options: {
            bank_transfer?: components["schemas"]["checkout_customer_balance_bank_transfer_payment_method_options"];
            funding_type?: "bank_transfer" | null;
            setup_future_usage?: "none";
        };
        checkout_eps_payment_method_options: {
            setup_future_usage?: "none";
        };
        checkout_fpx_payment_method_options: {
            setup_future_usage?: "none";
        };
        checkout_giropay_payment_method_options: {
            setup_future_usage?: "none";
        };
        checkout_grab_pay_payment_method_options: {
            setup_future_usage?: "none";
        };
        checkout_ideal_payment_method_options: {
            setup_future_usage?: "none";
        };
        checkout_klarna_payment_method_options: {
            setup_future_usage?: "none" | "off_session" | "on_session";
        };
        checkout_konbini_payment_method_options: {
            expires_after_days?: number | null;
            setup_future_usage?: "none";
        };
        checkout_link_payment_method_options: {
            setup_future_usage?: "none" | "off_session";
        };
        checkout_oxxo_payment_method_options: {
            expires_after_days: number;
            setup_future_usage?: "none";
        };
        checkout_p24_payment_method_options: {
            setup_future_usage?: "none";
        };
        checkout_paynow_payment_method_options: {
            setup_future_usage?: "none";
        };
        checkout_pix_payment_method_options: {
            expires_after_seconds?: number | null;
        };
        checkout_sepa_debit_payment_method_options: {
            setup_future_usage?: "none" | "off_session" | "on_session";
        };
        checkout_session_payment_method_options: {
            acss_debit?: components["schemas"]["checkout_acss_debit_payment_method_options"];
            affirm?: components["schemas"]["checkout_affirm_payment_method_options"];
            afterpay_clearpay?: components["schemas"]["checkout_afterpay_clearpay_payment_method_options"];
            alipay?: components["schemas"]["checkout_alipay_payment_method_options"];
            au_becs_debit?: components["schemas"]["checkout_au_becs_debit_payment_method_options"];
            bacs_debit?: components["schemas"]["checkout_bacs_debit_payment_method_options"];
            bancontact?: components["schemas"]["checkout_bancontact_payment_method_options"];
            boleto?: components["schemas"]["checkout_boleto_payment_method_options"];
            card?: components["schemas"]["checkout_card_payment_method_options"];
            cashapp?: components["schemas"]["checkout_cashapp_payment_method_options"];
            customer_balance?: components["schemas"]["checkout_customer_balance_payment_method_options"];
            eps?: components["schemas"]["checkout_eps_payment_method_options"];
            fpx?: components["schemas"]["checkout_fpx_payment_method_options"];
            giropay?: components["schemas"]["checkout_giropay_payment_method_options"];
            grabpay?: components["schemas"]["checkout_grab_pay_payment_method_options"];
            ideal?: components["schemas"]["checkout_ideal_payment_method_options"];
            klarna?: components["schemas"]["checkout_klarna_payment_method_options"];
            konbini?: components["schemas"]["checkout_konbini_payment_method_options"];
            link?: components["schemas"]["checkout_link_payment_method_options"];
            oxxo?: components["schemas"]["checkout_oxxo_payment_method_options"];
            p24?: components["schemas"]["checkout_p24_payment_method_options"];
            paynow?: components["schemas"]["checkout_paynow_payment_method_options"];
            pix?: components["schemas"]["checkout_pix_payment_method_options"];
            sepa_debit?: components["schemas"]["checkout_sepa_debit_payment_method_options"];
            sofort?: components["schemas"]["checkout_sofort_payment_method_options"];
            us_bank_account?: components["schemas"]["checkout_us_bank_account_payment_method_options"];
        };
        checkout_sofort_payment_method_options: {
            setup_future_usage?: "none";
        };
        checkout_us_bank_account_payment_method_options: {
            financial_connections?: components["schemas"]["linked_account_options_us_bank_account"];
            setup_future_usage?: "none" | "off_session" | "on_session";
            verification_method?: "automatic" | "instant";
        };
        connect_collection_transfer: {
            amount: number;
            currency: string;
            destination: string | components["schemas"]["account"];
            id: string;
            livemode: boolean;
            object: "connect_collection_transfer";
        };
        country_spec: {
            default_currency: string;
            id: string;
            object: "country_spec";
            supported_bank_account_currencies: {
                [key: string]: string[];
            };
            supported_payment_currencies: string[];
            supported_payment_methods: string[];
            supported_transfer_countries: string[];
            verification_fields: components["schemas"]["country_spec_verification_fields"];
        };
        country_spec_verification_field_details: {
            additional: string[];
            minimum: string[];
        };
        country_spec_verification_fields: {
            company: components["schemas"]["country_spec_verification_field_details"];
            individual: components["schemas"]["country_spec_verification_field_details"];
        };
        coupon: {
            amount_off?: number | null;
            applies_to?: components["schemas"]["coupon_applies_to"];
            created: number;
            currency?: string | null;
            currency_options?: {
                [key: string]: components["schemas"]["coupon_currency_option"];
            };
            duration: "forever" | "once" | "repeating";
            duration_in_months?: number | null;
            id: string;
            livemode: boolean;
            max_redemptions?: number | null;
            metadata?: {
                [key: string]: string;
            } | null;
            name?: string | null;
            object: "coupon";
            percent_off?: number | null;
            redeem_by?: number | null;
            times_redeemed: number;
            valid: boolean;
        };
        coupon_applies_to: {
            products: string[];
        };
        coupon_currency_option: {
            amount_off: number;
        };
        credit_note: {
            amount: number;
            amount_shipping: number;
            created: number;
            currency: string;
            customer: string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"];
            customer_balance_transaction?: (string | components["schemas"]["customer_balance_transaction"]) | null;
            discount_amount: number;
            discount_amounts: components["schemas"]["discounts_resource_discount_amount"][];
            effective_at?: number | null;
            id: string;
            invoice: string | components["schemas"]["invoice"];
            lines: {
                data: components["schemas"]["credit_note_line_item"][];
                has_more: boolean;
                object: "list";
                url: string;
            };
            livemode: boolean;
            memo?: string | null;
            metadata?: {
                [key: string]: string;
            } | null;
            number: string;
            object: "credit_note";
            out_of_band_amount?: number | null;
            pdf: string;
            reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory" | null;
            refund?: (string | components["schemas"]["refund"]) | null;
            shipping_cost?: components["schemas"]["invoices_shipping_cost"] | null;
            status: "issued" | "void";
            subtotal: number;
            subtotal_excluding_tax?: number | null;
            tax_amounts: components["schemas"]["credit_note_tax_amount"][];
            total: number;
            total_excluding_tax?: number | null;
            type: "post_payment" | "pre_payment";
            voided_at?: number | null;
        };
        credit_note_line_item: {
            amount: number;
            amount_excluding_tax?: number | null;
            description?: string | null;
            discount_amount: number;
            discount_amounts: components["schemas"]["discounts_resource_discount_amount"][];
            id: string;
            invoice_line_item?: string;
            livemode: boolean;
            object: "credit_note_line_item";
            quantity?: number | null;
            tax_amounts: components["schemas"]["credit_note_tax_amount"][];
            tax_rates: components["schemas"]["tax_rate"][];
            type: "custom_line_item" | "invoice_line_item";
            unit_amount?: number | null;
            unit_amount_decimal?: string | null;
            unit_amount_excluding_tax?: string | null;
        };
        credit_note_tax_amount: {
            amount: number;
            inclusive: boolean;
            tax_rate: string | components["schemas"]["tax_rate"];
            taxability_reason?: "customer_exempt" | "not_collecting" | "not_subject_to_tax" | "not_supported" | "portion_product_exempt" | "portion_reduced_rated" | "portion_standard_rated" | "product_exempt" | "product_exempt_holiday" | "proportionally_rated" | "reduced_rated" | "reverse_charge" | "standard_rated" | "taxable_basis_reduced" | "zero_rated" | null;
            taxable_amount?: number | null;
        };
        currency_option: {
            custom_unit_amount?: components["schemas"]["custom_unit_amount"] | null;
            tax_behavior?: "exclusive" | "inclusive" | "unspecified" | null;
            tiers?: components["schemas"]["price_tier"][];
            unit_amount?: number | null;
            unit_amount_decimal?: string | null;
        };
        custom_unit_amount: {
            maximum?: number | null;
            minimum?: number | null;
            preset?: number | null;
        };
        customer: {
            address?: components["schemas"]["address"] | null;
            balance?: number;
            cash_balance?: components["schemas"]["cash_balance"] | null;
            created: number;
            currency?: string | null;
            default_source?: (string | components["schemas"]["bank_account"] | components["schemas"]["card"] | components["schemas"]["source"]) | null;
            delinquent?: boolean | null;
            description?: string | null;
            discount?: components["schemas"]["discount"] | null;
            email?: string | null;
            id: string;
            invoice_credit_balance?: {
                [key: string]: number;
            };
            invoice_prefix?: string | null;
            invoice_settings?: components["schemas"]["invoice_setting_customer_setting"];
            livemode: boolean;
            metadata?: {
                [key: string]: string;
            };
            name?: string | null;
            next_invoice_sequence?: number;
            object: "customer";
            phone?: string | null;
            preferred_locales?: string[] | null;
            shipping?: components["schemas"]["shipping"] | null;
            sources?: {
                data: (components["schemas"]["bank_account"] | components["schemas"]["card"] | components["schemas"]["source"])[];
                has_more: boolean;
                object: "list";
                url: string;
            };
            subscriptions?: {
                data: components["schemas"]["subscription"][];
                has_more: boolean;
                object: "list";
                url: string;
            };
            tax?: components["schemas"]["customer_tax"];
            tax_exempt?: "exempt" | "none" | "reverse" | null;
            tax_ids?: {
                data: components["schemas"]["tax_id"][];
                has_more: boolean;
                object: "list";
                url: string;
            };
            test_clock?: (string | components["schemas"]["test_helpers.test_clock"]) | null;
        };
        customer_acceptance: {
            accepted_at?: number | null;
            offline?: components["schemas"]["offline_acceptance"];
            online?: components["schemas"]["online_acceptance"];
            type: "offline" | "online";
        };
        customer_balance_customer_balance_settings: {
            reconciliation_mode: "automatic" | "manual";
            using_merchant_default: boolean;
        };
        customer_balance_resource_cash_balance_transaction_resource_adjusted_for_overdraft: {
            balance_transaction: string | components["schemas"]["balance_transaction"];
            linked_transaction: string | components["schemas"]["customer_cash_balance_transaction"];
        };
        customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction: {
            payment_intent: string | components["schemas"]["payment_intent"];
        };
        customer_balance_resource_cash_balance_transaction_resource_funded_transaction: {
            bank_transfer: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer"];
        };
        customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer: {
            eu_bank_transfer?: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_eu_bank_transfer"];
            gb_bank_transfer?: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_gb_bank_transfer"];
            jp_bank_transfer?: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_jp_bank_transfer"];
            reference?: string | null;
            type: "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer";
            us_bank_transfer?: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_us_bank_transfer"];
        };
        customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_eu_bank_transfer: {
            bic?: string | null;
            iban_last4?: string | null;
            sender_name?: string | null;
        };
        customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_gb_bank_transfer: {
            account_number_last4?: string | null;
            sender_name?: string | null;
            sort_code?: string | null;
        };
        customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_jp_bank_transfer: {
            sender_bank?: string | null;
            sender_branch?: string | null;
            sender_name?: string | null;
        };
        customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_us_bank_transfer: {
            network?: "ach" | "domestic_wire_us" | "swift";
            sender_name?: string | null;
        };
        customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction: {
            refund: string | components["schemas"]["refund"];
        };
        customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction: {
            payment_intent: string | components["schemas"]["payment_intent"];
        };
        customer_balance_transaction: {
            amount: number;
            created: number;
            credit_note?: (string | components["schemas"]["credit_note"]) | null;
            currency: string;
            customer: string | components["schemas"]["customer"];
            description?: string | null;
            ending_balance: number;
            id: string;
            invoice?: (string | components["schemas"]["invoice"]) | null;
            livemode: boolean;
            metadata?: {
                [key: string]: string;
            } | null;
            object: "customer_balance_transaction";
            type: "adjustment" | "applied_to_invoice" | "credit_note" | "initial" | "invoice_overpaid" | "invoice_too_large" | "invoice_too_small" | "migration" | "unapplied_from_invoice" | "unspent_receiver_credit";
        };
        customer_cash_balance_transaction: {
            adjusted_for_overdraft?: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_adjusted_for_overdraft"];
            applied_to_payment?: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction"];
            created: number;
            currency: string;
            customer: string | components["schemas"]["customer"];
            ending_balance: number;
            funded?: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_funded_transaction"];
            id: string;
            livemode: boolean;
            net_amount: number;
            object: "customer_cash_balance_transaction";
            refunded_from_payment?: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction"];
            type: "adjusted_for_overdraft" | "applied_to_payment" | "funded" | "funding_reversed" | "refunded_from_payment" | "return_canceled" | "return_initiated" | "unapplied_from_payment";
            unapplied_from_payment?: components["schemas"]["customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction"];
        };
        customer_tax: {
            automatic_tax: "failed" | "not_collecting" | "supported" | "unrecognized_location";
            ip_address?: string | null;
            location?: components["schemas"]["customer_tax_location"] | null;
        };
        customer_tax_location: {
            country: string;
            source: "billing_address" | "ip_address" | "payment_method" | "shipping_destination";
            state?: string | null;
        };
        deleted_account: {
            deleted: true;
            id: string;
            object: "account";
        };
        deleted_apple_pay_domain: {
            deleted: true;
            id: string;
            object: "apple_pay_domain";
        };
        deleted_application: {
            deleted: true;
            id: string;
            name?: string | null;
            object: "application";
        };
        deleted_bank_account: {
            currency?: string | null;
            deleted: true;
            id: string;
            object: "bank_account";
        };
        deleted_card: {
            currency?: string | null;
            deleted: true;
            id: string;
            object: "card";
        };
        deleted_coupon: {
            deleted: true;
            id: string;
            object: "coupon";
        };
        deleted_customer: {
            deleted: true;
            id: string;
            object: "customer";
        };
        deleted_discount: {
            checkout_session?: string | null;
            coupon: components["schemas"]["coupon"];
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            deleted: true;
            id: string;
            invoice?: string | null;
            invoice_item?: string | null;
            object: "discount";
            promotion_code?: (string | components["schemas"]["promotion_code"]) | null;
            start: number;
            subscription?: string | null;
        };
        deleted_external_account: components["schemas"]["deleted_bank_account"] | components["schemas"]["deleted_card"];
        deleted_invoice: {
            deleted: true;
            id: string;
            object: "invoice";
        };
        deleted_invoiceitem: {
            deleted: true;
            id: string;
            object: "invoiceitem";
        };
        deleted_payment_source: components["schemas"]["deleted_bank_account"] | components["schemas"]["deleted_card"];
        deleted_person: {
            deleted: true;
            id: string;
            object: "person";
        };
        deleted_plan: {
            deleted: true;
            id: string;
            object: "plan";
        };
        deleted_price: {
            deleted: true;
            id: string;
            object: "price";
        };
        deleted_product: {
            deleted: true;
            id: string;
            object: "product";
        };
        "deleted_radar.value_list": {
            deleted: true;
            id: string;
            object: "radar.value_list";
        };
        "deleted_radar.value_list_item": {
            deleted: true;
            id: string;
            object: "radar.value_list_item";
        };
        deleted_subscription_item: {
            deleted: true;
            id: string;
            object: "subscription_item";
        };
        deleted_tax_id: {
            deleted: true;
            id: string;
            object: "tax_id";
        };
        "deleted_terminal.configuration": {
            deleted: true;
            id: string;
            object: "terminal.configuration";
        };
        "deleted_terminal.location": {
            deleted: true;
            id: string;
            object: "terminal.location";
        };
        "deleted_terminal.reader": {
            deleted: true;
            id: string;
            object: "terminal.reader";
        };
        "deleted_test_helpers.test_clock": {
            deleted: true;
            id: string;
            object: "test_helpers.test_clock";
        };
        deleted_webhook_endpoint: {
            deleted: true;
            id: string;
            object: "webhook_endpoint";
        };
        discount: {
            checkout_session?: string | null;
            coupon: components["schemas"]["coupon"];
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            end?: number | null;
            id: string;
            invoice?: string | null;
            invoice_item?: string | null;
            object: "discount";
            promotion_code?: (string | components["schemas"]["promotion_code"]) | null;
            start: number;
            subscription?: string | null;
        };
        discounts_resource_discount_amount: {
            amount: number;
            discount: string | components["schemas"]["discount"] | components["schemas"]["deleted_discount"];
        };
        dispute: {
            amount: number;
            balance_transactions: components["schemas"]["balance_transaction"][];
            charge: string | components["schemas"]["charge"];
            created: number;
            currency: string;
            evidence: components["schemas"]["dispute_evidence"];
            evidence_details: components["schemas"]["dispute_evidence_details"];
            id: string;
            is_charge_refundable: boolean;
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            object: "dispute";
            payment_intent?: (string | components["schemas"]["payment_intent"]) | null;
            payment_method_details?: components["schemas"]["dispute_payment_method_details"];
            reason: string;
            status: "lost" | "needs_response" | "under_review" | "warning_closed" | "warning_needs_response" | "warning_under_review" | "won";
        };
        dispute_evidence: {
            access_activity_log?: string | null;
            billing_address?: string | null;
            cancellation_policy?: (string | components["schemas"]["file"]) | null;
            cancellation_policy_disclosure?: string | null;
            cancellation_rebuttal?: string | null;
            customer_communication?: (string | components["schemas"]["file"]) | null;
            customer_email_address?: string | null;
            customer_name?: string | null;
            customer_purchase_ip?: string | null;
            customer_signature?: (string | components["schemas"]["file"]) | null;
            duplicate_charge_documentation?: (string | components["schemas"]["file"]) | null;
            duplicate_charge_explanation?: string | null;
            duplicate_charge_id?: string | null;
            product_description?: string | null;
            receipt?: (string | components["schemas"]["file"]) | null;
            refund_policy?: (string | components["schemas"]["file"]) | null;
            refund_policy_disclosure?: string | null;
            refund_refusal_explanation?: string | null;
            service_date?: string | null;
            service_documentation?: (string | components["schemas"]["file"]) | null;
            shipping_address?: string | null;
            shipping_carrier?: string | null;
            shipping_date?: string | null;
            shipping_documentation?: (string | components["schemas"]["file"]) | null;
            shipping_tracking_number?: string | null;
            uncategorized_file?: (string | components["schemas"]["file"]) | null;
            uncategorized_text?: string | null;
        };
        dispute_evidence_details: {
            due_by?: number | null;
            has_evidence: boolean;
            past_due: boolean;
            submission_count: number;
        };
        dispute_payment_method_details: {
            card?: components["schemas"]["dispute_payment_method_details_card"] | null;
            type: "card";
        };
        dispute_payment_method_details_card: {
            brand: string;
            network_reason_code?: string | null;
        };
        email_sent: {
            email_sent_at: number;
            email_sent_to: string;
        };
        ephemeral_key: {
            created: number;
            expires: number;
            id: string;
            livemode: boolean;
            object: "ephemeral_key";
            secret?: string;
        };
        error: {
            error: components["schemas"]["api_errors"];
        };
        event: {
            account?: string;
            api_version?: string | null;
            created: number;
            data: components["schemas"]["notification_event_data"];
            id: string;
            livemode: boolean;
            object: "event";
            pending_webhooks: number;
            request?: components["schemas"]["notification_event_request"] | null;
            type: string;
        };
        exchange_rate: {
            id: string;
            object: "exchange_rate";
            rates: {
                [key: string]: number;
            };
        };
        external_account: components["schemas"]["bank_account"] | components["schemas"]["card"];
        external_account_requirements: {
            currently_due?: string[] | null;
            errors?: components["schemas"]["account_requirements_error"][] | null;
            past_due?: string[] | null;
            pending_verification?: string[] | null;
        };
        fee: {
            amount: number;
            application?: string | null;
            currency: string;
            description?: string | null;
            type: string;
        };
        fee_refund: {
            amount: number;
            balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            created: number;
            currency: string;
            fee: string | components["schemas"]["application_fee"];
            id: string;
            metadata?: {
                [key: string]: string;
            } | null;
            object: "fee_refund";
        };
        file: {
            created: number;
            expires_at?: number | null;
            filename?: string | null;
            id: string;
            links?: {
                data: components["schemas"]["file_link"][];
                has_more: boolean;
                object: "list";
                url: string;
            } | null;
            object: "file";
            purpose: "account_requirement" | "additional_verification" | "business_icon" | "business_logo" | "customer_signature" | "dispute_evidence" | "document_provider_identity_document" | "finance_report_run" | "identity_document" | "identity_document_downloadable" | "pci_document" | "selfie" | "sigma_scheduled_query" | "tax_document_user_upload" | "terminal_reader_splashscreen";
            size: number;
            title?: string | null;
            type?: string | null;
            url?: string | null;
        };
        file_link: {
            created: number;
            expired: boolean;
            expires_at?: number | null;
            file: string | components["schemas"]["file"];
            id: string;
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            object: "file_link";
            url?: string | null;
        };
        "financial_connections.account": {
            account_holder?: components["schemas"]["bank_connections_resource_accountholder"] | null;
            balance?: components["schemas"]["bank_connections_resource_balance"] | null;
            balance_refresh?: components["schemas"]["bank_connections_resource_balance_refresh"] | null;
            category: "cash" | "credit" | "investment" | "other";
            created: number;
            display_name?: string | null;
            id: string;
            institution_name: string;
            last4?: string | null;
            livemode: boolean;
            object: "financial_connections.account";
            ownership?: (string | components["schemas"]["financial_connections.account_ownership"]) | null;
            ownership_refresh?: components["schemas"]["bank_connections_resource_ownership_refresh"] | null;
            permissions?: (("balances" | "ownership" | "payment_method" | "transactions")[]) | null;
            status: "active" | "disconnected" | "inactive";
            subcategory: "checking" | "credit_card" | "line_of_credit" | "mortgage" | "other" | "savings";
            supported_payment_method_types: ("link" | "us_bank_account")[];
        };
        "financial_connections.account_owner": {
            email?: string | null;
            id: string;
            name: string;
            object: "financial_connections.account_owner";
            ownership: string;
            phone?: string | null;
            raw_address?: string | null;
            refreshed_at?: number | null;
        };
        "financial_connections.account_ownership": {
            created: number;
            id: string;
            object: "financial_connections.account_ownership";
            owners: {
                data: components["schemas"]["financial_connections.account_owner"][];
                has_more: boolean;
                object: "list";
                url: string;
            };
        };
        "financial_connections.session": {
            account_holder?: components["schemas"]["bank_connections_resource_accountholder"] | null;
            accounts: {
                data: components["schemas"]["financial_connections.account"][];
                has_more: boolean;
                object: "list";
                url: string;
            };
            client_secret: string;
            filters?: components["schemas"]["bank_connections_resource_link_account_session_filters"];
            id: string;
            livemode: boolean;
            object: "financial_connections.session";
            permissions: ("balances" | "ownership" | "payment_method" | "transactions")[];
            return_url?: string;
        };
        financial_reporting_finance_report_run_run_parameters: {
            columns?: string[];
            connected_account?: string;
            currency?: string;
            interval_end?: number;
            interval_start?: number;
            payout?: string;
            reporting_category?: string;
            timezone?: string;
        };
        funding_instructions: {
            bank_transfer: components["schemas"]["funding_instructions_bank_transfer"];
            currency: string;
            funding_type: "bank_transfer";
            livemode: boolean;
            object: "funding_instructions";
        };
        funding_instructions_bank_transfer: {
            country: string;
            financial_addresses: components["schemas"]["funding_instructions_bank_transfer_financial_address"][];
            type: "eu_bank_transfer" | "jp_bank_transfer";
        };
        funding_instructions_bank_transfer_financial_address: {
            iban?: components["schemas"]["funding_instructions_bank_transfer_iban_record"];
            sort_code?: components["schemas"]["funding_instructions_bank_transfer_sort_code_record"];
            spei?: components["schemas"]["funding_instructions_bank_transfer_spei_record"];
            supported_networks?: ("bacs" | "fps" | "sepa" | "spei" | "zengin")[];
            type: "iban" | "sort_code" | "spei" | "zengin";
            zengin?: components["schemas"]["funding_instructions_bank_transfer_zengin_record"];
        };
        funding_instructions_bank_transfer_iban_record: {
            account_holder_name: string;
            bic: string;
            country: string;
            iban: string;
        };
        funding_instructions_bank_transfer_sort_code_record: {
            account_holder_name: string;
            account_number: string;
            sort_code: string;
        };
        funding_instructions_bank_transfer_spei_record: {
            bank_code: string;
            bank_name: string;
            clabe: string;
        };
        funding_instructions_bank_transfer_zengin_record: {
            account_holder_name?: string | null;
            account_number?: string | null;
            account_type?: string | null;
            bank_code?: string | null;
            bank_name?: string | null;
            branch_code?: string | null;
            branch_name?: string | null;
        };
        gelato_data_document_report_date_of_birth: {
            day?: number | null;
            month?: number | null;
            year?: number | null;
        };
        gelato_data_document_report_expiration_date: {
            day?: number | null;
            month?: number | null;
            year?: number | null;
        };
        gelato_data_document_report_issued_date: {
            day?: number | null;
            month?: number | null;
            year?: number | null;
        };
        gelato_data_id_number_report_date: {
            day?: number | null;
            month?: number | null;
            year?: number | null;
        };
        gelato_data_verified_outputs_date: {
            day?: number | null;
            month?: number | null;
            year?: number | null;
        };
        gelato_document_report: {
            address?: components["schemas"]["address"] | null;
            dob?: components["schemas"]["gelato_data_document_report_date_of_birth"] | null;
            error?: components["schemas"]["gelato_document_report_error"] | null;
            expiration_date?: components["schemas"]["gelato_data_document_report_expiration_date"] | null;
            files?: string[] | null;
            first_name?: string | null;
            issued_date?: components["schemas"]["gelato_data_document_report_issued_date"] | null;
            issuing_country?: string | null;
            last_name?: string | null;
            number?: string | null;
            status: "unverified" | "verified";
            type?: "driving_license" | "id_card" | "passport" | null;
        };
        gelato_document_report_error: {
            code?: "document_expired" | "document_type_not_supported" | "document_unverified_other" | null;
            reason?: string | null;
        };
        gelato_id_number_report: {
            dob?: components["schemas"]["gelato_data_id_number_report_date"] | null;
            error?: components["schemas"]["gelato_id_number_report_error"] | null;
            first_name?: string | null;
            id_number?: string | null;
            id_number_type?: "br_cpf" | "sg_nric" | "us_ssn" | null;
            last_name?: string | null;
            status: "unverified" | "verified";
        };
        gelato_id_number_report_error: {
            code?: "id_number_insufficient_document_data" | "id_number_mismatch" | "id_number_unverified_other" | null;
            reason?: string | null;
        };
        gelato_report_document_options: {
            allowed_types?: ("driving_license" | "id_card" | "passport")[];
            require_id_number?: boolean;
            require_live_capture?: boolean;
            require_matching_selfie?: boolean;
        };
        gelato_report_id_number_options: Record<string, never>;
        gelato_selfie_report: {
            document?: string | null;
            error?: components["schemas"]["gelato_selfie_report_error"] | null;
            selfie?: string | null;
            status: "unverified" | "verified";
        };
        gelato_selfie_report_error: {
            code?: "selfie_document_missing_photo" | "selfie_face_mismatch" | "selfie_manipulated" | "selfie_unverified_other" | null;
            reason?: string | null;
        };
        gelato_session_document_options: {
            allowed_types?: ("driving_license" | "id_card" | "passport")[];
            require_id_number?: boolean;
            require_live_capture?: boolean;
            require_matching_selfie?: boolean;
        };
        gelato_session_id_number_options: Record<string, never>;
        gelato_session_last_error: {
            code?: "abandoned" | "consent_declined" | "country_not_supported" | "device_not_supported" | "document_expired" | "document_type_not_supported" | "document_unverified_other" | "id_number_insufficient_document_data" | "id_number_mismatch" | "id_number_unverified_other" | "selfie_document_missing_photo" | "selfie_face_mismatch" | "selfie_manipulated" | "selfie_unverified_other" | "under_supported_age" | null;
            reason?: string | null;
        };
        gelato_verification_report_options: {
            document?: components["schemas"]["gelato_report_document_options"];
            id_number?: components["schemas"]["gelato_report_id_number_options"];
        };
        gelato_verification_session_options: {
            document?: components["schemas"]["gelato_session_document_options"];
            id_number?: components["schemas"]["gelato_session_id_number_options"];
        };
        gelato_verified_outputs: {
            address?: components["schemas"]["address"] | null;
            dob?: components["schemas"]["gelato_data_verified_outputs_date"] | null;
            first_name?: string | null;
            id_number?: string | null;
            id_number_type?: "br_cpf" | "sg_nric" | "us_ssn" | null;
            last_name?: string | null;
        };
        "identity.verification_report": {
            created: number;
            document?: components["schemas"]["gelato_document_report"];
            id: string;
            id_number?: components["schemas"]["gelato_id_number_report"];
            livemode: boolean;
            object: "identity.verification_report";
            options?: components["schemas"]["gelato_verification_report_options"];
            selfie?: components["schemas"]["gelato_selfie_report"];
            type?: "document" | "id_number";
            verification_session?: string | null;
        };
        "identity.verification_session": {
            client_secret?: string | null;
            created: number;
            id: string;
            last_error?: components["schemas"]["gelato_session_last_error"] | null;
            last_verification_report?: (string | components["schemas"]["identity.verification_report"]) | null;
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            object: "identity.verification_session";
            options?: components["schemas"]["gelato_verification_session_options"] | null;
            redaction?: components["schemas"]["verification_session_redaction"] | null;
            status: "canceled" | "processing" | "requires_input" | "verified";
            type?: "document" | "id_number" | null;
            url?: string | null;
            verified_outputs?: components["schemas"]["gelato_verified_outputs"] | null;
        };
        inbound_transfers: {
            billing_details: components["schemas"]["treasury_shared_resource_billing_details"];
            type: "us_bank_account";
            us_bank_account?: components["schemas"]["inbound_transfers_payment_method_details_us_bank_account"];
        };
        inbound_transfers_payment_method_details_us_bank_account: {
            account_holder_type?: "company" | "individual" | null;
            account_type?: "checking" | "savings" | null;
            bank_name?: string | null;
            fingerprint?: string | null;
            last4?: string | null;
            network: "ach";
            routing_number?: string | null;
        };
        invoice: {
            account_country?: string | null;
            account_name?: string | null;
            account_tax_ids?: ((string | components["schemas"]["tax_id"] | components["schemas"]["deleted_tax_id"])[]) | null;
            amount_due: number;
            amount_paid: number;
            amount_remaining: number;
            amount_shipping: number;
            application?: (string | components["schemas"]["application"] | components["schemas"]["deleted_application"]) | null;
            application_fee_amount?: number | null;
            attempt_count: number;
            attempted: boolean;
            auto_advance?: boolean;
            automatic_tax: components["schemas"]["automatic_tax"];
            billing_reason?: "automatic_pending_invoice_item_invoice" | "manual" | "quote_accept" | "subscription" | "subscription_create" | "subscription_cycle" | "subscription_threshold" | "subscription_update" | "upcoming" | null;
            charge?: (string | components["schemas"]["charge"]) | null;
            collection_method: "charge_automatically" | "send_invoice";
            created: number;
            currency: string;
            custom_fields?: components["schemas"]["invoice_setting_custom_field"][] | null;
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            customer_address?: components["schemas"]["address"] | null;
            customer_email?: string | null;
            customer_name?: string | null;
            customer_phone?: string | null;
            customer_shipping?: components["schemas"]["shipping"] | null;
            customer_tax_exempt?: "exempt" | "none" | "reverse" | null;
            customer_tax_ids?: components["schemas"]["invoices_resource_invoice_tax_id"][] | null;
            default_payment_method?: (string | components["schemas"]["payment_method"]) | null;
            default_source?: (string | components["schemas"]["bank_account"] | components["schemas"]["card"] | components["schemas"]["source"]) | null;
            default_tax_rates: components["schemas"]["tax_rate"][];
            description?: string | null;
            discount?: components["schemas"]["discount"] | null;
            discounts?: ((string | components["schemas"]["discount"] | components["schemas"]["deleted_discount"])[]) | null;
            due_date?: number | null;
            effective_at?: number | null;
            ending_balance?: number | null;
            footer?: string | null;
            from_invoice?: components["schemas"]["invoices_from_invoice"] | null;
            hosted_invoice_url?: string | null;
            id?: string;
            invoice_pdf?: string | null;
            last_finalization_error?: components["schemas"]["api_errors"] | null;
            latest_revision?: (string | components["schemas"]["invoice"]) | null;
            lines: {
                data: components["schemas"]["line_item"][];
                has_more: boolean;
                object: "list";
                url: string;
            };
            livemode: boolean;
            metadata?: {
                [key: string]: string;
            } | null;
            next_payment_attempt?: number | null;
            number?: string | null;
            object: "invoice";
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            paid: boolean;
            paid_out_of_band: boolean;
            payment_intent?: (string | components["schemas"]["payment_intent"]) | null;
            payment_settings: components["schemas"]["invoices_payment_settings"];
            period_end: number;
            period_start: number;
            post_payment_credit_notes_amount: number;
            pre_payment_credit_notes_amount: number;
            quote?: (string | components["schemas"]["quote"]) | null;
            receipt_number?: string | null;
            rendering_options?: components["schemas"]["invoice_setting_rendering_options"] | null;
            shipping_cost?: components["schemas"]["invoices_shipping_cost"] | null;
            shipping_details?: components["schemas"]["shipping"] | null;
            starting_balance: number;
            statement_descriptor?: string | null;
            status?: "draft" | "open" | "paid" | "uncollectible" | "void" | null;
            status_transitions: components["schemas"]["invoices_status_transitions"];
            subscription?: (string | components["schemas"]["subscription"]) | null;
            subscription_details?: components["schemas"]["subscription_details_data"] | null;
            subscription_proration_date?: number;
            subtotal: number;
            subtotal_excluding_tax?: number | null;
            tax?: number | null;
            test_clock?: (string | components["schemas"]["test_helpers.test_clock"]) | null;
            threshold_reason?: components["schemas"]["invoice_threshold_reason"];
            total: number;
            total_discount_amounts?: components["schemas"]["discounts_resource_discount_amount"][] | null;
            total_excluding_tax?: number | null;
            total_tax_amounts: components["schemas"]["invoice_tax_amount"][];
            transfer_data?: components["schemas"]["invoice_transfer_data"] | null;
            webhooks_delivered_at?: number | null;
        };
        invoice_installments_card: {
            enabled?: boolean | null;
        };
        invoice_item_threshold_reason: {
            line_item_ids: string[];
            usage_gte: number;
        };
        invoice_line_item_period: {
            end: number;
            start: number;
        };
        invoice_mandate_options_card: {
            amount?: number | null;
            amount_type?: "fixed" | "maximum" | null;
            description?: string | null;
        };
        invoice_payment_method_options_acss_debit: {
            mandate_options?: components["schemas"]["invoice_payment_method_options_acss_debit_mandate_options"];
            verification_method?: "automatic" | "instant" | "microdeposits";
        };
        invoice_payment_method_options_acss_debit_mandate_options: {
            transaction_type?: "business" | "personal" | null;
        };
        invoice_payment_method_options_bancontact: {
            preferred_language: "de" | "en" | "fr" | "nl";
        };
        invoice_payment_method_options_card: {
            installments?: components["schemas"]["invoice_installments_card"];
            request_three_d_secure?: "any" | "automatic" | null;
        };
        invoice_payment_method_options_customer_balance: {
            bank_transfer?: components["schemas"]["invoice_payment_method_options_customer_balance_bank_transfer"];
            funding_type?: "bank_transfer" | null;
        };
        invoice_payment_method_options_customer_balance_bank_transfer: {
            eu_bank_transfer?: components["schemas"]["invoice_payment_method_options_customer_balance_bank_transfer_eu_bank_transfer"];
            type?: string | null;
        };
        invoice_payment_method_options_customer_balance_bank_transfer_eu_bank_transfer: {
            country: "BE" | "DE" | "ES" | "FR" | "IE" | "NL";
        };
        invoice_payment_method_options_konbini: Record<string, never>;
        invoice_payment_method_options_us_bank_account: {
            financial_connections?: components["schemas"]["invoice_payment_method_options_us_bank_account_linked_account_options"];
            verification_method?: "automatic" | "instant" | "microdeposits";
        };
        invoice_payment_method_options_us_bank_account_linked_account_options: {
            permissions?: ("balances" | "payment_method" | "transactions")[];
        };
        invoice_setting_custom_field: {
            name: string;
            value: string;
        };
        invoice_setting_customer_setting: {
            custom_fields?: components["schemas"]["invoice_setting_custom_field"][] | null;
            default_payment_method?: (string | components["schemas"]["payment_method"]) | null;
            footer?: string | null;
            rendering_options?: components["schemas"]["invoice_setting_rendering_options"] | null;
        };
        invoice_setting_phase_setting: {
            days_until_due?: number | null;
        };
        invoice_setting_quote_setting: {
            days_until_due?: number | null;
        };
        invoice_setting_rendering_options: {
            amount_tax_display?: string | null;
        };
        invoice_setting_subscription_schedule_setting: {
            days_until_due?: number | null;
        };
        invoice_tax_amount: {
            amount: number;
            inclusive: boolean;
            tax_rate: string | components["schemas"]["tax_rate"];
            taxability_reason?: "customer_exempt" | "not_collecting" | "not_subject_to_tax" | "not_supported" | "portion_product_exempt" | "portion_reduced_rated" | "portion_standard_rated" | "product_exempt" | "product_exempt_holiday" | "proportionally_rated" | "reduced_rated" | "reverse_charge" | "standard_rated" | "taxable_basis_reduced" | "zero_rated" | null;
            taxable_amount?: number | null;
        };
        invoice_threshold_reason: {
            amount_gte?: number | null;
            item_reasons: components["schemas"]["invoice_item_threshold_reason"][];
        };
        invoice_transfer_data: {
            amount?: number | null;
            destination: string | components["schemas"]["account"];
        };
        invoiceitem: {
            amount: number;
            currency: string;
            customer: string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"];
            date: number;
            description?: string | null;
            discountable: boolean;
            discounts?: ((string | components["schemas"]["discount"])[]) | null;
            id: string;
            invoice?: (string | components["schemas"]["invoice"]) | null;
            livemode: boolean;
            metadata?: {
                [key: string]: string;
            } | null;
            object: "invoiceitem";
            period: components["schemas"]["invoice_line_item_period"];
            price?: components["schemas"]["price"] | null;
            proration: boolean;
            quantity: number;
            subscription?: (string | components["schemas"]["subscription"]) | null;
            subscription_item?: string;
            tax_rates?: components["schemas"]["tax_rate"][] | null;
            test_clock?: (string | components["schemas"]["test_helpers.test_clock"]) | null;
            unit_amount?: number | null;
            unit_amount_decimal?: string | null;
        };
        invoices_from_invoice: {
            action: string;
            invoice: string | components["schemas"]["invoice"];
        };
        invoices_payment_method_options: {
            acss_debit?: components["schemas"]["invoice_payment_method_options_acss_debit"] | null;
            bancontact?: components["schemas"]["invoice_payment_method_options_bancontact"] | null;
            card?: components["schemas"]["invoice_payment_method_options_card"] | null;
            customer_balance?: components["schemas"]["invoice_payment_method_options_customer_balance"] | null;
            konbini?: components["schemas"]["invoice_payment_method_options_konbini"] | null;
            us_bank_account?: components["schemas"]["invoice_payment_method_options_us_bank_account"] | null;
        };
        invoices_payment_settings: {
            default_mandate?: string | null;
            payment_method_options?: components["schemas"]["invoices_payment_method_options"] | null;
            payment_method_types?: (("ach_credit_transfer" | "ach_debit" | "acss_debit" | "au_becs_debit" | "bacs_debit" | "bancontact" | "boleto" | "card" | "cashapp" | "customer_balance" | "fpx" | "giropay" | "grabpay" | "ideal" | "konbini" | "link" | "paynow" | "paypal" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay")[]) | null;
        };
        invoices_resource_invoice_tax_id: {
            type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bo_tin" | "br_cnpj" | "br_cpf" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "li_uid" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "no_vat" | "nz_gst" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "ua_vat" | "unknown" | "us_ein" | "uy_ruc" | "ve_rif" | "vn_tin" | "za_vat";
            value?: string | null;
        };
        invoices_resource_line_items_credited_items: {
            invoice: string;
            invoice_line_items: string[];
        };
        invoices_resource_line_items_proration_details: {
            credited_items?: components["schemas"]["invoices_resource_line_items_credited_items"] | null;
        };
        invoices_shipping_cost: {
            amount_subtotal: number;
            amount_tax: number;
            amount_total: number;
            shipping_rate?: (string | components["schemas"]["shipping_rate"]) | null;
            taxes?: components["schemas"]["line_items_tax_amount"][];
        };
        invoices_status_transitions: {
            finalized_at?: number | null;
            marked_uncollectible_at?: number | null;
            paid_at?: number | null;
            voided_at?: number | null;
        };
        "issuing.authorization": {
            amount: number;
            amount_details?: components["schemas"]["issuing_authorization_amount_details"] | null;
            approved: boolean;
            authorization_method: "chip" | "contactless" | "keyed_in" | "online" | "swipe";
            balance_transactions: components["schemas"]["balance_transaction"][];
            card: components["schemas"]["issuing.card"];
            cardholder?: (string | components["schemas"]["issuing.cardholder"]) | null;
            created: number;
            currency: string;
            id: string;
            livemode: boolean;
            merchant_amount: number;
            merchant_currency: string;
            merchant_data: components["schemas"]["issuing_authorization_merchant_data"];
            metadata: {
                [key: string]: string;
            };
            network_data?: components["schemas"]["issuing_authorization_network_data"] | null;
            object: "issuing.authorization";
            pending_request?: components["schemas"]["issuing_authorization_pending_request"] | null;
            request_history: components["schemas"]["issuing_authorization_request"][];
            status: "closed" | "pending" | "reversed";
            transactions: components["schemas"]["issuing.transaction"][];
            treasury?: components["schemas"]["issuing_authorization_treasury"] | null;
            verification_data: components["schemas"]["issuing_authorization_verification_data"];
            wallet?: string | null;
        };
        "issuing.card": {
            brand: string;
            cancellation_reason?: "design_rejected" | "lost" | "stolen" | null;
            cardholder: components["schemas"]["issuing.cardholder"];
            created: number;
            currency: string;
            cvc?: string;
            exp_month: number;
            exp_year: number;
            financial_account?: string | null;
            id: string;
            last4: string;
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            number?: string;
            object: "issuing.card";
            replaced_by?: (string | components["schemas"]["issuing.card"]) | null;
            replacement_for?: (string | components["schemas"]["issuing.card"]) | null;
            replacement_reason?: "damaged" | "expired" | "lost" | "stolen" | null;
            shipping?: components["schemas"]["issuing_card_shipping"] | null;
            spending_controls: components["schemas"]["issuing_card_authorization_controls"];
            status: "active" | "canceled" | "inactive";
            type: "physical" | "virtual";
            wallets?: components["schemas"]["issuing_card_wallets"] | null;
        };
        "issuing.cardholder": {
            billing: components["schemas"]["issuing_cardholder_address"];
            company?: components["schemas"]["issuing_cardholder_company"] | null;
            created: number;
            email?: string | null;
            id: string;
            individual?: components["schemas"]["issuing_cardholder_individual"] | null;
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            name: string;
            object: "issuing.cardholder";
            phone_number?: string | null;
            preferred_locales?: (("de" | "en" | "es" | "fr" | "it")[]) | null;
            requirements: components["schemas"]["issuing_cardholder_requirements"];
            spending_controls?: components["schemas"]["issuing_cardholder_authorization_controls"] | null;
            status: "active" | "blocked" | "inactive";
            type: "company" | "individual";
        };
        "issuing.dispute": {
            amount: number;
            balance_transactions?: components["schemas"]["balance_transaction"][] | null;
            created: number;
            currency: string;
            evidence: components["schemas"]["issuing_dispute_evidence"];
            id: string;
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            object: "issuing.dispute";
            status: "expired" | "lost" | "submitted" | "unsubmitted" | "won";
            transaction: string | components["schemas"]["issuing.transaction"];
            treasury?: components["schemas"]["issuing_dispute_treasury"] | null;
        };
        "issuing.settlement": {
            bin: string;
            clearing_date: number;
            created: number;
            currency: string;
            id: string;
            interchange_fees: number;
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            net_total: number;
            network: "visa";
            network_fees: number;
            network_settlement_identifier: string;
            object: "issuing.settlement";
            settlement_service: string;
            transaction_count: number;
            transaction_volume: number;
        };
        "issuing.transaction": {
            amount: number;
            amount_details?: components["schemas"]["issuing_transaction_amount_details"] | null;
            authorization?: (string | components["schemas"]["issuing.authorization"]) | null;
            balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            card: string | components["schemas"]["issuing.card"];
            cardholder?: (string | components["schemas"]["issuing.cardholder"]) | null;
            created: number;
            currency: string;
            dispute?: (string | components["schemas"]["issuing.dispute"]) | null;
            id: string;
            livemode: boolean;
            merchant_amount: number;
            merchant_currency: string;
            merchant_data: components["schemas"]["issuing_authorization_merchant_data"];
            metadata: {
                [key: string]: string;
            };
            object: "issuing.transaction";
            purchase_details?: components["schemas"]["issuing_transaction_purchase_details"] | null;
            treasury?: components["schemas"]["issuing_transaction_treasury"] | null;
            type: "capture" | "refund";
            wallet?: "apple_pay" | "google_pay" | "samsung_pay" | null;
        };
        issuing_authorization_amount_details: {
            atm_fee?: number | null;
        };
        issuing_authorization_merchant_data: {
            category: string;
            category_code: string;
            city?: string | null;
            country?: string | null;
            name?: string | null;
            network_id: string;
            postal_code?: string | null;
            state?: string | null;
            terminal_id?: string | null;
        };
        issuing_authorization_network_data: {
            acquiring_institution_id?: string | null;
        };
        issuing_authorization_pending_request: {
            amount: number;
            amount_details?: components["schemas"]["issuing_authorization_amount_details"] | null;
            currency: string;
            is_amount_controllable: boolean;
            merchant_amount: number;
            merchant_currency: string;
        };
        issuing_authorization_request: {
            amount: number;
            amount_details?: components["schemas"]["issuing_authorization_amount_details"] | null;
            approved: boolean;
            created: number;
            currency: string;
            merchant_amount: number;
            merchant_currency: string;
            reason: "account_disabled" | "card_active" | "card_inactive" | "cardholder_inactive" | "cardholder_verification_required" | "insufficient_funds" | "not_allowed" | "spending_controls" | "suspected_fraud" | "verification_failed" | "webhook_approved" | "webhook_declined" | "webhook_error" | "webhook_timeout";
            reason_message?: string | null;
        };
        issuing_authorization_treasury: {
            received_credits: string[];
            received_debits: string[];
            transaction?: string | null;
        };
        issuing_authorization_verification_data: {
            address_line1_check: "match" | "mismatch" | "not_provided";
            address_postal_code_check: "match" | "mismatch" | "not_provided";
            cvc_check: "match" | "mismatch" | "not_provided";
            expiry_check: "match" | "mismatch" | "not_provided";
        };
        issuing_card_apple_pay: {
            eligible: boolean;
            ineligible_reason?: "missing_agreement" | "missing_cardholder_contact" | "unsupported_region" | null;
        };
        issuing_card_authorization_controls: {
            allowed_categories?: (("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[]) | null;
            blocked_categories?: (("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[]) | null;
            spending_limits?: components["schemas"]["issuing_card_spending_limit"][] | null;
            spending_limits_currency?: string | null;
        };
        issuing_card_google_pay: {
            eligible: boolean;
            ineligible_reason?: "missing_agreement" | "missing_cardholder_contact" | "unsupported_region" | null;
        };
        issuing_card_shipping: {
            address: components["schemas"]["address"];
            carrier?: "dhl" | "fedex" | "royal_mail" | "usps" | null;
            customs?: components["schemas"]["issuing_card_shipping_customs"] | null;
            eta?: number | null;
            name: string;
            phone_number?: string | null;
            require_signature?: boolean | null;
            service: "express" | "priority" | "standard";
            status?: "canceled" | "delivered" | "failure" | "pending" | "returned" | "shipped" | null;
            tracking_number?: string | null;
            tracking_url?: string | null;
            type: "bulk" | "individual";
        };
        issuing_card_shipping_customs: {
            eori_number?: string | null;
        };
        issuing_card_spending_limit: {
            amount: number;
            categories?: (("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[]) | null;
            interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
        };
        issuing_card_wallets: {
            apple_pay: components["schemas"]["issuing_card_apple_pay"];
            google_pay: components["schemas"]["issuing_card_google_pay"];
            primary_account_identifier?: string | null;
        };
        issuing_cardholder_address: {
            address: components["schemas"]["address"];
        };
        issuing_cardholder_authorization_controls: {
            allowed_categories?: (("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[]) | null;
            blocked_categories?: (("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[]) | null;
            spending_limits?: components["schemas"]["issuing_cardholder_spending_limit"][] | null;
            spending_limits_currency?: string | null;
        };
        issuing_cardholder_card_issuing: {
            user_terms_acceptance?: components["schemas"]["issuing_cardholder_user_terms_acceptance"] | null;
        };
        issuing_cardholder_company: {
            tax_id_provided: boolean;
        };
        issuing_cardholder_id_document: {
            back?: (string | components["schemas"]["file"]) | null;
            front?: (string | components["schemas"]["file"]) | null;
        };
        issuing_cardholder_individual: {
            card_issuing?: components["schemas"]["issuing_cardholder_card_issuing"] | null;
            dob?: components["schemas"]["issuing_cardholder_individual_dob"] | null;
            first_name?: string | null;
            last_name?: string | null;
            verification?: components["schemas"]["issuing_cardholder_verification"] | null;
        };
        issuing_cardholder_individual_dob: {
            day?: number | null;
            month?: number | null;
            year?: number | null;
        };
        issuing_cardholder_requirements: {
            disabled_reason?: "listed" | "rejected.listed" | "requirements.past_due" | "under_review" | null;
            past_due?: (("company.tax_id" | "individual.card_issuing.user_terms_acceptance.date" | "individual.card_issuing.user_terms_acceptance.ip" | "individual.dob.day" | "individual.dob.month" | "individual.dob.year" | "individual.first_name" | "individual.last_name" | "individual.verification.document")[]) | null;
        };
        issuing_cardholder_spending_limit: {
            amount: number;
            categories?: (("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[]) | null;
            interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
        };
        issuing_cardholder_user_terms_acceptance: {
            date?: number | null;
            ip?: string | null;
            user_agent?: string | null;
        };
        issuing_cardholder_verification: {
            document?: components["schemas"]["issuing_cardholder_id_document"] | null;
        };
        issuing_dispute_canceled_evidence: {
            additional_documentation?: (string | components["schemas"]["file"]) | null;
            canceled_at?: number | null;
            cancellation_policy_provided?: boolean | null;
            cancellation_reason?: string | null;
            expected_at?: number | null;
            explanation?: string | null;
            product_description?: string | null;
            product_type?: "merchandise" | "service" | null;
            return_status?: "merchant_rejected" | "successful" | null;
            returned_at?: number | null;
        };
        issuing_dispute_duplicate_evidence: {
            additional_documentation?: (string | components["schemas"]["file"]) | null;
            card_statement?: (string | components["schemas"]["file"]) | null;
            cash_receipt?: (string | components["schemas"]["file"]) | null;
            check_image?: (string | components["schemas"]["file"]) | null;
            explanation?: string | null;
            original_transaction?: string | null;
        };
        issuing_dispute_evidence: {
            canceled?: components["schemas"]["issuing_dispute_canceled_evidence"];
            duplicate?: components["schemas"]["issuing_dispute_duplicate_evidence"];
            fraudulent?: components["schemas"]["issuing_dispute_fraudulent_evidence"];
            merchandise_not_as_described?: components["schemas"]["issuing_dispute_merchandise_not_as_described_evidence"];
            not_received?: components["schemas"]["issuing_dispute_not_received_evidence"];
            other?: components["schemas"]["issuing_dispute_other_evidence"];
            reason: "canceled" | "duplicate" | "fraudulent" | "merchandise_not_as_described" | "not_received" | "other" | "service_not_as_described";
            service_not_as_described?: components["schemas"]["issuing_dispute_service_not_as_described_evidence"];
        };
        issuing_dispute_fraudulent_evidence: {
            additional_documentation?: (string | components["schemas"]["file"]) | null;
            explanation?: string | null;
        };
        issuing_dispute_merchandise_not_as_described_evidence: {
            additional_documentation?: (string | components["schemas"]["file"]) | null;
            explanation?: string | null;
            received_at?: number | null;
            return_description?: string | null;
            return_status?: "merchant_rejected" | "successful" | null;
            returned_at?: number | null;
        };
        issuing_dispute_not_received_evidence: {
            additional_documentation?: (string | components["schemas"]["file"]) | null;
            expected_at?: number | null;
            explanation?: string | null;
            product_description?: string | null;
            product_type?: "merchandise" | "service" | null;
        };
        issuing_dispute_other_evidence: {
            additional_documentation?: (string | components["schemas"]["file"]) | null;
            explanation?: string | null;
            product_description?: string | null;
            product_type?: "merchandise" | "service" | null;
        };
        issuing_dispute_service_not_as_described_evidence: {
            additional_documentation?: (string | components["schemas"]["file"]) | null;
            canceled_at?: number | null;
            cancellation_reason?: string | null;
            explanation?: string | null;
            received_at?: number | null;
        };
        issuing_dispute_treasury: {
            debit_reversal?: string | null;
            received_debit: string;
        };
        issuing_transaction_amount_details: {
            atm_fee?: number | null;
        };
        issuing_transaction_flight_data: {
            departure_at?: number | null;
            passenger_name?: string | null;
            refundable?: boolean | null;
            segments?: components["schemas"]["issuing_transaction_flight_data_leg"][] | null;
            travel_agency?: string | null;
        };
        issuing_transaction_flight_data_leg: {
            arrival_airport_code?: string | null;
            carrier?: string | null;
            departure_airport_code?: string | null;
            flight_number?: string | null;
            service_class?: string | null;
            stopover_allowed?: boolean | null;
        };
        issuing_transaction_fuel_data: {
            type: string;
            unit: string;
            unit_cost_decimal: string;
            volume_decimal?: string | null;
        };
        issuing_transaction_lodging_data: {
            check_in_at?: number | null;
            nights?: number | null;
        };
        issuing_transaction_purchase_details: {
            flight?: components["schemas"]["issuing_transaction_flight_data"] | null;
            fuel?: components["schemas"]["issuing_transaction_fuel_data"] | null;
            lodging?: components["schemas"]["issuing_transaction_lodging_data"] | null;
            receipt?: components["schemas"]["issuing_transaction_receipt_data"][] | null;
            reference?: string | null;
        };
        issuing_transaction_receipt_data: {
            description?: string | null;
            quantity?: number | null;
            total?: number | null;
            unit_cost?: number | null;
        };
        issuing_transaction_treasury: {
            received_credit?: string | null;
            received_debit?: string | null;
        };
        item: {
            amount_discount: number;
            amount_subtotal: number;
            amount_tax: number;
            amount_total: number;
            currency: string;
            description: string;
            discounts?: components["schemas"]["line_items_discount_amount"][];
            id: string;
            object: "item";
            price?: components["schemas"]["price"] | null;
            quantity?: number | null;
            taxes?: components["schemas"]["line_items_tax_amount"][];
        };
        legal_entity_company: {
            address?: components["schemas"]["address"];
            address_kana?: components["schemas"]["legal_entity_japan_address"] | null;
            address_kanji?: components["schemas"]["legal_entity_japan_address"] | null;
            directors_provided?: boolean;
            executives_provided?: boolean;
            export_license_id?: string;
            export_purpose_code?: string;
            name?: string | null;
            name_kana?: string | null;
            name_kanji?: string | null;
            owners_provided?: boolean;
            ownership_declaration?: components["schemas"]["legal_entity_ubo_declaration"] | null;
            phone?: string | null;
            structure?: "free_zone_establishment" | "free_zone_llc" | "government_instrumentality" | "governmental_unit" | "incorporated_non_profit" | "incorporated_partnership" | "limited_liability_partnership" | "llc" | "multi_member_llc" | "private_company" | "private_corporation" | "private_partnership" | "public_company" | "public_corporation" | "public_partnership" | "single_member_llc" | "sole_establishment" | "sole_proprietorship" | "tax_exempt_government_instrumentality" | "unincorporated_association" | "unincorporated_non_profit" | "unincorporated_partnership";
            tax_id_provided?: boolean;
            tax_id_registrar?: string;
            vat_id_provided?: boolean;
            verification?: components["schemas"]["legal_entity_company_verification"] | null;
        };
        legal_entity_company_verification: {
            document: components["schemas"]["legal_entity_company_verification_document"];
        };
        legal_entity_company_verification_document: {
            back?: (string | components["schemas"]["file"]) | null;
            details?: string | null;
            details_code?: string | null;
            front?: (string | components["schemas"]["file"]) | null;
        };
        legal_entity_dob: {
            day?: number | null;
            month?: number | null;
            year?: number | null;
        };
        legal_entity_japan_address: {
            city?: string | null;
            country?: string | null;
            line1?: string | null;
            line2?: string | null;
            postal_code?: string | null;
            state?: string | null;
            town?: string | null;
        };
        legal_entity_person_verification: {
            additional_document?: components["schemas"]["legal_entity_person_verification_document"] | null;
            details?: string | null;
            details_code?: string | null;
            document?: components["schemas"]["legal_entity_person_verification_document"];
            status: string;
        };
        legal_entity_person_verification_document: {
            back?: (string | components["schemas"]["file"]) | null;
            details?: string | null;
            details_code?: string | null;
            front?: (string | components["schemas"]["file"]) | null;
        };
        legal_entity_ubo_declaration: {
            date?: number | null;
            ip?: string | null;
            user_agent?: string | null;
        };
        line_item: {
            amount: number;
            amount_excluding_tax?: number | null;
            currency: string;
            description?: string | null;
            discount_amounts?: components["schemas"]["discounts_resource_discount_amount"][] | null;
            discountable: boolean;
            discounts?: ((string | components["schemas"]["discount"])[]) | null;
            id: string;
            invoice_item?: string | components["schemas"]["invoiceitem"];
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            object: "line_item";
            period: components["schemas"]["invoice_line_item_period"];
            price?: components["schemas"]["price"] | null;
            proration: boolean;
            proration_details?: components["schemas"]["invoices_resource_line_items_proration_details"] | null;
            quantity?: number | null;
            subscription?: (string | components["schemas"]["subscription"]) | null;
            subscription_item?: string | components["schemas"]["subscription_item"];
            tax_amounts?: components["schemas"]["invoice_tax_amount"][];
            tax_rates?: components["schemas"]["tax_rate"][];
            type: "invoiceitem" | "subscription";
            unit_amount_excluding_tax?: string | null;
        };
        line_items_discount_amount: {
            amount: number;
            discount: components["schemas"]["discount"];
        };
        line_items_tax_amount: {
            amount: number;
            rate: components["schemas"]["tax_rate"];
            taxability_reason?: "customer_exempt" | "not_collecting" | "not_subject_to_tax" | "not_supported" | "portion_product_exempt" | "portion_reduced_rated" | "portion_standard_rated" | "product_exempt" | "product_exempt_holiday" | "proportionally_rated" | "reduced_rated" | "reverse_charge" | "standard_rated" | "taxable_basis_reduced" | "zero_rated" | null;
            taxable_amount?: number | null;
        };
        linked_account_options_us_bank_account: {
            permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
            return_url?: string;
        };
        login_link: {
            created: number;
            object: "login_link";
            url: string;
        };
        mandate: {
            customer_acceptance: components["schemas"]["customer_acceptance"];
            id: string;
            livemode: boolean;
            multi_use?: components["schemas"]["mandate_multi_use"];
            object: "mandate";
            on_behalf_of?: string;
            payment_method: string | components["schemas"]["payment_method"];
            payment_method_details: components["schemas"]["mandate_payment_method_details"];
            single_use?: components["schemas"]["mandate_single_use"];
            status: "active" | "inactive" | "pending";
            type: "multi_use" | "single_use";
        };
        mandate_acss_debit: {
            default_for?: ("invoice" | "subscription")[];
            interval_description?: string | null;
            payment_schedule: "combined" | "interval" | "sporadic";
            transaction_type: "business" | "personal";
        };
        mandate_au_becs_debit: {
            url: string;
        };
        mandate_bacs_debit: {
            network_status: "accepted" | "pending" | "refused" | "revoked";
            reference: string;
            url: string;
        };
        mandate_cashapp: Record<string, never>;
        mandate_link: Record<string, never>;
        mandate_multi_use: Record<string, never>;
        mandate_payment_method_details: {
            acss_debit?: components["schemas"]["mandate_acss_debit"];
            au_becs_debit?: components["schemas"]["mandate_au_becs_debit"];
            bacs_debit?: components["schemas"]["mandate_bacs_debit"];
            card?: components["schemas"]["card_mandate_payment_method_details"];
            cashapp?: components["schemas"]["mandate_cashapp"];
            link?: components["schemas"]["mandate_link"];
            paypal?: components["schemas"]["mandate_paypal"];
            sepa_debit?: components["schemas"]["mandate_sepa_debit"];
            type: string;
            us_bank_account?: components["schemas"]["mandate_us_bank_account"];
        };
        mandate_paypal: {
            billing_agreement_id?: string | null;
            payer_id?: string | null;
        };
        mandate_sepa_debit: {
            reference: string;
            url: string;
        };
        mandate_single_use: {
            amount: number;
            currency: string;
        };
        mandate_us_bank_account: Record<string, never>;
        networks: {
            available: string[];
            preferred?: string | null;
        };
        notification_event_data: {
            object: Record<string, never>;
            previous_attributes?: Record<string, never>;
        };
        notification_event_request: {
            id?: string | null;
            idempotency_key?: string | null;
        };
        offline_acceptance: Record<string, never>;
        online_acceptance: {
            ip_address?: string | null;
            user_agent?: string | null;
        };
        outbound_payments_payment_method_details: {
            billing_details: components["schemas"]["treasury_shared_resource_billing_details"];
            financial_account?: components["schemas"]["outbound_payments_payment_method_details_financial_account"];
            type: "financial_account" | "us_bank_account";
            us_bank_account?: components["schemas"]["outbound_payments_payment_method_details_us_bank_account"];
        };
        outbound_payments_payment_method_details_financial_account: {
            id: string;
            network: "stripe";
        };
        outbound_payments_payment_method_details_us_bank_account: {
            account_holder_type?: "company" | "individual" | null;
            account_type?: "checking" | "savings" | null;
            bank_name?: string | null;
            fingerprint?: string | null;
            last4?: string | null;
            network: "ach" | "us_domestic_wire";
            routing_number?: string | null;
        };
        outbound_transfers_payment_method_details: {
            billing_details: components["schemas"]["treasury_shared_resource_billing_details"];
            type: "us_bank_account";
            us_bank_account?: components["schemas"]["outbound_transfers_payment_method_details_us_bank_account"];
        };
        outbound_transfers_payment_method_details_us_bank_account: {
            account_holder_type?: "company" | "individual" | null;
            account_type?: "checking" | "savings" | null;
            bank_name?: string | null;
            fingerprint?: string | null;
            last4?: string | null;
            network: "ach" | "us_domestic_wire";
            routing_number?: string | null;
        };
        package_dimensions: {
            height: number;
            length: number;
            weight: number;
            width: number;
        };
        payment_flows_amount_details: {
            tip?: components["schemas"]["payment_flows_amount_details_resource_tip"];
        };
        payment_flows_amount_details_resource_tip: {
            amount?: number;
        };
        payment_flows_automatic_payment_methods_payment_intent: {
            allow_redirects?: "always" | "never";
            enabled: boolean;
        };
        payment_flows_automatic_payment_methods_setup_intent: {
            allow_redirects?: "always" | "never";
            enabled?: boolean | null;
        };
        payment_flows_installment_options: {
            enabled: boolean;
            plan?: components["schemas"]["payment_method_details_card_installments_plan"];
        };
        payment_flows_private_payment_methods_alipay: Record<string, never>;
        payment_flows_private_payment_methods_alipay_details: {
            buyer_id?: string;
            fingerprint?: string | null;
            transaction_id?: string | null;
        };
        payment_flows_private_payment_methods_klarna_dob: {
            day?: number | null;
            month?: number | null;
            year?: number | null;
        };
        payment_intent: {
            amount: number;
            amount_capturable?: number;
            amount_details?: components["schemas"]["payment_flows_amount_details"];
            amount_received?: number;
            application?: (string | components["schemas"]["application"]) | null;
            application_fee_amount?: number | null;
            automatic_payment_methods?: components["schemas"]["payment_flows_automatic_payment_methods_payment_intent"] | null;
            canceled_at?: number | null;
            cancellation_reason?: "abandoned" | "automatic" | "duplicate" | "failed_invoice" | "fraudulent" | "requested_by_customer" | "void_invoice" | null;
            capture_method: "automatic" | "automatic_async" | "manual";
            client_secret?: string | null;
            confirmation_method: "automatic" | "manual";
            created: number;
            currency: string;
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            description?: string | null;
            id: string;
            invoice?: (string | components["schemas"]["invoice"]) | null;
            last_payment_error?: components["schemas"]["api_errors"] | null;
            latest_charge?: (string | components["schemas"]["charge"]) | null;
            livemode: boolean;
            metadata?: {
                [key: string]: string;
            };
            next_action?: components["schemas"]["payment_intent_next_action"] | null;
            object: "payment_intent";
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            payment_method?: (string | components["schemas"]["payment_method"]) | null;
            payment_method_options?: components["schemas"]["payment_intent_payment_method_options"] | null;
            payment_method_types: string[];
            processing?: components["schemas"]["payment_intent_processing"] | null;
            receipt_email?: string | null;
            review?: (string | components["schemas"]["review"]) | null;
            setup_future_usage?: "off_session" | "on_session" | null;
            shipping?: components["schemas"]["shipping"] | null;
            statement_descriptor?: string | null;
            statement_descriptor_suffix?: string | null;
            status: "canceled" | "processing" | "requires_action" | "requires_capture" | "requires_confirmation" | "requires_payment_method" | "succeeded";
            transfer_data?: components["schemas"]["transfer_data"] | null;
            transfer_group?: string | null;
        };
        payment_intent_card_processing: {
            customer_notification?: components["schemas"]["payment_intent_processing_customer_notification"];
        };
        payment_intent_next_action: {
            alipay_handle_redirect?: components["schemas"]["payment_intent_next_action_alipay_handle_redirect"];
            boleto_display_details?: components["schemas"]["payment_intent_next_action_boleto"];
            card_await_notification?: components["schemas"]["payment_intent_next_action_card_await_notification"];
            cashapp_handle_redirect_or_display_qr_code?: components["schemas"]["payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code"];
            display_bank_transfer_instructions?: components["schemas"]["payment_intent_next_action_display_bank_transfer_instructions"];
            konbini_display_details?: components["schemas"]["payment_intent_next_action_konbini"];
            oxxo_display_details?: components["schemas"]["payment_intent_next_action_display_oxxo_details"];
            paynow_display_qr_code?: components["schemas"]["payment_intent_next_action_paynow_display_qr_code"];
            pix_display_qr_code?: components["schemas"]["payment_intent_next_action_pix_display_qr_code"];
            promptpay_display_qr_code?: components["schemas"]["payment_intent_next_action_promptpay_display_qr_code"];
            redirect_to_url?: components["schemas"]["payment_intent_next_action_redirect_to_url"];
            type: string;
            use_stripe_sdk?: Record<string, never>;
            verify_with_microdeposits?: components["schemas"]["payment_intent_next_action_verify_with_microdeposits"];
            wechat_pay_display_qr_code?: components["schemas"]["payment_intent_next_action_wechat_pay_display_qr_code"];
            wechat_pay_redirect_to_android_app?: components["schemas"]["payment_intent_next_action_wechat_pay_redirect_to_android_app"];
            wechat_pay_redirect_to_ios_app?: components["schemas"]["payment_intent_next_action_wechat_pay_redirect_to_ios_app"];
        };
        payment_intent_next_action_alipay_handle_redirect: {
            native_data?: string | null;
            native_url?: string | null;
            return_url?: string | null;
            url?: string | null;
        };
        payment_intent_next_action_boleto: {
            expires_at?: number | null;
            hosted_voucher_url?: string | null;
            number?: string | null;
            pdf?: string | null;
        };
        payment_intent_next_action_card_await_notification: {
            charge_attempt_at?: number | null;
            customer_approval_required?: boolean | null;
        };
        payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code: {
            hosted_instructions_url: string;
            mobile_auth_url: string;
            qr_code: components["schemas"]["payment_intent_next_action_cashapp_qr_code"];
        };
        payment_intent_next_action_cashapp_qr_code: {
            expires_at: number;
            image_url_png: string;
            image_url_svg: string;
        };
        payment_intent_next_action_display_bank_transfer_instructions: {
            amount_remaining?: number | null;
            currency?: string | null;
            financial_addresses?: components["schemas"]["funding_instructions_bank_transfer_financial_address"][];
            hosted_instructions_url?: string | null;
            reference?: string | null;
            type: "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer";
        };
        payment_intent_next_action_display_oxxo_details: {
            expires_after?: number | null;
            hosted_voucher_url?: string | null;
            number?: string | null;
        };
        payment_intent_next_action_konbini: {
            expires_at: number;
            hosted_voucher_url?: string | null;
            stores: components["schemas"]["payment_intent_next_action_konbini_stores"];
        };
        payment_intent_next_action_konbini_familymart: {
            confirmation_number?: string;
            payment_code: string;
        };
        payment_intent_next_action_konbini_lawson: {
            confirmation_number?: string;
            payment_code: string;
        };
        payment_intent_next_action_konbini_ministop: {
            confirmation_number?: string;
            payment_code: string;
        };
        payment_intent_next_action_konbini_seicomart: {
            confirmation_number?: string;
            payment_code: string;
        };
        payment_intent_next_action_konbini_stores: {
            familymart?: components["schemas"]["payment_intent_next_action_konbini_familymart"] | null;
            lawson?: components["schemas"]["payment_intent_next_action_konbini_lawson"] | null;
            ministop?: components["schemas"]["payment_intent_next_action_konbini_ministop"] | null;
            seicomart?: components["schemas"]["payment_intent_next_action_konbini_seicomart"] | null;
        };
        payment_intent_next_action_paynow_display_qr_code: {
            data: string;
            hosted_instructions_url?: string | null;
            image_url_png: string;
            image_url_svg: string;
        };
        payment_intent_next_action_pix_display_qr_code: {
            data?: string;
            expires_at?: number;
            hosted_instructions_url?: string;
            image_url_png?: string;
            image_url_svg?: string;
        };
        payment_intent_next_action_promptpay_display_qr_code: {
            data: string;
            hosted_instructions_url: string;
            image_url_png: string;
            image_url_svg: string;
        };
        payment_intent_next_action_redirect_to_url: {
            return_url?: string | null;
            url?: string | null;
        };
        payment_intent_next_action_verify_with_microdeposits: {
            arrival_date: number;
            hosted_verification_url: string;
            microdeposit_type?: "amounts" | "descriptor_code" | null;
        };
        payment_intent_next_action_wechat_pay_display_qr_code: {
            data: string;
            hosted_instructions_url: string;
            image_data_url: string;
            image_url_png: string;
            image_url_svg: string;
        };
        payment_intent_next_action_wechat_pay_redirect_to_android_app: {
            app_id: string;
            nonce_str: string;
            package: string;
            partner_id: string;
            prepay_id: string;
            sign: string;
            timestamp: string;
        };
        payment_intent_next_action_wechat_pay_redirect_to_ios_app: {
            native_url: string;
        };
        payment_intent_payment_method_options: {
            acss_debit?: components["schemas"]["payment_intent_payment_method_options_acss_debit"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            affirm?: components["schemas"]["payment_method_options_affirm"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            afterpay_clearpay?: components["schemas"]["payment_method_options_afterpay_clearpay"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            alipay?: components["schemas"]["payment_method_options_alipay"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            au_becs_debit?: components["schemas"]["payment_intent_payment_method_options_au_becs_debit"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            bacs_debit?: components["schemas"]["payment_method_options_bacs_debit"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            bancontact?: components["schemas"]["payment_method_options_bancontact"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            blik?: components["schemas"]["payment_intent_payment_method_options_blik"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            boleto?: components["schemas"]["payment_method_options_boleto"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            card?: components["schemas"]["payment_intent_payment_method_options_card"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            card_present?: components["schemas"]["payment_method_options_card_present"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            cashapp?: components["schemas"]["payment_method_options_cashapp"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            customer_balance?: components["schemas"]["payment_method_options_customer_balance"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            eps?: components["schemas"]["payment_intent_payment_method_options_eps"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            fpx?: components["schemas"]["payment_method_options_fpx"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            giropay?: components["schemas"]["payment_method_options_giropay"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            grabpay?: components["schemas"]["payment_method_options_grabpay"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            ideal?: components["schemas"]["payment_method_options_ideal"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            interac_present?: components["schemas"]["payment_method_options_interac_present"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            klarna?: components["schemas"]["payment_method_options_klarna"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            konbini?: components["schemas"]["payment_method_options_konbini"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            link?: components["schemas"]["payment_intent_payment_method_options_link"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            oxxo?: components["schemas"]["payment_method_options_oxxo"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            p24?: components["schemas"]["payment_method_options_p24"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            paynow?: components["schemas"]["payment_method_options_paynow"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            paypal?: components["schemas"]["payment_method_options_paypal"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            pix?: components["schemas"]["payment_method_options_pix"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            promptpay?: components["schemas"]["payment_method_options_promptpay"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            sepa_debit?: components["schemas"]["payment_intent_payment_method_options_sepa_debit"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            sofort?: components["schemas"]["payment_method_options_sofort"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            us_bank_account?: components["schemas"]["payment_intent_payment_method_options_us_bank_account"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            wechat_pay?: components["schemas"]["payment_method_options_wechat_pay"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
            zip?: components["schemas"]["payment_method_options_zip"] | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
        };
        payment_intent_payment_method_options_acss_debit: {
            mandate_options?: components["schemas"]["payment_intent_payment_method_options_mandate_options_acss_debit"];
            setup_future_usage?: "none" | "off_session" | "on_session";
            verification_method?: "automatic" | "instant" | "microdeposits";
        };
        payment_intent_payment_method_options_au_becs_debit: {
            setup_future_usage?: "none" | "off_session" | "on_session";
        };
        payment_intent_payment_method_options_blik: Record<string, never>;
        payment_intent_payment_method_options_card: {
            capture_method?: "manual";
            installments?: components["schemas"]["payment_method_options_card_installments"] | null;
            mandate_options?: components["schemas"]["payment_method_options_card_mandate_options"] | null;
            network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "interac" | "jcb" | "mastercard" | "unionpay" | "unknown" | "visa" | null;
            request_three_d_secure?: "any" | "automatic" | "challenge_only" | null;
            setup_future_usage?: "none" | "off_session" | "on_session";
            statement_descriptor_suffix_kana?: string;
            statement_descriptor_suffix_kanji?: string;
        };
        payment_intent_payment_method_options_eps: {
            setup_future_usage?: "none";
        };
        payment_intent_payment_method_options_link: {
            capture_method?: "manual";
            setup_future_usage?: "none" | "off_session";
        };
        payment_intent_payment_method_options_mandate_options_acss_debit: {
            custom_mandate_url?: string;
            interval_description?: string | null;
            payment_schedule?: "combined" | "interval" | "sporadic" | null;
            transaction_type?: "business" | "personal" | null;
        };
        payment_intent_payment_method_options_mandate_options_sepa_debit: Record<string, never>;
        payment_intent_payment_method_options_sepa_debit: {
            mandate_options?: components["schemas"]["payment_intent_payment_method_options_mandate_options_sepa_debit"];
            setup_future_usage?: "none" | "off_session" | "on_session";
        };
        payment_intent_payment_method_options_us_bank_account: {
            financial_connections?: components["schemas"]["linked_account_options_us_bank_account"];
            preferred_settlement_speed?: "fastest" | "standard";
            setup_future_usage?: "none" | "off_session" | "on_session";
            verification_method?: "automatic" | "instant" | "microdeposits";
        };
        payment_intent_processing: {
            card?: components["schemas"]["payment_intent_card_processing"];
            type: "card";
        };
        payment_intent_processing_customer_notification: {
            approval_requested?: boolean | null;
            completes_at?: number | null;
        };
        payment_intent_type_specific_payment_method_options_client: {
            capture_method?: "manual" | "manual_preferred";
            installments?: components["schemas"]["payment_flows_installment_options"];
            setup_future_usage?: "none" | "off_session" | "on_session";
            verification_method?: "automatic" | "instant" | "microdeposits";
        };
        payment_link: {
            active: boolean;
            after_completion: components["schemas"]["payment_links_resource_after_completion"];
            allow_promotion_codes: boolean;
            application_fee_amount?: number | null;
            application_fee_percent?: number | null;
            automatic_tax: components["schemas"]["payment_links_resource_automatic_tax"];
            billing_address_collection: "auto" | "required";
            consent_collection?: components["schemas"]["payment_links_resource_consent_collection"] | null;
            currency: string;
            custom_fields: components["schemas"]["payment_links_resource_custom_fields"][];
            custom_text: components["schemas"]["payment_links_resource_custom_text"];
            customer_creation: "always" | "if_required";
            id: string;
            invoice_creation?: components["schemas"]["payment_links_resource_invoice_creation"] | null;
            line_items?: {
                data: components["schemas"]["item"][];
                has_more: boolean;
                object: "list";
                url: string;
            };
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            object: "payment_link";
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            payment_intent_data?: components["schemas"]["payment_links_resource_payment_intent_data"] | null;
            payment_method_collection: "always" | "if_required";
            payment_method_types?: (("affirm" | "afterpay_clearpay" | "alipay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "card" | "cashapp" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "klarna" | "konbini" | "link" | "oxxo" | "p24" | "paynow" | "paypal" | "pix" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay")[]) | null;
            phone_number_collection: components["schemas"]["payment_links_resource_phone_number_collection"];
            shipping_address_collection?: components["schemas"]["payment_links_resource_shipping_address_collection"] | null;
            shipping_options: components["schemas"]["payment_links_resource_shipping_option"][];
            submit_type: "auto" | "book" | "donate" | "pay";
            subscription_data?: components["schemas"]["payment_links_resource_subscription_data"] | null;
            tax_id_collection: components["schemas"]["payment_links_resource_tax_id_collection"];
            transfer_data?: components["schemas"]["payment_links_resource_transfer_data"] | null;
            url: string;
        };
        payment_links_resource_after_completion: {
            hosted_confirmation?: components["schemas"]["payment_links_resource_completion_behavior_confirmation_page"];
            redirect?: components["schemas"]["payment_links_resource_completion_behavior_redirect"];
            type: "hosted_confirmation" | "redirect";
        };
        payment_links_resource_automatic_tax: {
            enabled: boolean;
        };
        payment_links_resource_completion_behavior_confirmation_page: {
            custom_message?: string | null;
        };
        payment_links_resource_completion_behavior_redirect: {
            url: string;
        };
        payment_links_resource_consent_collection: {
            promotions?: "auto" | "none" | null;
            terms_of_service?: "none" | "required" | null;
        };
        payment_links_resource_custom_fields: {
            dropdown?: components["schemas"]["payment_links_resource_custom_fields_dropdown"] | null;
            key: string;
            label: components["schemas"]["payment_links_resource_custom_fields_label"];
            numeric?: components["schemas"]["payment_links_resource_custom_fields_numeric"] | null;
            optional: boolean;
            text?: components["schemas"]["payment_links_resource_custom_fields_text"] | null;
            type: "dropdown" | "numeric" | "text";
        };
        payment_links_resource_custom_fields_dropdown: {
            options: components["schemas"]["payment_links_resource_custom_fields_dropdown_option"][];
        };
        payment_links_resource_custom_fields_dropdown_option: {
            label: string;
            value: string;
        };
        payment_links_resource_custom_fields_label: {
            custom?: string | null;
            type: "custom";
        };
        payment_links_resource_custom_fields_numeric: {
            maximum_length?: number | null;
            minimum_length?: number | null;
        };
        payment_links_resource_custom_fields_text: {
            maximum_length?: number | null;
            minimum_length?: number | null;
        };
        payment_links_resource_custom_text: {
            shipping_address?: components["schemas"]["payment_links_resource_custom_text_position"] | null;
            submit?: components["schemas"]["payment_links_resource_custom_text_position"] | null;
        };
        payment_links_resource_custom_text_position: {
            message: string;
        };
        payment_links_resource_invoice_creation: {
            enabled: boolean;
            invoice_data?: components["schemas"]["payment_links_resource_invoice_settings"] | null;
        };
        payment_links_resource_invoice_settings: {
            account_tax_ids?: ((string | components["schemas"]["tax_id"] | components["schemas"]["deleted_tax_id"])[]) | null;
            custom_fields?: components["schemas"]["invoice_setting_custom_field"][] | null;
            description?: string | null;
            footer?: string | null;
            metadata?: {
                [key: string]: string;
            } | null;
            rendering_options?: components["schemas"]["invoice_setting_rendering_options"] | null;
        };
        payment_links_resource_payment_intent_data: {
            capture_method?: "automatic" | "automatic_async" | "manual" | null;
            setup_future_usage?: "off_session" | "on_session" | null;
        };
        payment_links_resource_phone_number_collection: {
            enabled: boolean;
        };
        payment_links_resource_shipping_address_collection: {
            allowed_countries: ("AC" | "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AO" | "AQ" | "AR" | "AT" | "AU" | "AW" | "AX" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BQ" | "BR" | "BS" | "BT" | "BV" | "BW" | "BY" | "BZ" | "CA" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CV" | "CW" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GF" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GP" | "GQ" | "GR" | "GS" | "GT" | "GU" | "GW" | "GY" | "HK" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MK" | "ML" | "MM" | "MN" | "MO" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SZ" | "TA" | "TC" | "TD" | "TF" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "US" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VN" | "VU" | "WF" | "WS" | "XK" | "YE" | "YT" | "ZA" | "ZM" | "ZW" | "ZZ")[];
        };
        payment_links_resource_shipping_option: {
            shipping_amount: number;
            shipping_rate: string | components["schemas"]["shipping_rate"];
        };
        payment_links_resource_subscription_data: {
            description?: string | null;
            trial_period_days?: number | null;
        };
        payment_links_resource_tax_id_collection: {
            enabled: boolean;
        };
        payment_links_resource_transfer_data: {
            amount?: number | null;
            destination: string | components["schemas"]["account"];
        };
        payment_method: {
            acss_debit?: components["schemas"]["payment_method_acss_debit"];
            affirm?: components["schemas"]["payment_method_affirm"];
            afterpay_clearpay?: components["schemas"]["payment_method_afterpay_clearpay"];
            alipay?: components["schemas"]["payment_flows_private_payment_methods_alipay"];
            au_becs_debit?: components["schemas"]["payment_method_au_becs_debit"];
            bacs_debit?: components["schemas"]["payment_method_bacs_debit"];
            bancontact?: components["schemas"]["payment_method_bancontact"];
            billing_details: components["schemas"]["billing_details"];
            blik?: components["schemas"]["payment_method_blik"];
            boleto?: components["schemas"]["payment_method_boleto"];
            card?: components["schemas"]["payment_method_card"];
            card_present?: components["schemas"]["payment_method_card_present"];
            cashapp?: components["schemas"]["payment_method_cashapp"];
            created: number;
            customer?: (string | components["schemas"]["customer"]) | null;
            customer_balance?: components["schemas"]["payment_method_customer_balance"];
            eps?: components["schemas"]["payment_method_eps"];
            fpx?: components["schemas"]["payment_method_fpx"];
            giropay?: components["schemas"]["payment_method_giropay"];
            grabpay?: components["schemas"]["payment_method_grabpay"];
            id: string;
            ideal?: components["schemas"]["payment_method_ideal"];
            interac_present?: components["schemas"]["payment_method_interac_present"];
            klarna?: components["schemas"]["payment_method_klarna"];
            konbini?: components["schemas"]["payment_method_konbini"];
            link?: components["schemas"]["payment_method_link"];
            livemode: boolean;
            metadata?: {
                [key: string]: string;
            } | null;
            object: "payment_method";
            oxxo?: components["schemas"]["payment_method_oxxo"];
            p24?: components["schemas"]["payment_method_p24"];
            paynow?: components["schemas"]["payment_method_paynow"];
            paypal?: components["schemas"]["payment_method_paypal"];
            pix?: components["schemas"]["payment_method_pix"];
            promptpay?: components["schemas"]["payment_method_promptpay"];
            radar_options?: components["schemas"]["radar_radar_options"];
            sepa_debit?: components["schemas"]["payment_method_sepa_debit"];
            sofort?: components["schemas"]["payment_method_sofort"];
            type: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "card" | "card_present" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "interac_present" | "klarna" | "konbini" | "link" | "oxxo" | "p24" | "paynow" | "paypal" | "pix" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay" | "zip";
            us_bank_account?: components["schemas"]["payment_method_us_bank_account"];
            wechat_pay?: components["schemas"]["payment_method_wechat_pay"];
            zip?: components["schemas"]["payment_method_zip"];
        };
        payment_method_acss_debit: {
            bank_name?: string | null;
            fingerprint?: string | null;
            institution_number?: string | null;
            last4?: string | null;
            transit_number?: string | null;
        };
        payment_method_affirm: Record<string, never>;
        payment_method_afterpay_clearpay: Record<string, never>;
        payment_method_au_becs_debit: {
            bsb_number?: string | null;
            fingerprint?: string | null;
            last4?: string | null;
        };
        payment_method_bacs_debit: {
            fingerprint?: string | null;
            last4?: string | null;
            sort_code?: string | null;
        };
        payment_method_bancontact: Record<string, never>;
        payment_method_blik: Record<string, never>;
        payment_method_boleto: {
            tax_id: string;
        };
        payment_method_card: {
            brand: string;
            checks?: components["schemas"]["payment_method_card_checks"] | null;
            country?: string | null;
            exp_month: number;
            exp_year: number;
            fingerprint?: string | null;
            funding: string;
            generated_from?: components["schemas"]["payment_method_card_generated_card"] | null;
            last4: string;
            networks?: components["schemas"]["networks"] | null;
            three_d_secure_usage?: components["schemas"]["three_d_secure_usage"] | null;
            wallet?: components["schemas"]["payment_method_card_wallet"] | null;
        };
        payment_method_card_checks: {
            address_line1_check?: string | null;
            address_postal_code_check?: string | null;
            cvc_check?: string | null;
        };
        payment_method_card_generated_card: {
            charge?: string | null;
            payment_method_details?: components["schemas"]["card_generated_from_payment_method_details"] | null;
            setup_attempt?: (string | components["schemas"]["setup_attempt"]) | null;
        };
        payment_method_card_present: {
            brand?: string | null;
            cardholder_name?: string | null;
            country?: string | null;
            exp_month: number;
            exp_year: number;
            fingerprint?: string | null;
            funding?: string | null;
            last4?: string | null;
            networks?: components["schemas"]["payment_method_card_present_networks"] | null;
            read_method?: "contact_emv" | "contactless_emv" | "contactless_magstripe_mode" | "magnetic_stripe_fallback" | "magnetic_stripe_track2" | null;
        };
        payment_method_card_present_networks: {
            available: string[];
            preferred?: string | null;
        };
        payment_method_card_wallet: {
            amex_express_checkout?: components["schemas"]["payment_method_card_wallet_amex_express_checkout"];
            apple_pay?: components["schemas"]["payment_method_card_wallet_apple_pay"];
            dynamic_last4?: string | null;
            google_pay?: components["schemas"]["payment_method_card_wallet_google_pay"];
            link?: components["schemas"]["payment_method_card_wallet_link"];
            masterpass?: components["schemas"]["payment_method_card_wallet_masterpass"];
            samsung_pay?: components["schemas"]["payment_method_card_wallet_samsung_pay"];
            type: "amex_express_checkout" | "apple_pay" | "google_pay" | "link" | "masterpass" | "samsung_pay" | "visa_checkout";
            visa_checkout?: components["schemas"]["payment_method_card_wallet_visa_checkout"];
        };
        payment_method_card_wallet_amex_express_checkout: Record<string, never>;
        payment_method_card_wallet_apple_pay: Record<string, never>;
        payment_method_card_wallet_google_pay: Record<string, never>;
        payment_method_card_wallet_link: Record<string, never>;
        payment_method_card_wallet_masterpass: {
            billing_address?: components["schemas"]["address"] | null;
            email?: string | null;
            name?: string | null;
            shipping_address?: components["schemas"]["address"] | null;
        };
        payment_method_card_wallet_samsung_pay: Record<string, never>;
        payment_method_card_wallet_visa_checkout: {
            billing_address?: components["schemas"]["address"] | null;
            email?: string | null;
            name?: string | null;
            shipping_address?: components["schemas"]["address"] | null;
        };
        payment_method_cashapp: {
            buyer_id?: string | null;
            cashtag?: string | null;
        };
        payment_method_customer_balance: Record<string, never>;
        payment_method_details: {
            ach_credit_transfer?: components["schemas"]["payment_method_details_ach_credit_transfer"];
            ach_debit?: components["schemas"]["payment_method_details_ach_debit"];
            acss_debit?: components["schemas"]["payment_method_details_acss_debit"];
            affirm?: components["schemas"]["payment_method_details_affirm"];
            afterpay_clearpay?: components["schemas"]["payment_method_details_afterpay_clearpay"];
            alipay?: components["schemas"]["payment_flows_private_payment_methods_alipay_details"];
            au_becs_debit?: components["schemas"]["payment_method_details_au_becs_debit"];
            bacs_debit?: components["schemas"]["payment_method_details_bacs_debit"];
            bancontact?: components["schemas"]["payment_method_details_bancontact"];
            blik?: components["schemas"]["payment_method_details_blik"];
            boleto?: components["schemas"]["payment_method_details_boleto"];
            card?: components["schemas"]["payment_method_details_card"];
            card_present?: components["schemas"]["payment_method_details_card_present"];
            cashapp?: components["schemas"]["payment_method_details_cashapp"];
            customer_balance?: components["schemas"]["payment_method_details_customer_balance"];
            eps?: components["schemas"]["payment_method_details_eps"];
            fpx?: components["schemas"]["payment_method_details_fpx"];
            giropay?: components["schemas"]["payment_method_details_giropay"];
            grabpay?: components["schemas"]["payment_method_details_grabpay"];
            ideal?: components["schemas"]["payment_method_details_ideal"];
            interac_present?: components["schemas"]["payment_method_details_interac_present"];
            klarna?: components["schemas"]["payment_method_details_klarna"];
            konbini?: components["schemas"]["payment_method_details_konbini"];
            link?: components["schemas"]["payment_method_details_link"];
            multibanco?: components["schemas"]["payment_method_details_multibanco"];
            oxxo?: components["schemas"]["payment_method_details_oxxo"];
            p24?: components["schemas"]["payment_method_details_p24"];
            paynow?: components["schemas"]["payment_method_details_paynow"];
            paypal?: components["schemas"]["payment_method_details_paypal"];
            pix?: components["schemas"]["payment_method_details_pix"];
            promptpay?: components["schemas"]["payment_method_details_promptpay"];
            sepa_debit?: components["schemas"]["payment_method_details_sepa_debit"];
            sofort?: components["schemas"]["payment_method_details_sofort"];
            stripe_account?: components["schemas"]["payment_method_details_stripe_account"];
            type: string;
            us_bank_account?: components["schemas"]["payment_method_details_us_bank_account"];
            wechat?: components["schemas"]["payment_method_details_wechat"];
            wechat_pay?: components["schemas"]["payment_method_details_wechat_pay"];
            zip?: components["schemas"]["payment_method_details_zip"];
        };
        payment_method_details_ach_credit_transfer: {
            account_number?: string | null;
            bank_name?: string | null;
            routing_number?: string | null;
            swift_code?: string | null;
        };
        payment_method_details_ach_debit: {
            account_holder_type?: "company" | "individual" | null;
            bank_name?: string | null;
            country?: string | null;
            fingerprint?: string | null;
            last4?: string | null;
            routing_number?: string | null;
        };
        payment_method_details_acss_debit: {
            bank_name?: string | null;
            fingerprint?: string | null;
            institution_number?: string | null;
            last4?: string | null;
            mandate?: string;
            transit_number?: string | null;
        };
        payment_method_details_affirm: Record<string, never>;
        payment_method_details_afterpay_clearpay: {
            order_id?: string | null;
            reference?: string | null;
        };
        payment_method_details_au_becs_debit: {
            bsb_number?: string | null;
            fingerprint?: string | null;
            last4?: string | null;
            mandate?: string;
        };
        payment_method_details_bacs_debit: {
            fingerprint?: string | null;
            last4?: string | null;
            mandate?: string | null;
            sort_code?: string | null;
        };
        payment_method_details_bancontact: {
            bank_code?: string | null;
            bank_name?: string | null;
            bic?: string | null;
            generated_sepa_debit?: (string | components["schemas"]["payment_method"]) | null;
            generated_sepa_debit_mandate?: (string | components["schemas"]["mandate"]) | null;
            iban_last4?: string | null;
            preferred_language?: "de" | "en" | "fr" | "nl" | null;
            verified_name?: string | null;
        };
        payment_method_details_blik: Record<string, never>;
        payment_method_details_boleto: {
            tax_id: string;
        };
        payment_method_details_card: {
            brand?: string | null;
            checks?: components["schemas"]["payment_method_details_card_checks"] | null;
            country?: string | null;
            exp_month: number;
            exp_year: number;
            fingerprint?: string | null;
            funding?: string | null;
            installments?: components["schemas"]["payment_method_details_card_installments"] | null;
            last4?: string | null;
            mandate?: string | null;
            network?: string | null;
            network_token?: components["schemas"]["payment_method_details_card_network_token"] | null;
            three_d_secure?: components["schemas"]["three_d_secure_details_charge"] | null;
            wallet?: components["schemas"]["payment_method_details_card_wallet"] | null;
        };
        payment_method_details_card_checks: {
            address_line1_check?: string | null;
            address_postal_code_check?: string | null;
            cvc_check?: string | null;
        };
        payment_method_details_card_installments: {
            plan?: components["schemas"]["payment_method_details_card_installments_plan"] | null;
        };
        payment_method_details_card_installments_plan: {
            count?: number | null;
            interval?: "month" | null;
            type: "fixed_count";
        };
        payment_method_details_card_network_token: {
            used: boolean;
        };
        payment_method_details_card_present: {
            amount_authorized?: number | null;
            brand?: string | null;
            capture_before?: number;
            cardholder_name?: string | null;
            country?: string | null;
            emv_auth_data?: string | null;
            exp_month: number;
            exp_year: number;
            fingerprint?: string | null;
            funding?: string | null;
            generated_card?: string | null;
            incremental_authorization_supported: boolean;
            last4?: string | null;
            network?: string | null;
            overcapture_supported: boolean;
            read_method?: "contact_emv" | "contactless_emv" | "contactless_magstripe_mode" | "magnetic_stripe_fallback" | "magnetic_stripe_track2" | null;
            receipt?: components["schemas"]["payment_method_details_card_present_receipt"] | null;
        };
        payment_method_details_card_present_receipt: {
            account_type?: "checking" | "credit" | "prepaid" | "unknown";
            application_cryptogram?: string | null;
            application_preferred_name?: string | null;
            authorization_code?: string | null;
            authorization_response_code?: string | null;
            cardholder_verification_method?: string | null;
            dedicated_file_name?: string | null;
            terminal_verification_results?: string | null;
            transaction_status_information?: string | null;
        };
        payment_method_details_card_wallet: {
            amex_express_checkout?: components["schemas"]["payment_method_details_card_wallet_amex_express_checkout"];
            apple_pay?: components["schemas"]["payment_method_details_card_wallet_apple_pay"];
            dynamic_last4?: string | null;
            google_pay?: components["schemas"]["payment_method_details_card_wallet_google_pay"];
            link?: components["schemas"]["payment_method_details_card_wallet_link"];
            masterpass?: components["schemas"]["payment_method_details_card_wallet_masterpass"];
            samsung_pay?: components["schemas"]["payment_method_details_card_wallet_samsung_pay"];
            type: "amex_express_checkout" | "apple_pay" | "google_pay" | "link" | "masterpass" | "samsung_pay" | "visa_checkout";
            visa_checkout?: components["schemas"]["payment_method_details_card_wallet_visa_checkout"];
        };
        payment_method_details_card_wallet_amex_express_checkout: Record<string, never>;
        payment_method_details_card_wallet_apple_pay: Record<string, never>;
        payment_method_details_card_wallet_google_pay: Record<string, never>;
        payment_method_details_card_wallet_link: Record<string, never>;
        payment_method_details_card_wallet_masterpass: {
            billing_address?: components["schemas"]["address"] | null;
            email?: string | null;
            name?: string | null;
            shipping_address?: components["schemas"]["address"] | null;
        };
        payment_method_details_card_wallet_samsung_pay: Record<string, never>;
        payment_method_details_card_wallet_visa_checkout: {
            billing_address?: components["schemas"]["address"] | null;
            email?: string | null;
            name?: string | null;
            shipping_address?: components["schemas"]["address"] | null;
        };
        payment_method_details_cashapp: {
            buyer_id?: string | null;
            cashtag?: string | null;
        };
        payment_method_details_customer_balance: Record<string, never>;
        payment_method_details_eps: {
            bank?: "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau" | null;
            verified_name?: string | null;
        };
        payment_method_details_fpx: {
            bank: "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
            transaction_id?: string | null;
        };
        payment_method_details_giropay: {
            bank_code?: string | null;
            bank_name?: string | null;
            bic?: string | null;
            verified_name?: string | null;
        };
        payment_method_details_grabpay: {
            transaction_id?: string | null;
        };
        payment_method_details_ideal: {
            bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe" | null;
            bic?: "ABNANL2A" | "ASNBNL21" | "BITSNL2A" | "BUNQNL2A" | "FVLBNL22" | "HANDNL2A" | "INGBNL2A" | "KNABNL2H" | "MOYONL21" | "RABONL2U" | "RBRBNL21" | "REVOIE23" | "REVOLT21" | "SNSBNL2A" | "TRIONL2U" | null;
            generated_sepa_debit?: (string | components["schemas"]["payment_method"]) | null;
            generated_sepa_debit_mandate?: (string | components["schemas"]["mandate"]) | null;
            iban_last4?: string | null;
            verified_name?: string | null;
        };
        payment_method_details_interac_present: {
            brand?: string | null;
            cardholder_name?: string | null;
            country?: string | null;
            emv_auth_data?: string | null;
            exp_month: number;
            exp_year: number;
            fingerprint?: string | null;
            funding?: string | null;
            generated_card?: string | null;
            last4?: string | null;
            network?: string | null;
            preferred_locales?: string[] | null;
            read_method?: "contact_emv" | "contactless_emv" | "contactless_magstripe_mode" | "magnetic_stripe_fallback" | "magnetic_stripe_track2" | null;
            receipt?: components["schemas"]["payment_method_details_interac_present_receipt"] | null;
        };
        payment_method_details_interac_present_receipt: {
            account_type?: "checking" | "savings" | "unknown";
            application_cryptogram?: string | null;
            application_preferred_name?: string | null;
            authorization_code?: string | null;
            authorization_response_code?: string | null;
            cardholder_verification_method?: string | null;
            dedicated_file_name?: string | null;
            terminal_verification_results?: string | null;
            transaction_status_information?: string | null;
        };
        payment_method_details_klarna: {
            payment_method_category?: string | null;
            preferred_locale?: string | null;
        };
        payment_method_details_konbini: {
            store?: components["schemas"]["payment_method_details_konbini_store"] | null;
        };
        payment_method_details_konbini_store: {
            chain?: "familymart" | "lawson" | "ministop" | "seicomart" | null;
        };
        payment_method_details_link: {
            country?: string | null;
        };
        payment_method_details_multibanco: {
            entity?: string | null;
            reference?: string | null;
        };
        payment_method_details_oxxo: {
            number?: string | null;
        };
        payment_method_details_p24: {
            bank?: "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "volkswagen_bank" | null;
            reference?: string | null;
            verified_name?: string | null;
        };
        payment_method_details_paynow: {
            reference?: string | null;
        };
        payment_method_details_paypal: {
            payer_email?: string | null;
            payer_id?: string | null;
            payer_name?: string | null;
            seller_protection?: components["schemas"]["paypal_seller_protection"] | null;
            transaction_id?: string | null;
        };
        payment_method_details_pix: {
            bank_transaction_id?: string | null;
        };
        payment_method_details_promptpay: {
            reference?: string | null;
        };
        payment_method_details_sepa_debit: {
            bank_code?: string | null;
            branch_code?: string | null;
            country?: string | null;
            fingerprint?: string | null;
            last4?: string | null;
            mandate?: string | null;
        };
        payment_method_details_sofort: {
            bank_code?: string | null;
            bank_name?: string | null;
            bic?: string | null;
            country?: string | null;
            generated_sepa_debit?: (string | components["schemas"]["payment_method"]) | null;
            generated_sepa_debit_mandate?: (string | components["schemas"]["mandate"]) | null;
            iban_last4?: string | null;
            preferred_language?: "de" | "en" | "es" | "fr" | "it" | "nl" | "pl" | null;
            verified_name?: string | null;
        };
        payment_method_details_stripe_account: Record<string, never>;
        payment_method_details_us_bank_account: {
            account_holder_type?: "company" | "individual" | null;
            account_type?: "checking" | "savings" | null;
            bank_name?: string | null;
            fingerprint?: string | null;
            last4?: string | null;
            routing_number?: string | null;
        };
        payment_method_details_wechat: Record<string, never>;
        payment_method_details_wechat_pay: {
            fingerprint?: string | null;
            transaction_id?: string | null;
        };
        payment_method_details_zip: Record<string, never>;
        payment_method_eps: {
            bank?: "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau" | null;
        };
        payment_method_fpx: {
            bank: "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
        };
        payment_method_giropay: Record<string, never>;
        payment_method_grabpay: Record<string, never>;
        payment_method_ideal: {
            bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe" | null;
            bic?: "ABNANL2A" | "ASNBNL21" | "BITSNL2A" | "BUNQNL2A" | "FVLBNL22" | "HANDNL2A" | "INGBNL2A" | "KNABNL2H" | "MOYONL21" | "RABONL2U" | "RBRBNL21" | "REVOIE23" | "REVOLT21" | "SNSBNL2A" | "TRIONL2U" | null;
        };
        payment_method_interac_present: {
            brand?: string | null;
            cardholder_name?: string | null;
            country?: string | null;
            exp_month: number;
            exp_year: number;
            fingerprint?: string | null;
            funding?: string | null;
            last4?: string | null;
            networks?: components["schemas"]["payment_method_card_present_networks"] | null;
            preferred_locales?: string[] | null;
            read_method?: "contact_emv" | "contactless_emv" | "contactless_magstripe_mode" | "magnetic_stripe_fallback" | "magnetic_stripe_track2" | null;
        };
        payment_method_klarna: {
            dob?: components["schemas"]["payment_flows_private_payment_methods_klarna_dob"] | null;
        };
        payment_method_konbini: Record<string, never>;
        payment_method_link: {
            email?: string | null;
        };
        payment_method_options_affirm: {
            capture_method?: "manual";
            preferred_locale?: string;
            setup_future_usage?: "none";
        };
        payment_method_options_afterpay_clearpay: {
            capture_method?: "manual";
            reference?: string | null;
            setup_future_usage?: "none";
        };
        payment_method_options_alipay: {
            setup_future_usage?: "none" | "off_session";
        };
        payment_method_options_bacs_debit: {
            setup_future_usage?: "none" | "off_session" | "on_session";
        };
        payment_method_options_bancontact: {
            preferred_language: "de" | "en" | "fr" | "nl";
            setup_future_usage?: "none" | "off_session";
        };
        payment_method_options_boleto: {
            expires_after_days: number;
            setup_future_usage?: "none" | "off_session" | "on_session";
        };
        payment_method_options_card_installments: {
            available_plans?: components["schemas"]["payment_method_details_card_installments_plan"][] | null;
            enabled: boolean;
            plan?: components["schemas"]["payment_method_details_card_installments_plan"] | null;
        };
        payment_method_options_card_mandate_options: {
            amount: number;
            amount_type: "fixed" | "maximum";
            description?: string | null;
            end_date?: number | null;
            interval: "day" | "month" | "sporadic" | "week" | "year";
            interval_count?: number | null;
            reference: string;
            start_date: number;
            supported_types?: "india"[] | null;
        };
        payment_method_options_card_present: {
            request_extended_authorization?: boolean | null;
            request_incremental_authorization_support?: boolean | null;
        };
        payment_method_options_cashapp: {
            capture_method?: "manual";
            setup_future_usage?: "none" | "off_session" | "on_session";
        };
        payment_method_options_customer_balance: {
            bank_transfer?: components["schemas"]["payment_method_options_customer_balance_bank_transfer"];
            funding_type?: "bank_transfer" | null;
            setup_future_usage?: "none";
        };
        payment_method_options_customer_balance_bank_transfer: {
            eu_bank_transfer?: components["schemas"]["payment_method_options_customer_balance_eu_bank_account"];
            requested_address_types?: ("aba" | "iban" | "sepa" | "sort_code" | "spei" | "swift" | "zengin")[];
            type?: "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer" | null;
        };
        payment_method_options_customer_balance_eu_bank_account: {
            country: "BE" | "DE" | "ES" | "FR" | "IE" | "NL";
        };
        payment_method_options_fpx: {
            setup_future_usage?: "none";
        };
        payment_method_options_giropay: {
            setup_future_usage?: "none";
        };
        payment_method_options_grabpay: {
            setup_future_usage?: "none";
        };
        payment_method_options_ideal: {
            setup_future_usage?: "none" | "off_session";
        };
        payment_method_options_interac_present: Record<string, never>;
        payment_method_options_klarna: {
            capture_method?: "manual";
            preferred_locale?: string | null;
            setup_future_usage?: "none";
        };
        payment_method_options_konbini: {
            confirmation_number?: string | null;
            expires_after_days?: number | null;
            expires_at?: number | null;
            product_description?: string | null;
            setup_future_usage?: "none";
        };
        payment_method_options_oxxo: {
            expires_after_days: number;
            setup_future_usage?: "none";
        };
        payment_method_options_p24: {
            setup_future_usage?: "none";
        };
        payment_method_options_paynow: {
            setup_future_usage?: "none";
        };
        payment_method_options_paypal: {
            capture_method?: "manual";
            preferred_locale?: string | null;
            reference?: string | null;
            setup_future_usage?: "none" | "off_session";
        };
        payment_method_options_pix: {
            expires_after_seconds?: number | null;
            expires_at?: number | null;
            setup_future_usage?: "none";
        };
        payment_method_options_promptpay: {
            setup_future_usage?: "none";
        };
        payment_method_options_sofort: {
            preferred_language?: "de" | "en" | "es" | "fr" | "it" | "nl" | "pl" | null;
            setup_future_usage?: "none" | "off_session";
        };
        payment_method_options_wechat_pay: {
            app_id?: string | null;
            client?: "android" | "ios" | "web" | null;
            setup_future_usage?: "none";
        };
        payment_method_options_zip: {
            setup_future_usage?: "none";
        };
        payment_method_oxxo: Record<string, never>;
        payment_method_p24: {
            bank?: "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "volkswagen_bank" | null;
        };
        payment_method_paynow: Record<string, never>;
        payment_method_paypal: {
            payer_email?: string | null;
            payer_id?: string | null;
        };
        payment_method_pix: Record<string, never>;
        payment_method_promptpay: Record<string, never>;
        payment_method_sepa_debit: {
            bank_code?: string | null;
            branch_code?: string | null;
            country?: string | null;
            fingerprint?: string | null;
            generated_from?: components["schemas"]["sepa_debit_generated_from"] | null;
            last4?: string | null;
        };
        payment_method_sofort: {
            country?: string | null;
        };
        payment_method_us_bank_account: {
            account_holder_type?: "company" | "individual" | null;
            account_type?: "checking" | "savings" | null;
            bank_name?: string | null;
            financial_connections_account?: string | null;
            fingerprint?: string | null;
            last4?: string | null;
            networks?: components["schemas"]["us_bank_account_networks"] | null;
            routing_number?: string | null;
            status_details?: components["schemas"]["payment_method_us_bank_account_status_details"] | null;
        };
        payment_method_us_bank_account_blocked: {
            network_code?: "R02" | "R03" | "R04" | "R05" | "R07" | "R08" | "R10" | "R11" | "R16" | "R20" | "R29" | "R31" | null;
            reason?: "bank_account_closed" | "bank_account_frozen" | "bank_account_invalid_details" | "bank_account_restricted" | "bank_account_unusable" | "debit_not_authorized" | null;
        };
        payment_method_us_bank_account_status_details: {
            blocked?: components["schemas"]["payment_method_us_bank_account_blocked"];
        };
        payment_method_wechat_pay: Record<string, never>;
        payment_method_zip: Record<string, never>;
        payment_pages_checkout_session_after_expiration: {
            recovery?: components["schemas"]["payment_pages_checkout_session_after_expiration_recovery"] | null;
        };
        payment_pages_checkout_session_after_expiration_recovery: {
            allow_promotion_codes: boolean;
            enabled: boolean;
            expires_at?: number | null;
            url?: string | null;
        };
        payment_pages_checkout_session_automatic_tax: {
            enabled: boolean;
            status?: "complete" | "failed" | "requires_location_inputs" | null;
        };
        payment_pages_checkout_session_consent: {
            promotions?: "opt_in" | "opt_out" | null;
            terms_of_service?: "accepted" | null;
        };
        payment_pages_checkout_session_consent_collection: {
            promotions?: "auto" | "none" | null;
            terms_of_service?: "none" | "required" | null;
        };
        payment_pages_checkout_session_currency_conversion: {
            amount_subtotal: number;
            amount_total: number;
            fx_rate: string;
            source_currency: string;
        };
        payment_pages_checkout_session_custom_fields: {
            dropdown?: components["schemas"]["payment_pages_checkout_session_custom_fields_dropdown"] | null;
            key: string;
            label: components["schemas"]["payment_pages_checkout_session_custom_fields_label"];
            numeric?: components["schemas"]["payment_pages_checkout_session_custom_fields_numeric"] | null;
            optional: boolean;
            text?: components["schemas"]["payment_pages_checkout_session_custom_fields_text"] | null;
            type: "dropdown" | "numeric" | "text";
        };
        payment_pages_checkout_session_custom_fields_dropdown: {
            options: components["schemas"]["payment_pages_checkout_session_custom_fields_option"][];
            value?: string | null;
        };
        payment_pages_checkout_session_custom_fields_label: {
            custom?: string | null;
            type: "custom";
        };
        payment_pages_checkout_session_custom_fields_numeric: {
            maximum_length?: number | null;
            minimum_length?: number | null;
            value?: string | null;
        };
        payment_pages_checkout_session_custom_fields_option: {
            label: string;
            value: string;
        };
        payment_pages_checkout_session_custom_fields_text: {
            maximum_length?: number | null;
            minimum_length?: number | null;
            value?: string | null;
        };
        payment_pages_checkout_session_custom_text: {
            shipping_address?: components["schemas"]["payment_pages_checkout_session_custom_text_position"] | null;
            submit?: components["schemas"]["payment_pages_checkout_session_custom_text_position"] | null;
        };
        payment_pages_checkout_session_custom_text_position: {
            message: string;
        };
        payment_pages_checkout_session_customer_details: {
            address?: components["schemas"]["address"] | null;
            email?: string | null;
            name?: string | null;
            phone?: string | null;
            tax_exempt?: "exempt" | "none" | "reverse" | null;
            tax_ids?: components["schemas"]["payment_pages_checkout_session_tax_id"][] | null;
        };
        payment_pages_checkout_session_invoice_creation: {
            enabled: boolean;
            invoice_data: components["schemas"]["payment_pages_checkout_session_invoice_settings"];
        };
        payment_pages_checkout_session_invoice_settings: {
            account_tax_ids?: ((string | components["schemas"]["tax_id"] | components["schemas"]["deleted_tax_id"])[]) | null;
            custom_fields?: components["schemas"]["invoice_setting_custom_field"][] | null;
            description?: string | null;
            footer?: string | null;
            metadata?: {
                [key: string]: string;
            } | null;
            rendering_options?: components["schemas"]["invoice_setting_rendering_options"] | null;
        };
        payment_pages_checkout_session_phone_number_collection: {
            enabled: boolean;
        };
        payment_pages_checkout_session_shipping_address_collection: {
            allowed_countries: ("AC" | "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AO" | "AQ" | "AR" | "AT" | "AU" | "AW" | "AX" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BQ" | "BR" | "BS" | "BT" | "BV" | "BW" | "BY" | "BZ" | "CA" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CV" | "CW" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GF" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GP" | "GQ" | "GR" | "GS" | "GT" | "GU" | "GW" | "GY" | "HK" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MK" | "ML" | "MM" | "MN" | "MO" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SZ" | "TA" | "TC" | "TD" | "TF" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "US" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VN" | "VU" | "WF" | "WS" | "XK" | "YE" | "YT" | "ZA" | "ZM" | "ZW" | "ZZ")[];
        };
        payment_pages_checkout_session_shipping_cost: {
            amount_subtotal: number;
            amount_tax: number;
            amount_total: number;
            shipping_rate?: (string | components["schemas"]["shipping_rate"]) | null;
            taxes?: components["schemas"]["line_items_tax_amount"][];
        };
        payment_pages_checkout_session_shipping_option: {
            shipping_amount: number;
            shipping_rate: string | components["schemas"]["shipping_rate"];
        };
        payment_pages_checkout_session_tax_id: {
            type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bo_tin" | "br_cnpj" | "br_cpf" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "li_uid" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "no_vat" | "nz_gst" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "ua_vat" | "unknown" | "us_ein" | "uy_ruc" | "ve_rif" | "vn_tin" | "za_vat";
            value?: string | null;
        };
        payment_pages_checkout_session_tax_id_collection: {
            enabled: boolean;
        };
        payment_pages_checkout_session_total_details: {
            amount_discount: number;
            amount_shipping?: number | null;
            amount_tax: number;
            breakdown?: components["schemas"]["payment_pages_checkout_session_total_details_resource_breakdown"];
        };
        payment_pages_checkout_session_total_details_resource_breakdown: {
            discounts: components["schemas"]["line_items_discount_amount"][];
            taxes: components["schemas"]["line_items_tax_amount"][];
        };
        payment_source: components["schemas"]["account"] | components["schemas"]["bank_account"] | components["schemas"]["card"] | components["schemas"]["source"];
        payout: {
            amount: number;
            arrival_date: number;
            automatic: boolean;
            balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            created: number;
            currency: string;
            description?: string | null;
            destination?: (string | components["schemas"]["bank_account"] | components["schemas"]["card"] | components["schemas"]["deleted_bank_account"] | components["schemas"]["deleted_card"]) | null;
            failure_balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            failure_code?: string | null;
            failure_message?: string | null;
            id: string;
            livemode: boolean;
            metadata?: {
                [key: string]: string;
            } | null;
            method: string;
            object: "payout";
            original_payout?: (string | components["schemas"]["payout"]) | null;
            reconciliation_status: "completed" | "in_progress" | "not_applicable";
            reversed_by?: (string | components["schemas"]["payout"]) | null;
            source_type: string;
            statement_descriptor?: string | null;
            status: string;
            type: "bank_account" | "card";
        };
        paypal_seller_protection: {
            dispute_categories?: (("fraudulent" | "product_not_received")[]) | null;
            status: "eligible" | "not_eligible" | "partially_eligible";
        };
        period: {
            end?: number | null;
            start?: number | null;
        };
        person: {
            account: string;
            address?: components["schemas"]["address"];
            address_kana?: components["schemas"]["legal_entity_japan_address"] | null;
            address_kanji?: components["schemas"]["legal_entity_japan_address"] | null;
            created: number;
            dob?: components["schemas"]["legal_entity_dob"];
            email?: string | null;
            first_name?: string | null;
            first_name_kana?: string | null;
            first_name_kanji?: string | null;
            full_name_aliases?: string[];
            future_requirements?: components["schemas"]["person_future_requirements"] | null;
            gender?: string | null;
            id: string;
            id_number_provided?: boolean;
            id_number_secondary_provided?: boolean;
            last_name?: string | null;
            last_name_kana?: string | null;
            last_name_kanji?: string | null;
            maiden_name?: string | null;
            metadata?: {
                [key: string]: string;
            };
            nationality?: string | null;
            object: "person";
            phone?: string | null;
            political_exposure?: "existing" | "none";
            registered_address?: components["schemas"]["address"];
            relationship?: components["schemas"]["person_relationship"];
            requirements?: components["schemas"]["person_requirements"] | null;
            ssn_last_4_provided?: boolean;
            verification?: components["schemas"]["legal_entity_person_verification"];
        };
        person_future_requirements: {
            alternatives?: components["schemas"]["account_requirements_alternative"][] | null;
            currently_due: string[];
            errors: components["schemas"]["account_requirements_error"][];
            eventually_due: string[];
            past_due: string[];
            pending_verification: string[];
        };
        person_relationship: {
            director?: boolean | null;
            executive?: boolean | null;
            owner?: boolean | null;
            percent_ownership?: number | null;
            representative?: boolean | null;
            title?: string | null;
        };
        person_requirements: {
            alternatives?: components["schemas"]["account_requirements_alternative"][] | null;
            currently_due: string[];
            errors: components["schemas"]["account_requirements_error"][];
            eventually_due: string[];
            past_due: string[];
            pending_verification: string[];
        };
        plan: {
            active: boolean;
            aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum" | null;
            amount?: number | null;
            amount_decimal?: string | null;
            billing_scheme: "per_unit" | "tiered";
            created: number;
            currency: string;
            id: string;
            interval: "day" | "month" | "week" | "year";
            interval_count: number;
            livemode: boolean;
            metadata?: {
                [key: string]: string;
            } | null;
            nickname?: string | null;
            object: "plan";
            product?: (string | components["schemas"]["product"] | components["schemas"]["deleted_product"]) | null;
            tiers?: components["schemas"]["plan_tier"][];
            tiers_mode?: "graduated" | "volume" | null;
            transform_usage?: components["schemas"]["transform_usage"] | null;
            trial_period_days?: number | null;
            usage_type: "licensed" | "metered";
        };
        plan_tier: {
            flat_amount?: number | null;
            flat_amount_decimal?: string | null;
            unit_amount?: number | null;
            unit_amount_decimal?: string | null;
            up_to?: number | null;
        };
        platform_tax_fee: {
            account: string;
            id: string;
            object: "platform_tax_fee";
            source_transaction: string;
            type: string;
        };
        portal_business_profile: {
            headline?: string | null;
            privacy_policy_url?: string | null;
            terms_of_service_url?: string | null;
        };
        portal_customer_update: {
            allowed_updates: ("address" | "email" | "name" | "phone" | "shipping" | "tax_id")[];
            enabled: boolean;
        };
        portal_features: {
            customer_update: components["schemas"]["portal_customer_update"];
            invoice_history: components["schemas"]["portal_invoice_list"];
            payment_method_update: components["schemas"]["portal_payment_method_update"];
            subscription_cancel: components["schemas"]["portal_subscription_cancel"];
            subscription_pause: components["schemas"]["portal_subscription_pause"];
            subscription_update: components["schemas"]["portal_subscription_update"];
        };
        portal_flows_after_completion_hosted_confirmation: {
            custom_message?: string | null;
        };
        portal_flows_after_completion_redirect: {
            return_url: string;
        };
        portal_flows_flow: {
            after_completion: components["schemas"]["portal_flows_flow_after_completion"];
            subscription_cancel?: components["schemas"]["portal_flows_flow_subscription_cancel"] | null;
            subscription_update?: components["schemas"]["portal_flows_flow_subscription_update"] | null;
            subscription_update_confirm?: components["schemas"]["portal_flows_flow_subscription_update_confirm"] | null;
            type: "payment_method_update" | "subscription_cancel" | "subscription_update" | "subscription_update_confirm";
        };
        portal_flows_flow_after_completion: {
            hosted_confirmation?: components["schemas"]["portal_flows_after_completion_hosted_confirmation"] | null;
            redirect?: components["schemas"]["portal_flows_after_completion_redirect"] | null;
            type: "hosted_confirmation" | "portal_homepage" | "redirect";
        };
        portal_flows_flow_subscription_cancel: {
            subscription: string;
        };
        portal_flows_flow_subscription_update: {
            subscription: string;
        };
        portal_flows_flow_subscription_update_confirm: {
            discounts?: components["schemas"]["portal_flows_subscription_update_confirm_discount"][] | null;
            items: components["schemas"]["portal_flows_subscription_update_confirm_item"][];
            subscription: string;
        };
        portal_flows_subscription_update_confirm_discount: {
            coupon?: string | null;
            promotion_code?: string | null;
        };
        portal_flows_subscription_update_confirm_item: {
            id?: string | null;
            price?: string | null;
            quantity?: number;
        };
        portal_invoice_list: {
            enabled: boolean;
        };
        portal_login_page: {
            enabled: boolean;
            url?: string | null;
        };
        portal_payment_method_update: {
            enabled: boolean;
        };
        portal_subscription_cancel: {
            cancellation_reason: components["schemas"]["portal_subscription_cancellation_reason"];
            enabled: boolean;
            mode: "at_period_end" | "immediately";
            proration_behavior: "always_invoice" | "create_prorations" | "none";
        };
        portal_subscription_cancellation_reason: {
            enabled: boolean;
            options: ("customer_service" | "low_quality" | "missing_features" | "other" | "switched_service" | "too_complex" | "too_expensive" | "unused")[];
        };
        portal_subscription_pause: {
            enabled: boolean;
        };
        portal_subscription_update: {
            default_allowed_updates: ("price" | "promotion_code" | "quantity")[];
            enabled: boolean;
            products?: components["schemas"]["portal_subscription_update_product"][] | null;
            proration_behavior: "always_invoice" | "create_prorations" | "none";
        };
        portal_subscription_update_product: {
            prices: string[];
            product: string;
        };
        price: {
            active: boolean;
            billing_scheme: "per_unit" | "tiered";
            created: number;
            currency: string;
            currency_options?: {
                [key: string]: components["schemas"]["currency_option"];
            };
            custom_unit_amount?: components["schemas"]["custom_unit_amount"] | null;
            id: string;
            livemode: boolean;
            lookup_key?: string | null;
            metadata: {
                [key: string]: string;
            };
            nickname?: string | null;
            object: "price";
            product: string | components["schemas"]["product"] | components["schemas"]["deleted_product"];
            recurring?: components["schemas"]["recurring"] | null;
            tax_behavior?: "exclusive" | "inclusive" | "unspecified" | null;
            tiers?: components["schemas"]["price_tier"][];
            tiers_mode?: "graduated" | "volume" | null;
            transform_quantity?: components["schemas"]["transform_quantity"] | null;
            type: "one_time" | "recurring";
            unit_amount?: number | null;
            unit_amount_decimal?: string | null;
        };
        price_tier: {
            flat_amount?: number | null;
            flat_amount_decimal?: string | null;
            unit_amount?: number | null;
            unit_amount_decimal?: string | null;
            up_to?: number | null;
        };
        product: {
            active: boolean;
            created: number;
            default_price?: (string | components["schemas"]["price"]) | null;
            description?: string | null;
            id: string;
            images: string[];
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            name: string;
            object: "product";
            package_dimensions?: components["schemas"]["package_dimensions"] | null;
            shippable?: boolean | null;
            statement_descriptor?: string | null;
            tax_code?: (string | components["schemas"]["tax_code"]) | null;
            unit_label?: string | null;
            updated: number;
            url?: string | null;
        };
        promotion_code: {
            active: boolean;
            code: string;
            coupon: components["schemas"]["coupon"];
            created: number;
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            expires_at?: number | null;
            id: string;
            livemode: boolean;
            max_redemptions?: number | null;
            metadata?: {
                [key: string]: string;
            } | null;
            object: "promotion_code";
            restrictions: components["schemas"]["promotion_codes_resource_restrictions"];
            times_redeemed: number;
        };
        promotion_code_currency_option: {
            minimum_amount: number;
        };
        promotion_codes_resource_restrictions: {
            currency_options?: {
                [key: string]: components["schemas"]["promotion_code_currency_option"];
            };
            first_time_transaction: boolean;
            minimum_amount?: number | null;
            minimum_amount_currency?: string | null;
        };
        quote: {
            amount_subtotal: number;
            amount_total: number;
            application?: (string | components["schemas"]["application"] | components["schemas"]["deleted_application"]) | null;
            application_fee_amount?: number | null;
            application_fee_percent?: number | null;
            automatic_tax: components["schemas"]["quotes_resource_automatic_tax"];
            collection_method: "charge_automatically" | "send_invoice";
            computed: components["schemas"]["quotes_resource_computed"];
            created: number;
            currency?: string | null;
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            default_tax_rates?: (string | components["schemas"]["tax_rate"])[];
            description?: string | null;
            discounts: (string | components["schemas"]["discount"])[];
            expires_at: number;
            footer?: string | null;
            from_quote?: components["schemas"]["quotes_resource_from_quote"] | null;
            header?: string | null;
            id: string;
            invoice?: (string | components["schemas"]["invoice"] | components["schemas"]["deleted_invoice"]) | null;
            invoice_settings?: components["schemas"]["invoice_setting_quote_setting"] | null;
            line_items?: {
                data: components["schemas"]["item"][];
                has_more: boolean;
                object: "list";
                url: string;
            };
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            number?: string | null;
            object: "quote";
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            status: "accepted" | "canceled" | "draft" | "open";
            status_transitions: components["schemas"]["quotes_resource_status_transitions"];
            subscription?: (string | components["schemas"]["subscription"]) | null;
            subscription_data: components["schemas"]["quotes_resource_subscription_data_subscription_data"];
            subscription_schedule?: (string | components["schemas"]["subscription_schedule"]) | null;
            test_clock?: (string | components["schemas"]["test_helpers.test_clock"]) | null;
            total_details: components["schemas"]["quotes_resource_total_details"];
            transfer_data?: components["schemas"]["quotes_resource_transfer_data"] | null;
        };
        quotes_resource_automatic_tax: {
            enabled: boolean;
            status?: "complete" | "failed" | "requires_location_inputs" | null;
        };
        quotes_resource_computed: {
            recurring?: components["schemas"]["quotes_resource_recurring"] | null;
            upfront: components["schemas"]["quotes_resource_upfront"];
        };
        quotes_resource_from_quote: {
            is_revision: boolean;
            quote: string | components["schemas"]["quote"];
        };
        quotes_resource_recurring: {
            amount_subtotal: number;
            amount_total: number;
            interval: "day" | "month" | "week" | "year";
            interval_count: number;
            total_details: components["schemas"]["quotes_resource_total_details"];
        };
        quotes_resource_status_transitions: {
            accepted_at?: number | null;
            canceled_at?: number | null;
            finalized_at?: number | null;
        };
        quotes_resource_subscription_data_subscription_data: {
            description?: string | null;
            effective_date?: number | null;
            trial_period_days?: number | null;
        };
        quotes_resource_total_details: {
            amount_discount: number;
            amount_shipping?: number | null;
            amount_tax: number;
            breakdown?: components["schemas"]["quotes_resource_total_details_resource_breakdown"];
        };
        quotes_resource_total_details_resource_breakdown: {
            discounts: components["schemas"]["line_items_discount_amount"][];
            taxes: components["schemas"]["line_items_tax_amount"][];
        };
        quotes_resource_transfer_data: {
            amount?: number | null;
            amount_percent?: number | null;
            destination: string | components["schemas"]["account"];
        };
        quotes_resource_upfront: {
            amount_subtotal: number;
            amount_total: number;
            line_items?: {
                data: components["schemas"]["item"][];
                has_more: boolean;
                object: "list";
                url: string;
            };
            total_details: components["schemas"]["quotes_resource_total_details"];
        };
        "radar.early_fraud_warning": {
            actionable: boolean;
            charge: string | components["schemas"]["charge"];
            created: number;
            fraud_type: string;
            id: string;
            livemode: boolean;
            object: "radar.early_fraud_warning";
            payment_intent?: string | components["schemas"]["payment_intent"];
        };
        "radar.value_list": {
            alias: string;
            created: number;
            created_by: string;
            id: string;
            item_type: "card_bin" | "card_fingerprint" | "case_sensitive_string" | "country" | "customer_id" | "email" | "ip_address" | "sepa_debit_fingerprint" | "string" | "us_bank_account_fingerprint";
            list_items: {
                data: components["schemas"]["radar.value_list_item"][];
                has_more: boolean;
                object: "list";
                url: string;
            };
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            name: string;
            object: "radar.value_list";
        };
        "radar.value_list_item": {
            created: number;
            created_by: string;
            id: string;
            livemode: boolean;
            object: "radar.value_list_item";
            value: string;
            value_list: string;
        };
        radar_radar_options: {
            session?: string;
        };
        radar_review_resource_location: {
            city?: string | null;
            country?: string | null;
            latitude?: number | null;
            longitude?: number | null;
            region?: string | null;
        };
        radar_review_resource_session: {
            browser?: string | null;
            device?: string | null;
            platform?: string | null;
            version?: string | null;
        };
        received_payment_method_details_financial_account: {
            id: string;
            network: "stripe";
        };
        recurring: {
            aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum" | null;
            interval: "day" | "month" | "week" | "year";
            interval_count: number;
            usage_type: "licensed" | "metered";
        };
        refund: {
            amount: number;
            balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            charge?: (string | components["schemas"]["charge"]) | null;
            created: number;
            currency: string;
            description?: string;
            failure_balance_transaction?: string | components["schemas"]["balance_transaction"];
            failure_reason?: string;
            id: string;
            instructions_email?: string;
            metadata?: {
                [key: string]: string;
            } | null;
            next_action?: components["schemas"]["refund_next_action"];
            object: "refund";
            payment_intent?: (string | components["schemas"]["payment_intent"]) | null;
            reason?: "duplicate" | "expired_uncaptured_charge" | "fraudulent" | "requested_by_customer" | null;
            receipt_number?: string | null;
            source_transfer_reversal?: (string | components["schemas"]["transfer_reversal"]) | null;
            status?: string | null;
            transfer_reversal?: (string | components["schemas"]["transfer_reversal"]) | null;
        };
        refund_next_action: {
            display_details?: components["schemas"]["refund_next_action_display_details"] | null;
            type: string;
        };
        refund_next_action_display_details: {
            email_sent: components["schemas"]["email_sent"];
            expires_at: number;
        };
        "reporting.report_run": {
            created: number;
            error?: string | null;
            id: string;
            livemode: boolean;
            object: "reporting.report_run";
            parameters: components["schemas"]["financial_reporting_finance_report_run_run_parameters"];
            report_type: string;
            result?: components["schemas"]["file"] | null;
            status: string;
            succeeded_at?: number | null;
        };
        "reporting.report_type": {
            data_available_end: number;
            data_available_start: number;
            default_columns?: string[] | null;
            id: string;
            livemode: boolean;
            name: string;
            object: "reporting.report_type";
            updated: number;
            version: number;
        };
        reserve_transaction: {
            amount: number;
            currency: string;
            description?: string | null;
            id: string;
            object: "reserve_transaction";
        };
        review: {
            billing_zip?: string | null;
            charge?: (string | components["schemas"]["charge"]) | null;
            closed_reason?: "approved" | "disputed" | "redacted" | "refunded" | "refunded_as_fraud" | null;
            created: number;
            id: string;
            ip_address?: string | null;
            ip_address_location?: components["schemas"]["radar_review_resource_location"] | null;
            livemode: boolean;
            object: "review";
            open: boolean;
            opened_reason: "manual" | "rule";
            payment_intent?: string | components["schemas"]["payment_intent"];
            reason: string;
            session?: components["schemas"]["radar_review_resource_session"] | null;
        };
        rule: {
            action: string;
            id: string;
            predicate: string;
        };
        scheduled_query_run: {
            created: number;
            data_load_time: number;
            error?: components["schemas"]["sigma_scheduled_query_run_error"];
            file?: components["schemas"]["file"] | null;
            id: string;
            livemode: boolean;
            object: "scheduled_query_run";
            result_available_until: number;
            sql: string;
            status: string;
            title: string;
        };
        schedules_phase_automatic_tax: {
            enabled: boolean;
        };
        secret_service_resource_scope: {
            type: "account" | "user";
            user?: string;
        };
        sepa_debit_generated_from: {
            charge?: (string | components["schemas"]["charge"]) | null;
            setup_attempt?: (string | components["schemas"]["setup_attempt"]) | null;
        };
        setup_attempt: {
            application?: (string | components["schemas"]["application"]) | null;
            attach_to_self?: boolean;
            created: number;
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            flow_directions?: (("inbound" | "outbound")[]) | null;
            id: string;
            livemode: boolean;
            object: "setup_attempt";
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            payment_method: string | components["schemas"]["payment_method"];
            payment_method_details: components["schemas"]["setup_attempt_payment_method_details"];
            setup_error?: components["schemas"]["api_errors"] | null;
            setup_intent: string | components["schemas"]["setup_intent"];
            status: string;
            usage: string;
        };
        setup_attempt_payment_method_details: {
            acss_debit?: components["schemas"]["setup_attempt_payment_method_details_acss_debit"];
            au_becs_debit?: components["schemas"]["setup_attempt_payment_method_details_au_becs_debit"];
            bacs_debit?: components["schemas"]["setup_attempt_payment_method_details_bacs_debit"];
            bancontact?: components["schemas"]["setup_attempt_payment_method_details_bancontact"];
            boleto?: components["schemas"]["setup_attempt_payment_method_details_boleto"];
            card?: components["schemas"]["setup_attempt_payment_method_details_card"];
            card_present?: components["schemas"]["setup_attempt_payment_method_details_card_present"];
            cashapp?: components["schemas"]["setup_attempt_payment_method_details_cashapp"];
            ideal?: components["schemas"]["setup_attempt_payment_method_details_ideal"];
            klarna?: components["schemas"]["setup_attempt_payment_method_details_klarna"];
            link?: components["schemas"]["setup_attempt_payment_method_details_link"];
            paypal?: components["schemas"]["setup_attempt_payment_method_details_paypal"];
            sepa_debit?: components["schemas"]["setup_attempt_payment_method_details_sepa_debit"];
            sofort?: components["schemas"]["setup_attempt_payment_method_details_sofort"];
            type: string;
            us_bank_account?: components["schemas"]["setup_attempt_payment_method_details_us_bank_account"];
        };
        setup_attempt_payment_method_details_acss_debit: Record<string, never>;
        setup_attempt_payment_method_details_au_becs_debit: Record<string, never>;
        setup_attempt_payment_method_details_bacs_debit: Record<string, never>;
        setup_attempt_payment_method_details_bancontact: {
            bank_code?: string | null;
            bank_name?: string | null;
            bic?: string | null;
            generated_sepa_debit?: (string | components["schemas"]["payment_method"]) | null;
            generated_sepa_debit_mandate?: (string | components["schemas"]["mandate"]) | null;
            iban_last4?: string | null;
            preferred_language?: "de" | "en" | "fr" | "nl" | null;
            verified_name?: string | null;
        };
        setup_attempt_payment_method_details_boleto: Record<string, never>;
        setup_attempt_payment_method_details_card: {
            brand?: string | null;
            checks?: components["schemas"]["payment_method_details_card_checks"] | null;
            country?: string | null;
            exp_month?: number | null;
            exp_year?: number | null;
            fingerprint?: string | null;
            funding?: string | null;
            last4?: string | null;
            network?: string | null;
            three_d_secure?: components["schemas"]["three_d_secure_details"] | null;
            wallet?: components["schemas"]["setup_attempt_payment_method_details_card_wallet"] | null;
        };
        setup_attempt_payment_method_details_card_present: {
            generated_card?: (string | components["schemas"]["payment_method"]) | null;
        };
        setup_attempt_payment_method_details_card_wallet: {
            apple_pay?: components["schemas"]["payment_method_details_card_wallet_apple_pay"];
            google_pay?: components["schemas"]["payment_method_details_card_wallet_google_pay"];
            type: "apple_pay" | "google_pay" | "link";
        };
        setup_attempt_payment_method_details_cashapp: Record<string, never>;
        setup_attempt_payment_method_details_ideal: {
            bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe" | null;
            bic?: "ABNANL2A" | "ASNBNL21" | "BITSNL2A" | "BUNQNL2A" | "FVLBNL22" | "HANDNL2A" | "INGBNL2A" | "KNABNL2H" | "MOYONL21" | "RABONL2U" | "RBRBNL21" | "REVOIE23" | "REVOLT21" | "SNSBNL2A" | "TRIONL2U" | null;
            generated_sepa_debit?: (string | components["schemas"]["payment_method"]) | null;
            generated_sepa_debit_mandate?: (string | components["schemas"]["mandate"]) | null;
            iban_last4?: string | null;
            verified_name?: string | null;
        };
        setup_attempt_payment_method_details_klarna: Record<string, never>;
        setup_attempt_payment_method_details_link: Record<string, never>;
        setup_attempt_payment_method_details_paypal: Record<string, never>;
        setup_attempt_payment_method_details_sepa_debit: Record<string, never>;
        setup_attempt_payment_method_details_sofort: {
            bank_code?: string | null;
            bank_name?: string | null;
            bic?: string | null;
            generated_sepa_debit?: (string | components["schemas"]["payment_method"]) | null;
            generated_sepa_debit_mandate?: (string | components["schemas"]["mandate"]) | null;
            iban_last4?: string | null;
            preferred_language?: "de" | "en" | "fr" | "nl" | null;
            verified_name?: string | null;
        };
        setup_attempt_payment_method_details_us_bank_account: Record<string, never>;
        setup_intent: {
            application?: (string | components["schemas"]["application"]) | null;
            attach_to_self?: boolean;
            automatic_payment_methods?: components["schemas"]["payment_flows_automatic_payment_methods_setup_intent"] | null;
            cancellation_reason?: "abandoned" | "duplicate" | "requested_by_customer" | null;
            client_secret?: string | null;
            created: number;
            customer?: (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"]) | null;
            description?: string | null;
            flow_directions?: (("inbound" | "outbound")[]) | null;
            id: string;
            last_setup_error?: components["schemas"]["api_errors"] | null;
            latest_attempt?: (string | components["schemas"]["setup_attempt"]) | null;
            livemode: boolean;
            mandate?: (string | components["schemas"]["mandate"]) | null;
            metadata?: {
                [key: string]: string;
            } | null;
            next_action?: components["schemas"]["setup_intent_next_action"] | null;
            object: "setup_intent";
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            payment_method?: (string | components["schemas"]["payment_method"]) | null;
            payment_method_options?: components["schemas"]["setup_intent_payment_method_options"] | null;
            payment_method_types: string[];
            single_use_mandate?: (string | components["schemas"]["mandate"]) | null;
            status: "canceled" | "processing" | "requires_action" | "requires_confirmation" | "requires_payment_method" | "succeeded";
            usage: string;
        };
        setup_intent_next_action: {
            cashapp_handle_redirect_or_display_qr_code?: components["schemas"]["payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code"];
            redirect_to_url?: components["schemas"]["setup_intent_next_action_redirect_to_url"];
            type: string;
            use_stripe_sdk?: Record<string, never>;
            verify_with_microdeposits?: components["schemas"]["setup_intent_next_action_verify_with_microdeposits"];
        };
        setup_intent_next_action_redirect_to_url: {
            return_url?: string | null;
            url?: string | null;
        };
        setup_intent_next_action_verify_with_microdeposits: {
            arrival_date: number;
            hosted_verification_url: string;
            microdeposit_type?: "amounts" | "descriptor_code" | null;
        };
        setup_intent_payment_method_options: {
            acss_debit?: components["schemas"]["setup_intent_payment_method_options_acss_debit"] | components["schemas"]["setup_intent_type_specific_payment_method_options_client"];
            card?: components["schemas"]["setup_intent_payment_method_options_card"];
            link?: components["schemas"]["setup_intent_payment_method_options_link"] | components["schemas"]["setup_intent_type_specific_payment_method_options_client"];
            paypal?: components["schemas"]["setup_intent_payment_method_options_paypal"] | components["schemas"]["setup_intent_type_specific_payment_method_options_client"];
            sepa_debit?: components["schemas"]["setup_intent_payment_method_options_sepa_debit"] | components["schemas"]["setup_intent_type_specific_payment_method_options_client"];
            us_bank_account?: components["schemas"]["setup_intent_payment_method_options_us_bank_account"] | components["schemas"]["setup_intent_type_specific_payment_method_options_client"];
        };
        setup_intent_payment_method_options_acss_debit: {
            currency?: "cad" | "usd" | null;
            mandate_options?: components["schemas"]["setup_intent_payment_method_options_mandate_options_acss_debit"];
            verification_method?: "automatic" | "instant" | "microdeposits";
        };
        setup_intent_payment_method_options_card: {
            mandate_options?: components["schemas"]["setup_intent_payment_method_options_card_mandate_options"] | null;
            network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "interac" | "jcb" | "mastercard" | "unionpay" | "unknown" | "visa" | null;
            request_three_d_secure?: "any" | "automatic" | "challenge_only" | null;
        };
        setup_intent_payment_method_options_card_mandate_options: {
            amount: number;
            amount_type: "fixed" | "maximum";
            currency: string;
            description?: string | null;
            end_date?: number | null;
            interval: "day" | "month" | "sporadic" | "week" | "year";
            interval_count?: number | null;
            reference: string;
            start_date: number;
            supported_types?: "india"[] | null;
        };
        setup_intent_payment_method_options_link: Record<string, never>;
        setup_intent_payment_method_options_mandate_options_acss_debit: {
            custom_mandate_url?: string;
            default_for?: ("invoice" | "subscription")[];
            interval_description?: string | null;
            payment_schedule?: "combined" | "interval" | "sporadic" | null;
            transaction_type?: "business" | "personal" | null;
        };
        setup_intent_payment_method_options_mandate_options_sepa_debit: Record<string, never>;
        setup_intent_payment_method_options_paypal: {
            billing_agreement_id?: string | null;
        };
        setup_intent_payment_method_options_sepa_debit: {
            mandate_options?: components["schemas"]["setup_intent_payment_method_options_mandate_options_sepa_debit"];
        };
        setup_intent_payment_method_options_us_bank_account: {
            financial_connections?: components["schemas"]["linked_account_options_us_bank_account"];
            verification_method?: "automatic" | "instant" | "microdeposits";
        };
        setup_intent_type_specific_payment_method_options_client: {
            verification_method?: "automatic" | "instant" | "microdeposits";
        };
        shipping: {
            address?: components["schemas"]["address"];
            carrier?: string | null;
            name?: string;
            phone?: string | null;
            tracking_number?: string | null;
        };
        shipping_rate: {
            active: boolean;
            created: number;
            delivery_estimate?: components["schemas"]["shipping_rate_delivery_estimate"] | null;
            display_name?: string | null;
            fixed_amount?: components["schemas"]["shipping_rate_fixed_amount"];
            id: string;
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            object: "shipping_rate";
            tax_behavior?: "exclusive" | "inclusive" | "unspecified" | null;
            tax_code?: (string | components["schemas"]["tax_code"]) | null;
            type: "fixed_amount";
        };
        shipping_rate_currency_option: {
            amount: number;
            tax_behavior: "exclusive" | "inclusive" | "unspecified";
        };
        shipping_rate_delivery_estimate: {
            maximum?: components["schemas"]["shipping_rate_delivery_estimate_bound"] | null;
            minimum?: components["schemas"]["shipping_rate_delivery_estimate_bound"] | null;
        };
        shipping_rate_delivery_estimate_bound: {
            unit: "business_day" | "day" | "hour" | "month" | "week";
            value: number;
        };
        shipping_rate_fixed_amount: {
            amount: number;
            currency: string;
            currency_options?: {
                [key: string]: components["schemas"]["shipping_rate_currency_option"];
            };
        };
        sigma_scheduled_query_run_error: {
            message: string;
        };
        source: {
            ach_credit_transfer?: components["schemas"]["source_type_ach_credit_transfer"];
            ach_debit?: components["schemas"]["source_type_ach_debit"];
            acss_debit?: components["schemas"]["source_type_acss_debit"];
            alipay?: components["schemas"]["source_type_alipay"];
            amount?: number | null;
            au_becs_debit?: components["schemas"]["source_type_au_becs_debit"];
            bancontact?: components["schemas"]["source_type_bancontact"];
            card?: components["schemas"]["source_type_card"];
            card_present?: components["schemas"]["source_type_card_present"];
            client_secret: string;
            code_verification?: components["schemas"]["source_code_verification_flow"];
            created: number;
            currency?: string | null;
            customer?: string;
            eps?: components["schemas"]["source_type_eps"];
            flow: string;
            giropay?: components["schemas"]["source_type_giropay"];
            id: string;
            ideal?: components["schemas"]["source_type_ideal"];
            klarna?: components["schemas"]["source_type_klarna"];
            livemode: boolean;
            metadata?: {
                [key: string]: string;
            } | null;
            multibanco?: components["schemas"]["source_type_multibanco"];
            object: "source";
            owner?: components["schemas"]["source_owner"] | null;
            p24?: components["schemas"]["source_type_p24"];
            receiver?: components["schemas"]["source_receiver_flow"];
            redirect?: components["schemas"]["source_redirect_flow"];
            sepa_debit?: components["schemas"]["source_type_sepa_debit"];
            sofort?: components["schemas"]["source_type_sofort"];
            source_order?: components["schemas"]["source_order"];
            statement_descriptor?: string | null;
            status: string;
            three_d_secure?: components["schemas"]["source_type_three_d_secure"];
            type: "ach_credit_transfer" | "ach_debit" | "acss_debit" | "alipay" | "au_becs_debit" | "bancontact" | "card" | "card_present" | "eps" | "giropay" | "ideal" | "klarna" | "multibanco" | "p24" | "sepa_debit" | "sofort" | "three_d_secure" | "wechat";
            usage?: string | null;
            wechat?: components["schemas"]["source_type_wechat"];
        };
        source_code_verification_flow: {
            attempts_remaining: number;
            status: string;
        };
        source_mandate_notification: {
            acss_debit?: components["schemas"]["source_mandate_notification_acss_debit_data"];
            amount?: number | null;
            bacs_debit?: components["schemas"]["source_mandate_notification_bacs_debit_data"];
            created: number;
            id: string;
            livemode: boolean;
            object: "source_mandate_notification";
            reason: string;
            sepa_debit?: components["schemas"]["source_mandate_notification_sepa_debit_data"];
            source: components["schemas"]["source"];
            status: string;
            type: string;
        };
        source_mandate_notification_acss_debit_data: {
            statement_descriptor?: string;
        };
        source_mandate_notification_bacs_debit_data: {
            last4?: string;
        };
        source_mandate_notification_sepa_debit_data: {
            creditor_identifier?: string;
            last4?: string;
            mandate_reference?: string;
        };
        source_order: {
            amount: number;
            currency: string;
            email?: string;
            items?: components["schemas"]["source_order_item"][] | null;
            shipping?: components["schemas"]["shipping"];
        };
        source_order_item: {
            amount?: number | null;
            currency?: string | null;
            description?: string | null;
            parent?: string | null;
            quantity?: number;
            type?: string | null;
        };
        source_owner: {
            address?: components["schemas"]["address"] | null;
            email?: string | null;
            name?: string | null;
            phone?: string | null;
            verified_address?: components["schemas"]["address"] | null;
            verified_email?: string | null;
            verified_name?: string | null;
            verified_phone?: string | null;
        };
        source_receiver_flow: {
            address?: string | null;
            amount_charged: number;
            amount_received: number;
            amount_returned: number;
            refund_attributes_method: string;
            refund_attributes_status: string;
        };
        source_redirect_flow: {
            failure_reason?: string | null;
            return_url: string;
            status: string;
            url: string;
        };
        source_transaction: {
            ach_credit_transfer?: components["schemas"]["source_transaction_ach_credit_transfer_data"];
            amount: number;
            chf_credit_transfer?: components["schemas"]["source_transaction_chf_credit_transfer_data"];
            created: number;
            currency: string;
            gbp_credit_transfer?: components["schemas"]["source_transaction_gbp_credit_transfer_data"];
            id: string;
            livemode: boolean;
            object: "source_transaction";
            paper_check?: components["schemas"]["source_transaction_paper_check_data"];
            sepa_credit_transfer?: components["schemas"]["source_transaction_sepa_credit_transfer_data"];
            source: string;
            status: string;
            type: "ach_credit_transfer" | "ach_debit" | "alipay" | "bancontact" | "card" | "card_present" | "eps" | "giropay" | "ideal" | "klarna" | "multibanco" | "p24" | "sepa_debit" | "sofort" | "three_d_secure" | "wechat";
        };
        source_transaction_ach_credit_transfer_data: {
            customer_data?: string;
            fingerprint?: string;
            last4?: string;
            routing_number?: string;
        };
        source_transaction_chf_credit_transfer_data: {
            reference?: string;
            sender_address_country?: string;
            sender_address_line1?: string;
            sender_iban?: string;
            sender_name?: string;
        };
        source_transaction_gbp_credit_transfer_data: {
            fingerprint?: string;
            funding_method?: string;
            last4?: string;
            reference?: string;
            sender_account_number?: string;
            sender_name?: string;
            sender_sort_code?: string;
        };
        source_transaction_paper_check_data: {
            available_at?: string;
            invoices?: string;
        };
        source_transaction_sepa_credit_transfer_data: {
            reference?: string;
            sender_iban?: string;
            sender_name?: string;
        };
        source_type_ach_credit_transfer: {
            account_number?: string | null;
            bank_name?: string | null;
            fingerprint?: string | null;
            refund_account_holder_name?: string | null;
            refund_account_holder_type?: string | null;
            refund_routing_number?: string | null;
            routing_number?: string | null;
            swift_code?: string | null;
        };
        source_type_ach_debit: {
            bank_name?: string | null;
            country?: string | null;
            fingerprint?: string | null;
            last4?: string | null;
            routing_number?: string | null;
            type?: string | null;
        };
        source_type_acss_debit: {
            bank_address_city?: string | null;
            bank_address_line_1?: string | null;
            bank_address_line_2?: string | null;
            bank_address_postal_code?: string | null;
            bank_name?: string | null;
            category?: string | null;
            country?: string | null;
            fingerprint?: string | null;
            last4?: string | null;
            routing_number?: string | null;
        };
        source_type_alipay: {
            data_string?: string | null;
            native_url?: string | null;
            statement_descriptor?: string | null;
        };
        source_type_au_becs_debit: {
            bsb_number?: string | null;
            fingerprint?: string | null;
            last4?: string | null;
        };
        source_type_bancontact: {
            bank_code?: string | null;
            bank_name?: string | null;
            bic?: string | null;
            iban_last4?: string | null;
            preferred_language?: string | null;
            statement_descriptor?: string | null;
        };
        source_type_card: {
            address_line1_check?: string | null;
            address_zip_check?: string | null;
            brand?: string | null;
            country?: string | null;
            cvc_check?: string | null;
            dynamic_last4?: string | null;
            exp_month?: number | null;
            exp_year?: number | null;
            fingerprint?: string;
            funding?: string | null;
            last4?: string | null;
            name?: string | null;
            three_d_secure?: string;
            tokenization_method?: string | null;
        };
        source_type_card_present: {
            application_cryptogram?: string;
            application_preferred_name?: string;
            authorization_code?: string | null;
            authorization_response_code?: string;
            brand?: string | null;
            country?: string | null;
            cvm_type?: string;
            data_type?: string | null;
            dedicated_file_name?: string;
            emv_auth_data?: string;
            evidence_customer_signature?: string | null;
            evidence_transaction_certificate?: string | null;
            exp_month?: number | null;
            exp_year?: number | null;
            fingerprint?: string;
            funding?: string | null;
            last4?: string | null;
            pos_device_id?: string | null;
            pos_entry_mode?: string;
            read_method?: string | null;
            reader?: string | null;
            terminal_verification_results?: string;
            transaction_status_information?: string;
        };
        source_type_eps: {
            reference?: string | null;
            statement_descriptor?: string | null;
        };
        source_type_giropay: {
            bank_code?: string | null;
            bank_name?: string | null;
            bic?: string | null;
            statement_descriptor?: string | null;
        };
        source_type_ideal: {
            bank?: string | null;
            bic?: string | null;
            iban_last4?: string | null;
            statement_descriptor?: string | null;
        };
        source_type_klarna: {
            background_image_url?: string;
            client_token?: string | null;
            first_name?: string;
            last_name?: string;
            locale?: string;
            logo_url?: string;
            page_title?: string;
            pay_later_asset_urls_descriptive?: string;
            pay_later_asset_urls_standard?: string;
            pay_later_name?: string;
            pay_later_redirect_url?: string;
            pay_now_asset_urls_descriptive?: string;
            pay_now_asset_urls_standard?: string;
            pay_now_name?: string;
            pay_now_redirect_url?: string;
            pay_over_time_asset_urls_descriptive?: string;
            pay_over_time_asset_urls_standard?: string;
            pay_over_time_name?: string;
            pay_over_time_redirect_url?: string;
            payment_method_categories?: string;
            purchase_country?: string;
            purchase_type?: string;
            redirect_url?: string;
            shipping_delay?: number;
            shipping_first_name?: string;
            shipping_last_name?: string;
        };
        source_type_multibanco: {
            entity?: string | null;
            reference?: string | null;
            refund_account_holder_address_city?: string | null;
            refund_account_holder_address_country?: string | null;
            refund_account_holder_address_line1?: string | null;
            refund_account_holder_address_line2?: string | null;
            refund_account_holder_address_postal_code?: string | null;
            refund_account_holder_address_state?: string | null;
            refund_account_holder_name?: string | null;
            refund_iban?: string | null;
        };
        source_type_p24: {
            reference?: string | null;
        };
        source_type_sepa_debit: {
            bank_code?: string | null;
            branch_code?: string | null;
            country?: string | null;
            fingerprint?: string | null;
            last4?: string | null;
            mandate_reference?: string | null;
            mandate_url?: string | null;
        };
        source_type_sofort: {
            bank_code?: string | null;
            bank_name?: string | null;
            bic?: string | null;
            country?: string | null;
            iban_last4?: string | null;
            preferred_language?: string | null;
            statement_descriptor?: string | null;
        };
        source_type_three_d_secure: {
            address_line1_check?: string | null;
            address_zip_check?: string | null;
            authenticated?: boolean | null;
            brand?: string | null;
            card?: string | null;
            country?: string | null;
            customer?: string | null;
            cvc_check?: string | null;
            dynamic_last4?: string | null;
            exp_month?: number | null;
            exp_year?: number | null;
            fingerprint?: string;
            funding?: string | null;
            last4?: string | null;
            name?: string | null;
            three_d_secure?: string;
            tokenization_method?: string | null;
        };
        source_type_wechat: {
            prepay_id?: string;
            qr_code_url?: string | null;
            statement_descriptor?: string;
        };
        subscription: {
            application?: (string | components["schemas"]["application"] | components["schemas"]["deleted_application"]) | null;
            application_fee_percent?: number | null;
            automatic_tax: components["schemas"]["subscription_automatic_tax"];
            billing_cycle_anchor: number;
            billing_thresholds?: components["schemas"]["subscription_billing_thresholds"] | null;
            cancel_at?: number | null;
            cancel_at_period_end: boolean;
            canceled_at?: number | null;
            cancellation_details?: components["schemas"]["cancellation_details"] | null;
            collection_method: "charge_automatically" | "send_invoice";
            created: number;
            currency: string;
            current_period_end: number;
            current_period_start: number;
            customer: string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"];
            days_until_due?: number | null;
            default_payment_method?: (string | components["schemas"]["payment_method"]) | null;
            default_source?: (string | components["schemas"]["bank_account"] | components["schemas"]["card"] | components["schemas"]["source"]) | null;
            default_tax_rates?: components["schemas"]["tax_rate"][] | null;
            description?: string | null;
            discount?: components["schemas"]["discount"] | null;
            ended_at?: number | null;
            id: string;
            items: {
                data: components["schemas"]["subscription_item"][];
                has_more: boolean;
                object: "list";
                url: string;
            };
            latest_invoice?: (string | components["schemas"]["invoice"]) | null;
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            next_pending_invoice_item_invoice?: number | null;
            object: "subscription";
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            pause_collection?: components["schemas"]["subscriptions_resource_pause_collection"] | null;
            payment_settings?: components["schemas"]["subscriptions_resource_payment_settings"] | null;
            pending_invoice_item_interval?: components["schemas"]["subscription_pending_invoice_item_interval"] | null;
            pending_setup_intent?: (string | components["schemas"]["setup_intent"]) | null;
            pending_update?: components["schemas"]["subscriptions_resource_pending_update"] | null;
            schedule?: (string | components["schemas"]["subscription_schedule"]) | null;
            start_date: number;
            status: "active" | "canceled" | "incomplete" | "incomplete_expired" | "past_due" | "paused" | "trialing" | "unpaid";
            test_clock?: (string | components["schemas"]["test_helpers.test_clock"]) | null;
            transfer_data?: components["schemas"]["subscription_transfer_data"] | null;
            trial_end?: number | null;
            trial_settings?: components["schemas"]["subscriptions_trials_resource_trial_settings"] | null;
            trial_start?: number | null;
        };
        subscription_automatic_tax: {
            enabled: boolean;
        };
        subscription_billing_thresholds: {
            amount_gte?: number | null;
            reset_billing_cycle_anchor?: boolean | null;
        };
        subscription_details_data: {
            metadata?: {
                [key: string]: string;
            } | null;
        };
        subscription_item: {
            billing_thresholds?: components["schemas"]["subscription_item_billing_thresholds"] | null;
            created: number;
            id: string;
            metadata: {
                [key: string]: string;
            };
            object: "subscription_item";
            price: components["schemas"]["price"];
            quantity?: number;
            subscription: string;
            tax_rates?: components["schemas"]["tax_rate"][] | null;
        };
        subscription_item_billing_thresholds: {
            usage_gte?: number | null;
        };
        subscription_payment_method_options_card: {
            mandate_options?: components["schemas"]["invoice_mandate_options_card"];
            network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "interac" | "jcb" | "mastercard" | "unionpay" | "unknown" | "visa" | null;
            request_three_d_secure?: "any" | "automatic" | null;
        };
        subscription_pending_invoice_item_interval: {
            interval: "day" | "month" | "week" | "year";
            interval_count: number;
        };
        subscription_schedule: {
            application?: (string | components["schemas"]["application"] | components["schemas"]["deleted_application"]) | null;
            canceled_at?: number | null;
            completed_at?: number | null;
            created: number;
            current_phase?: components["schemas"]["subscription_schedule_current_phase"] | null;
            customer: string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"];
            default_settings: components["schemas"]["subscription_schedules_resource_default_settings"];
            end_behavior: "cancel" | "none" | "release" | "renew";
            id: string;
            livemode: boolean;
            metadata?: {
                [key: string]: string;
            } | null;
            object: "subscription_schedule";
            phases: components["schemas"]["subscription_schedule_phase_configuration"][];
            released_at?: number | null;
            released_subscription?: string | null;
            status: "active" | "canceled" | "completed" | "not_started" | "released";
            subscription?: (string | components["schemas"]["subscription"]) | null;
            test_clock?: (string | components["schemas"]["test_helpers.test_clock"]) | null;
        };
        subscription_schedule_add_invoice_item: {
            price: string | components["schemas"]["price"] | components["schemas"]["deleted_price"];
            quantity?: number | null;
            tax_rates?: components["schemas"]["tax_rate"][] | null;
        };
        subscription_schedule_configuration_item: {
            billing_thresholds?: components["schemas"]["subscription_item_billing_thresholds"] | null;
            metadata?: {
                [key: string]: string;
            } | null;
            price: string | components["schemas"]["price"] | components["schemas"]["deleted_price"];
            quantity?: number;
            tax_rates?: components["schemas"]["tax_rate"][] | null;
        };
        subscription_schedule_current_phase: {
            end_date: number;
            start_date: number;
        };
        subscription_schedule_phase_configuration: {
            add_invoice_items: components["schemas"]["subscription_schedule_add_invoice_item"][];
            application_fee_percent?: number | null;
            automatic_tax?: components["schemas"]["schedules_phase_automatic_tax"];
            billing_cycle_anchor?: "automatic" | "phase_start" | null;
            billing_thresholds?: components["schemas"]["subscription_billing_thresholds"] | null;
            collection_method?: "charge_automatically" | "send_invoice" | null;
            coupon?: (string | components["schemas"]["coupon"] | components["schemas"]["deleted_coupon"]) | null;
            currency: string;
            default_payment_method?: (string | components["schemas"]["payment_method"]) | null;
            default_tax_rates?: components["schemas"]["tax_rate"][] | null;
            description?: string | null;
            end_date: number;
            invoice_settings?: components["schemas"]["invoice_setting_phase_setting"] | null;
            items: components["schemas"]["subscription_schedule_configuration_item"][];
            metadata?: {
                [key: string]: string;
            } | null;
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            proration_behavior: "always_invoice" | "create_prorations" | "none";
            start_date: number;
            transfer_data?: components["schemas"]["subscription_transfer_data"] | null;
            trial_end?: number | null;
        };
        subscription_schedules_resource_default_settings: {
            application_fee_percent?: number | null;
            automatic_tax?: components["schemas"]["subscription_schedules_resource_default_settings_automatic_tax"];
            billing_cycle_anchor: "automatic" | "phase_start";
            billing_thresholds?: components["schemas"]["subscription_billing_thresholds"] | null;
            collection_method?: "charge_automatically" | "send_invoice" | null;
            default_payment_method?: (string | components["schemas"]["payment_method"]) | null;
            description?: string | null;
            invoice_settings?: components["schemas"]["invoice_setting_subscription_schedule_setting"] | null;
            on_behalf_of?: (string | components["schemas"]["account"]) | null;
            transfer_data?: components["schemas"]["subscription_transfer_data"] | null;
        };
        subscription_schedules_resource_default_settings_automatic_tax: {
            enabled: boolean;
        };
        subscription_transfer_data: {
            amount_percent?: number | null;
            destination: string | components["schemas"]["account"];
        };
        subscriptions_resource_pause_collection: {
            behavior: "keep_as_draft" | "mark_uncollectible" | "void";
            resumes_at?: number | null;
        };
        subscriptions_resource_payment_method_options: {
            acss_debit?: components["schemas"]["invoice_payment_method_options_acss_debit"] | null;
            bancontact?: components["schemas"]["invoice_payment_method_options_bancontact"] | null;
            card?: components["schemas"]["subscription_payment_method_options_card"] | null;
            customer_balance?: components["schemas"]["invoice_payment_method_options_customer_balance"] | null;
            konbini?: components["schemas"]["invoice_payment_method_options_konbini"] | null;
            us_bank_account?: components["schemas"]["invoice_payment_method_options_us_bank_account"] | null;
        };
        subscriptions_resource_payment_settings: {
            payment_method_options?: components["schemas"]["subscriptions_resource_payment_method_options"] | null;
            payment_method_types?: (("ach_credit_transfer" | "ach_debit" | "acss_debit" | "au_becs_debit" | "bacs_debit" | "bancontact" | "boleto" | "card" | "cashapp" | "customer_balance" | "fpx" | "giropay" | "grabpay" | "ideal" | "konbini" | "link" | "paynow" | "paypal" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay")[]) | null;
            save_default_payment_method?: "off" | "on_subscription" | null;
        };
        subscriptions_resource_pending_update: {
            billing_cycle_anchor?: number | null;
            expires_at: number;
            subscription_items?: components["schemas"]["subscription_item"][] | null;
            trial_end?: number | null;
            trial_from_plan?: boolean | null;
        };
        subscriptions_trials_resource_end_behavior: {
            missing_payment_method: "cancel" | "create_invoice" | "pause";
        };
        subscriptions_trials_resource_trial_settings: {
            end_behavior: components["schemas"]["subscriptions_trials_resource_end_behavior"];
        };
        "tax.calculation": {
            amount_total: number;
            currency: string;
            customer?: string | null;
            customer_details: components["schemas"]["tax_product_resource_customer_details"];
            expires_at?: number | null;
            id?: string | null;
            line_items?: {
                data: components["schemas"]["tax.calculation_line_item"][];
                has_more: boolean;
                object: "list";
                url: string;
            } | null;
            livemode: boolean;
            object: "tax.calculation";
            shipping_cost?: components["schemas"]["tax_product_resource_tax_calculation_shipping_cost"] | null;
            tax_amount_exclusive: number;
            tax_amount_inclusive: number;
            tax_breakdown: components["schemas"]["tax_product_resource_tax_breakdown"][];
            tax_date: number;
        };
        "tax.calculation_line_item": {
            amount: number;
            amount_tax: number;
            id: string;
            livemode: boolean;
            object: "tax.calculation_line_item";
            product?: string | null;
            quantity: number;
            reference?: string | null;
            tax_behavior: "exclusive" | "inclusive";
            tax_breakdown?: components["schemas"]["tax_product_resource_line_item_tax_breakdown"][] | null;
            tax_code: string;
        };
        "tax.settings": {
            defaults: components["schemas"]["tax_product_resource_tax_settings_defaults"];
            head_office?: components["schemas"]["tax_product_resource_tax_settings_head_office"] | null;
            livemode: boolean;
            object: "tax.settings";
            status: "active" | "pending";
            status_details: components["schemas"]["tax_product_resource_tax_settings_status_details"];
        };
        "tax.transaction": {
            created: number;
            currency: string;
            customer?: string | null;
            customer_details: components["schemas"]["tax_product_resource_customer_details"];
            id: string;
            line_items?: {
                data: components["schemas"]["tax.transaction_line_item"][];
                has_more: boolean;
                object: "list";
                url: string;
            } | null;
            livemode: boolean;
            metadata?: {
                [key: string]: string;
            } | null;
            object: "tax.transaction";
            reference: string;
            reversal?: components["schemas"]["tax_product_resource_tax_transaction_resource_reversal"] | null;
            shipping_cost?: components["schemas"]["tax_product_resource_tax_transaction_shipping_cost"] | null;
            tax_date: number;
            type: "reversal" | "transaction";
        };
        "tax.transaction_line_item": {
            amount: number;
            amount_tax: number;
            id: string;
            livemode: boolean;
            metadata?: {
                [key: string]: string;
            } | null;
            object: "tax.transaction_line_item";
            product?: string | null;
            quantity: number;
            reference: string;
            reversal?: components["schemas"]["tax_product_resource_tax_transaction_line_item_resource_reversal"] | null;
            tax_behavior: "exclusive" | "inclusive";
            tax_code: string;
            type: "reversal" | "transaction";
        };
        tax_code: {
            description: string;
            id: string;
            name: string;
            object: "tax_code";
        };
        tax_deducted_at_source: {
            id: string;
            object: "tax_deducted_at_source";
            period_end: number;
            period_start: number;
            tax_deduction_account_number: string;
        };
        tax_id: {
            country?: string | null;
            created: number;
            customer?: (string | components["schemas"]["customer"]) | null;
            id: string;
            livemode: boolean;
            object: "tax_id";
            type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bo_tin" | "br_cnpj" | "br_cpf" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "li_uid" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "no_vat" | "nz_gst" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "ua_vat" | "unknown" | "us_ein" | "uy_ruc" | "ve_rif" | "vn_tin" | "za_vat";
            value: string;
            verification?: components["schemas"]["tax_id_verification"] | null;
        };
        tax_id_verification: {
            status: "pending" | "unavailable" | "unverified" | "verified";
            verified_address?: string | null;
            verified_name?: string | null;
        };
        tax_product_resource_customer_details: {
            address?: components["schemas"]["tax_product_resource_postal_address"] | null;
            address_source?: "billing" | "shipping" | null;
            ip_address?: string | null;
            tax_ids: components["schemas"]["tax_product_resource_customer_details_resource_tax_id"][];
            taxability_override: "customer_exempt" | "none" | "reverse_charge";
        };
        tax_product_resource_customer_details_resource_tax_id: {
            type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bo_tin" | "br_cnpj" | "br_cpf" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "li_uid" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "no_vat" | "nz_gst" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "ua_vat" | "unknown" | "us_ein" | "uy_ruc" | "ve_rif" | "vn_tin" | "za_vat";
            value: string;
        };
        tax_product_resource_jurisdiction: {
            country: string;
            display_name: string;
            level: "city" | "country" | "county" | "district" | "state";
            state?: string | null;
        };
        tax_product_resource_line_item_tax_breakdown: {
            amount: number;
            jurisdiction: components["schemas"]["tax_product_resource_jurisdiction"];
            sourcing: "destination" | "origin";
            tax_rate_details?: components["schemas"]["tax_product_resource_line_item_tax_rate_details"] | null;
            taxability_reason: "customer_exempt" | "not_collecting" | "not_subject_to_tax" | "not_supported" | "portion_product_exempt" | "portion_reduced_rated" | "portion_standard_rated" | "product_exempt" | "product_exempt_holiday" | "proportionally_rated" | "reduced_rated" | "reverse_charge" | "standard_rated" | "taxable_basis_reduced" | "zero_rated";
            taxable_amount: number;
        };
        tax_product_resource_line_item_tax_rate_details: {
            display_name: string;
            percentage_decimal: string;
            tax_type: "amusement_tax" | "communications_tax" | "gst" | "hst" | "igst" | "jct" | "lease_tax" | "pst" | "qst" | "rst" | "sales_tax" | "vat";
        };
        tax_product_resource_postal_address: {
            city?: string | null;
            country: string;
            line1?: string | null;
            line2?: string | null;
            postal_code?: string | null;
            state?: string | null;
        };
        tax_product_resource_tax_breakdown: {
            amount: number;
            inclusive: boolean;
            tax_rate_details: components["schemas"]["tax_product_resource_tax_rate_details"];
            taxability_reason: "customer_exempt" | "not_collecting" | "not_subject_to_tax" | "not_supported" | "portion_product_exempt" | "portion_reduced_rated" | "portion_standard_rated" | "product_exempt" | "product_exempt_holiday" | "proportionally_rated" | "reduced_rated" | "reverse_charge" | "standard_rated" | "taxable_basis_reduced" | "zero_rated";
            taxable_amount: number;
        };
        tax_product_resource_tax_calculation_shipping_cost: {
            amount: number;
            amount_tax: number;
            shipping_rate?: string;
            tax_behavior: "exclusive" | "inclusive";
            tax_breakdown?: components["schemas"]["tax_product_resource_line_item_tax_breakdown"][];
            tax_code: string;
        };
        tax_product_resource_tax_rate_details: {
            country?: string | null;
            percentage_decimal: string;
            state?: string | null;
            tax_type?: "amusement_tax" | "communications_tax" | "gst" | "hst" | "igst" | "jct" | "lease_tax" | "pst" | "qst" | "rst" | "sales_tax" | "vat" | null;
        };
        tax_product_resource_tax_settings_defaults: {
            tax_behavior?: "exclusive" | "inclusive" | "inferred_by_currency" | null;
            tax_code?: string | null;
        };
        tax_product_resource_tax_settings_head_office: {
            address: components["schemas"]["address"];
        };
        tax_product_resource_tax_settings_status_details: {
            active?: components["schemas"]["tax_product_resource_tax_settings_status_details_resource_active"];
            pending?: components["schemas"]["tax_product_resource_tax_settings_status_details_resource_pending"];
        };
        tax_product_resource_tax_settings_status_details_resource_active: Record<string, never>;
        tax_product_resource_tax_settings_status_details_resource_pending: {
            missing_fields?: string[] | null;
        };
        tax_product_resource_tax_transaction_line_item_resource_reversal: {
            original_line_item: string;
        };
        tax_product_resource_tax_transaction_resource_reversal: {
            original_transaction?: string | null;
        };
        tax_product_resource_tax_transaction_shipping_cost: {
            amount: number;
            amount_tax: number;
            shipping_rate?: string;
            tax_behavior: "exclusive" | "inclusive";
            tax_code: string;
        };
        tax_rate: {
            active: boolean;
            country?: string | null;
            created: number;
            description?: string | null;
            display_name: string;
            effective_percentage?: number | null;
            id: string;
            inclusive: boolean;
            jurisdiction?: string | null;
            livemode: boolean;
            metadata?: {
                [key: string]: string;
            } | null;
            object: "tax_rate";
            percentage: number;
            state?: string | null;
            tax_type?: "amusement_tax" | "communications_tax" | "gst" | "hst" | "igst" | "jct" | "lease_tax" | "pst" | "qst" | "rst" | "sales_tax" | "service_tax" | "vat" | null;
        };
        "terminal.configuration": {
            bbpos_wisepos_e?: components["schemas"]["terminal_configuration_configuration_resource_device_type_specific_config"];
            id: string;
            is_account_default?: boolean | null;
            livemode: boolean;
            object: "terminal.configuration";
            tipping?: components["schemas"]["terminal_configuration_configuration_resource_tipping"];
            verifone_p400?: components["schemas"]["terminal_configuration_configuration_resource_device_type_specific_config"];
        };
        "terminal.connection_token": {
            location?: string;
            object: "terminal.connection_token";
            secret: string;
        };
        "terminal.location": {
            address: components["schemas"]["address"];
            configuration_overrides?: string;
            display_name: string;
            id: string;
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            object: "terminal.location";
        };
        "terminal.reader": {
            action?: components["schemas"]["terminal_reader_reader_resource_reader_action"] | null;
            device_sw_version?: string | null;
            device_type: "bbpos_chipper2x" | "bbpos_wisepad3" | "bbpos_wisepos_e" | "simulated_wisepos_e" | "stripe_m2" | "verifone_P400";
            id: string;
            ip_address?: string | null;
            label: string;
            livemode: boolean;
            location?: (string | components["schemas"]["terminal.location"]) | null;
            metadata: {
                [key: string]: string;
            };
            object: "terminal.reader";
            serial_number: string;
            status?: string | null;
        };
        terminal_configuration_configuration_resource_currency_specific_config: {
            fixed_amounts?: number[] | null;
            percentages?: number[] | null;
            smart_tip_threshold?: number;
        };
        terminal_configuration_configuration_resource_device_type_specific_config: {
            splashscreen?: string | components["schemas"]["file"];
        };
        terminal_configuration_configuration_resource_tipping: {
            aud?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            cad?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            chf?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            czk?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            dkk?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            eur?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            gbp?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            hkd?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            myr?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            nok?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            nzd?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            sek?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            sgd?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
            usd?: components["schemas"]["terminal_configuration_configuration_resource_currency_specific_config"];
        };
        terminal_reader_reader_resource_cart: {
            currency: string;
            line_items: components["schemas"]["terminal_reader_reader_resource_line_item"][];
            tax?: number | null;
            total: number;
        };
        terminal_reader_reader_resource_line_item: {
            amount: number;
            description: string;
            quantity: number;
        };
        terminal_reader_reader_resource_process_config: {
            skip_tipping?: boolean;
            tipping?: components["schemas"]["terminal_reader_reader_resource_tipping_config"];
        };
        terminal_reader_reader_resource_process_payment_intent_action: {
            payment_intent: string | components["schemas"]["payment_intent"];
            process_config?: components["schemas"]["terminal_reader_reader_resource_process_config"];
        };
        terminal_reader_reader_resource_process_setup_config: Record<string, never>;
        terminal_reader_reader_resource_process_setup_intent_action: {
            generated_card?: string;
            process_config?: components["schemas"]["terminal_reader_reader_resource_process_setup_config"];
            setup_intent: string | components["schemas"]["setup_intent"];
        };
        terminal_reader_reader_resource_reader_action: {
            failure_code?: string | null;
            failure_message?: string | null;
            process_payment_intent?: components["schemas"]["terminal_reader_reader_resource_process_payment_intent_action"];
            process_setup_intent?: components["schemas"]["terminal_reader_reader_resource_process_setup_intent_action"];
            refund_payment?: components["schemas"]["terminal_reader_reader_resource_refund_payment_action"];
            set_reader_display?: components["schemas"]["terminal_reader_reader_resource_set_reader_display_action"];
            status: "failed" | "in_progress" | "succeeded";
            type: "process_payment_intent" | "process_setup_intent" | "refund_payment" | "set_reader_display";
        };
        terminal_reader_reader_resource_refund_payment_action: {
            amount?: number;
            charge?: string | components["schemas"]["charge"];
            metadata?: {
                [key: string]: string;
            };
            payment_intent?: string | components["schemas"]["payment_intent"];
            reason?: "duplicate" | "fraudulent" | "requested_by_customer";
            refund?: string | components["schemas"]["refund"];
            refund_application_fee?: boolean;
            reverse_transfer?: boolean;
        };
        terminal_reader_reader_resource_set_reader_display_action: {
            cart?: components["schemas"]["terminal_reader_reader_resource_cart"] | null;
            type: "cart";
        };
        terminal_reader_reader_resource_tipping_config: {
            amount_eligible?: number;
        };
        "test_helpers.test_clock": {
            created: number;
            deletes_after: number;
            frozen_time: number;
            id: string;
            livemode: boolean;
            name?: string | null;
            object: "test_helpers.test_clock";
            status: "advancing" | "internal_failure" | "ready";
        };
        three_d_secure_details: {
            authentication_flow?: "challenge" | "frictionless" | null;
            result?: "attempt_acknowledged" | "authenticated" | "exempted" | "failed" | "not_supported" | "processing_error" | null;
            result_reason?: "abandoned" | "bypassed" | "canceled" | "card_not_enrolled" | "network_not_supported" | "protocol_error" | "rejected" | null;
            version?: "1.0.2" | "2.1.0" | "2.2.0" | null;
        };
        three_d_secure_details_charge: {
            authentication_flow?: "challenge" | "frictionless" | null;
            result?: "attempt_acknowledged" | "authenticated" | "exempted" | "failed" | "not_supported" | "processing_error" | null;
            result_reason?: "abandoned" | "bypassed" | "canceled" | "card_not_enrolled" | "network_not_supported" | "protocol_error" | "rejected" | null;
            version?: "1.0.2" | "2.1.0" | "2.2.0" | null;
        };
        three_d_secure_usage: {
            supported: boolean;
        };
        token: {
            bank_account?: components["schemas"]["bank_account"];
            card?: components["schemas"]["card"];
            client_ip?: string | null;
            created: number;
            id: string;
            livemode: boolean;
            object: "token";
            type: string;
            used: boolean;
        };
        topup: {
            amount: number;
            balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            created: number;
            currency: string;
            description?: string | null;
            expected_availability_date?: number | null;
            failure_code?: string | null;
            failure_message?: string | null;
            id: string;
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            object: "topup";
            source?: components["schemas"]["source"] | null;
            statement_descriptor?: string | null;
            status: "canceled" | "failed" | "pending" | "reversed" | "succeeded";
            transfer_group?: string | null;
        };
        transfer: {
            amount: number;
            amount_reversed: number;
            balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            created: number;
            currency: string;
            description?: string | null;
            destination?: (string | components["schemas"]["account"]) | null;
            destination_payment?: string | components["schemas"]["charge"];
            id: string;
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            object: "transfer";
            reversals: {
                data: components["schemas"]["transfer_reversal"][];
                has_more: boolean;
                object: "list";
                url: string;
            };
            reversed: boolean;
            source_transaction?: (string | components["schemas"]["charge"]) | null;
            source_type?: string;
            transfer_group?: string | null;
        };
        transfer_data: {
            amount?: number;
            destination: string | components["schemas"]["account"];
        };
        transfer_reversal: {
            amount: number;
            balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
            created: number;
            currency: string;
            destination_payment_refund?: (string | components["schemas"]["refund"]) | null;
            id: string;
            metadata?: {
                [key: string]: string;
            } | null;
            object: "transfer_reversal";
            source_refund?: (string | components["schemas"]["refund"]) | null;
            transfer: string | components["schemas"]["transfer"];
        };
        transfer_schedule: {
            delay_days: number;
            interval: string;
            monthly_anchor?: number;
            weekly_anchor?: string;
        };
        transform_quantity: {
            divide_by: number;
            round: "down" | "up";
        };
        transform_usage: {
            divide_by: number;
            round: "down" | "up";
        };
        "treasury.credit_reversal": {
            amount: number;
            created: number;
            currency: string;
            financial_account: string;
            hosted_regulatory_receipt_url?: string | null;
            id: string;
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            network: "ach" | "stripe";
            object: "treasury.credit_reversal";
            received_credit: string;
            status: "canceled" | "posted" | "processing";
            status_transitions: components["schemas"]["treasury_received_credits_resource_status_transitions"];
            transaction?: (string | components["schemas"]["treasury.transaction"]) | null;
        };
        "treasury.debit_reversal": {
            amount: number;
            created: number;
            currency: string;
            financial_account?: string | null;
            hosted_regulatory_receipt_url?: string | null;
            id: string;
            linked_flows?: components["schemas"]["treasury_received_debits_resource_debit_reversal_linked_flows"] | null;
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            network: "ach" | "card";
            object: "treasury.debit_reversal";
            received_debit: string;
            status: "failed" | "processing" | "succeeded";
            status_transitions: components["schemas"]["treasury_received_debits_resource_status_transitions"];
            transaction?: (string | components["schemas"]["treasury.transaction"]) | null;
        };
        "treasury.financial_account": {
            active_features?: ("card_issuing" | "deposit_insurance" | "financial_addresses.aba" | "inbound_transfers.ach" | "intra_stripe_flows" | "outbound_payments.ach" | "outbound_payments.us_domestic_wire" | "outbound_transfers.ach" | "outbound_transfers.us_domestic_wire" | "remote_deposit_capture")[];
            balance: components["schemas"]["treasury_financial_accounts_resource_balance"];
            country: string;
            created: number;
            features?: components["schemas"]["treasury.financial_account_features"];
            financial_addresses: components["schemas"]["treasury_financial_accounts_resource_financial_address"][];
            id: string;
            livemode: boolean;
            metadata?: {
                [key: string]: string;
            } | null;
            object: "treasury.financial_account";
            pending_features?: ("card_issuing" | "deposit_insurance" | "financial_addresses.aba" | "inbound_transfers.ach" | "intra_stripe_flows" | "outbound_payments.ach" | "outbound_payments.us_domestic_wire" | "outbound_transfers.ach" | "outbound_transfers.us_domestic_wire" | "remote_deposit_capture")[];
            platform_restrictions?: components["schemas"]["treasury_financial_accounts_resource_platform_restrictions"] | null;
            restricted_features?: ("card_issuing" | "deposit_insurance" | "financial_addresses.aba" | "inbound_transfers.ach" | "intra_stripe_flows" | "outbound_payments.ach" | "outbound_payments.us_domestic_wire" | "outbound_transfers.ach" | "outbound_transfers.us_domestic_wire" | "remote_deposit_capture")[];
            status: "closed" | "open";
            status_details: components["schemas"]["treasury_financial_accounts_resource_status_details"];
            supported_currencies: string[];
        };
        "treasury.financial_account_features": {
            card_issuing?: components["schemas"]["treasury_financial_accounts_resource_toggle_settings"];
            deposit_insurance?: components["schemas"]["treasury_financial_accounts_resource_toggle_settings"];
            financial_addresses?: components["schemas"]["treasury_financial_accounts_resource_financial_addresses_features"];
            inbound_transfers?: components["schemas"]["treasury_financial_accounts_resource_inbound_transfers"];
            intra_stripe_flows?: components["schemas"]["treasury_financial_accounts_resource_toggle_settings"];
            object: "treasury.financial_account_features";
            outbound_payments?: components["schemas"]["treasury_financial_accounts_resource_outbound_payments"];
            outbound_transfers?: components["schemas"]["treasury_financial_accounts_resource_outbound_transfers"];
        };
        "treasury.inbound_transfer": {
            amount: number;
            cancelable: boolean;
            created: number;
            currency: string;
            description?: string | null;
            failure_details?: components["schemas"]["treasury_inbound_transfers_resource_failure_details"] | null;
            financial_account: string;
            hosted_regulatory_receipt_url?: string | null;
            id: string;
            linked_flows: components["schemas"]["treasury_inbound_transfers_resource_inbound_transfer_resource_linked_flows"];
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            object: "treasury.inbound_transfer";
            origin_payment_method: string;
            origin_payment_method_details?: components["schemas"]["inbound_transfers"] | null;
            returned?: boolean | null;
            statement_descriptor: string;
            status: "canceled" | "failed" | "processing" | "succeeded";
            status_transitions: components["schemas"]["treasury_inbound_transfers_resource_inbound_transfer_resource_status_transitions"];
            transaction?: (string | components["schemas"]["treasury.transaction"]) | null;
        };
        "treasury.outbound_payment": {
            amount: number;
            cancelable: boolean;
            created: number;
            currency: string;
            customer?: string | null;
            description?: string | null;
            destination_payment_method?: string | null;
            destination_payment_method_details?: components["schemas"]["outbound_payments_payment_method_details"] | null;
            end_user_details?: components["schemas"]["treasury_outbound_payments_resource_outbound_payment_resource_end_user_details"] | null;
            expected_arrival_date: number;
            financial_account: string;
            hosted_regulatory_receipt_url?: string | null;
            id: string;
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            object: "treasury.outbound_payment";
            returned_details?: components["schemas"]["treasury_outbound_payments_resource_returned_status"] | null;
            statement_descriptor: string;
            status: "canceled" | "failed" | "posted" | "processing" | "returned";
            status_transitions: components["schemas"]["treasury_outbound_payments_resource_outbound_payment_resource_status_transitions"];
            transaction: string | components["schemas"]["treasury.transaction"];
        };
        "treasury.outbound_transfer": {
            amount: number;
            cancelable: boolean;
            created: number;
            currency: string;
            description?: string | null;
            destination_payment_method?: string | null;
            destination_payment_method_details: components["schemas"]["outbound_transfers_payment_method_details"];
            expected_arrival_date: number;
            financial_account: string;
            hosted_regulatory_receipt_url?: string | null;
            id: string;
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            object: "treasury.outbound_transfer";
            returned_details?: components["schemas"]["treasury_outbound_transfers_resource_returned_details"] | null;
            statement_descriptor: string;
            status: "canceled" | "failed" | "posted" | "processing" | "returned";
            status_transitions: components["schemas"]["treasury_outbound_transfers_resource_status_transitions"];
            transaction: string | components["schemas"]["treasury.transaction"];
        };
        "treasury.received_credit": {
            amount: number;
            created: number;
            currency: string;
            description: string;
            failure_code?: "account_closed" | "account_frozen" | "other" | null;
            financial_account?: string | null;
            hosted_regulatory_receipt_url?: string | null;
            id: string;
            initiating_payment_method_details: components["schemas"]["treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details"];
            linked_flows: components["schemas"]["treasury_received_credits_resource_linked_flows"];
            livemode: boolean;
            network: "ach" | "card" | "stripe" | "us_domestic_wire";
            object: "treasury.received_credit";
            reversal_details?: components["schemas"]["treasury_received_credits_resource_reversal_details"] | null;
            status: "failed" | "succeeded";
            transaction?: (string | components["schemas"]["treasury.transaction"]) | null;
        };
        "treasury.received_debit": {
            amount: number;
            created: number;
            currency: string;
            description: string;
            failure_code?: "account_closed" | "account_frozen" | "insufficient_funds" | "other" | null;
            financial_account?: string | null;
            hosted_regulatory_receipt_url?: string | null;
            id: string;
            initiating_payment_method_details?: components["schemas"]["treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details"];
            linked_flows: components["schemas"]["treasury_received_debits_resource_linked_flows"];
            livemode: boolean;
            network: "ach" | "card" | "stripe";
            object: "treasury.received_debit";
            reversal_details?: components["schemas"]["treasury_received_debits_resource_reversal_details"] | null;
            status: "failed" | "succeeded";
            transaction?: (string | components["schemas"]["treasury.transaction"]) | null;
        };
        "treasury.transaction": {
            amount: number;
            balance_impact: components["schemas"]["treasury_transactions_resource_balance_impact"];
            created: number;
            currency: string;
            description: string;
            entries?: {
                data: components["schemas"]["treasury.transaction_entry"][];
                has_more: boolean;
                object: "list";
                url: string;
            } | null;
            financial_account: string;
            flow?: string | null;
            flow_details?: components["schemas"]["treasury_transactions_resource_flow_details"] | null;
            flow_type: "credit_reversal" | "debit_reversal" | "inbound_transfer" | "issuing_authorization" | "other" | "outbound_payment" | "outbound_transfer" | "received_credit" | "received_debit";
            id: string;
            livemode: boolean;
            object: "treasury.transaction";
            status: "open" | "posted" | "void";
            status_transitions: components["schemas"]["treasury_transactions_resource_abstract_transaction_resource_status_transitions"];
        };
        "treasury.transaction_entry": {
            balance_impact: components["schemas"]["treasury_transactions_resource_balance_impact"];
            created: number;
            currency: string;
            effective_at: number;
            financial_account: string;
            flow?: string | null;
            flow_details?: components["schemas"]["treasury_transactions_resource_flow_details"] | null;
            flow_type: "credit_reversal" | "debit_reversal" | "inbound_transfer" | "issuing_authorization" | "other" | "outbound_payment" | "outbound_transfer" | "received_credit" | "received_debit";
            id: string;
            livemode: boolean;
            object: "treasury.transaction_entry";
            transaction: string | components["schemas"]["treasury.transaction"];
            type: "credit_reversal" | "credit_reversal_posting" | "debit_reversal" | "inbound_transfer" | "inbound_transfer_return" | "issuing_authorization_hold" | "issuing_authorization_release" | "other" | "outbound_payment" | "outbound_payment_cancellation" | "outbound_payment_failure" | "outbound_payment_posting" | "outbound_payment_return" | "outbound_transfer" | "outbound_transfer_cancellation" | "outbound_transfer_failure" | "outbound_transfer_posting" | "outbound_transfer_return" | "received_credit" | "received_debit";
        };
        treasury_financial_accounts_resource_aba_record: {
            account_holder_name: string;
            account_number?: string | null;
            account_number_last4: string;
            bank_name: string;
            routing_number: string;
        };
        treasury_financial_accounts_resource_aba_toggle_settings: {
            requested: boolean;
            status: "active" | "pending" | "restricted";
            status_details: components["schemas"]["treasury_financial_accounts_resource_toggles_setting_status_details"][];
        };
        treasury_financial_accounts_resource_ach_toggle_settings: {
            requested: boolean;
            status: "active" | "pending" | "restricted";
            status_details: components["schemas"]["treasury_financial_accounts_resource_toggles_setting_status_details"][];
        };
        treasury_financial_accounts_resource_balance: {
            cash: {
                [key: string]: number;
            };
            inbound_pending: {
                [key: string]: number;
            };
            outbound_pending: {
                [key: string]: number;
            };
        };
        treasury_financial_accounts_resource_closed_status_details: {
            reasons: ("account_rejected" | "closed_by_platform" | "other")[];
        };
        treasury_financial_accounts_resource_financial_address: {
            aba?: components["schemas"]["treasury_financial_accounts_resource_aba_record"];
            supported_networks?: ("ach" | "us_domestic_wire")[];
            type: "aba";
        };
        treasury_financial_accounts_resource_financial_addresses_features: {
            aba?: components["schemas"]["treasury_financial_accounts_resource_aba_toggle_settings"];
        };
        treasury_financial_accounts_resource_inbound_transfers: {
            ach?: components["schemas"]["treasury_financial_accounts_resource_ach_toggle_settings"];
        };
        treasury_financial_accounts_resource_outbound_payments: {
            ach?: components["schemas"]["treasury_financial_accounts_resource_ach_toggle_settings"];
            us_domestic_wire?: components["schemas"]["treasury_financial_accounts_resource_toggle_settings"];
        };
        treasury_financial_accounts_resource_outbound_transfers: {
            ach?: components["schemas"]["treasury_financial_accounts_resource_ach_toggle_settings"];
            us_domestic_wire?: components["schemas"]["treasury_financial_accounts_resource_toggle_settings"];
        };
        treasury_financial_accounts_resource_platform_restrictions: {
            inbound_flows?: "restricted" | "unrestricted" | null;
            outbound_flows?: "restricted" | "unrestricted" | null;
        };
        treasury_financial_accounts_resource_status_details: {
            closed?: components["schemas"]["treasury_financial_accounts_resource_closed_status_details"] | null;
        };
        treasury_financial_accounts_resource_toggle_settings: {
            requested: boolean;
            status: "active" | "pending" | "restricted";
            status_details: components["schemas"]["treasury_financial_accounts_resource_toggles_setting_status_details"][];
        };
        treasury_financial_accounts_resource_toggles_setting_status_details: {
            code: "activating" | "capability_not_requested" | "financial_account_closed" | "rejected_other" | "rejected_unsupported_business" | "requirements_past_due" | "requirements_pending_verification" | "restricted_by_platform" | "restricted_other";
            resolution?: "contact_stripe" | "provide_information" | "remove_restriction" | null;
            restriction?: "inbound_flows" | "outbound_flows";
        };
        treasury_inbound_transfers_resource_failure_details: {
            code: "account_closed" | "account_frozen" | "bank_account_restricted" | "bank_ownership_changed" | "debit_not_authorized" | "incorrect_account_holder_address" | "incorrect_account_holder_name" | "incorrect_account_holder_tax_id" | "insufficient_funds" | "invalid_account_number" | "invalid_currency" | "no_account" | "other";
        };
        treasury_inbound_transfers_resource_inbound_transfer_resource_linked_flows: {
            received_debit?: string | null;
        };
        treasury_inbound_transfers_resource_inbound_transfer_resource_status_transitions: {
            canceled_at?: number | null;
            failed_at?: number | null;
            succeeded_at?: number | null;
        };
        treasury_outbound_payments_resource_outbound_payment_resource_end_user_details: {
            ip_address?: string | null;
            present: boolean;
        };
        treasury_outbound_payments_resource_outbound_payment_resource_status_transitions: {
            canceled_at?: number | null;
            failed_at?: number | null;
            posted_at?: number | null;
            returned_at?: number | null;
        };
        treasury_outbound_payments_resource_returned_status: {
            code: "account_closed" | "account_frozen" | "bank_account_restricted" | "bank_ownership_changed" | "declined" | "incorrect_account_holder_name" | "invalid_account_number" | "invalid_currency" | "no_account" | "other";
            transaction: string | components["schemas"]["treasury.transaction"];
        };
        treasury_outbound_transfers_resource_returned_details: {
            code: "account_closed" | "account_frozen" | "bank_account_restricted" | "bank_ownership_changed" | "declined" | "incorrect_account_holder_name" | "invalid_account_number" | "invalid_currency" | "no_account" | "other";
            transaction: string | components["schemas"]["treasury.transaction"];
        };
        treasury_outbound_transfers_resource_status_transitions: {
            canceled_at?: number | null;
            failed_at?: number | null;
            posted_at?: number | null;
            returned_at?: number | null;
        };
        treasury_received_credits_resource_linked_flows: {
            credit_reversal?: string | null;
            issuing_authorization?: string | null;
            issuing_transaction?: string | null;
            source_flow?: string | null;
            source_flow_details?: components["schemas"]["treasury_received_credits_resource_source_flows_details"] | null;
            source_flow_type?: string | null;
        };
        treasury_received_credits_resource_reversal_details: {
            deadline?: number | null;
            restricted_reason?: "already_reversed" | "deadline_passed" | "network_restricted" | "other" | "source_flow_restricted" | null;
        };
        treasury_received_credits_resource_source_flows_details: {
            credit_reversal?: components["schemas"]["treasury.credit_reversal"];
            outbound_payment?: components["schemas"]["treasury.outbound_payment"];
            payout?: components["schemas"]["payout"];
            type: "credit_reversal" | "other" | "outbound_payment" | "payout";
        };
        treasury_received_credits_resource_status_transitions: {
            posted_at?: number | null;
        };
        treasury_received_debits_resource_debit_reversal_linked_flows: {
            issuing_dispute?: string | null;
        };
        treasury_received_debits_resource_linked_flows: {
            debit_reversal?: string | null;
            inbound_transfer?: string | null;
            issuing_authorization?: string | null;
            issuing_transaction?: string | null;
        };
        treasury_received_debits_resource_reversal_details: {
            deadline?: number | null;
            restricted_reason?: "already_reversed" | "deadline_passed" | "network_restricted" | "other" | "source_flow_restricted" | null;
        };
        treasury_received_debits_resource_status_transitions: {
            completed_at?: number | null;
        };
        treasury_shared_resource_billing_details: {
            address: components["schemas"]["address"];
            email?: string | null;
            name?: string | null;
        };
        treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details: {
            balance?: "payments";
            billing_details: components["schemas"]["treasury_shared_resource_billing_details"];
            financial_account?: components["schemas"]["received_payment_method_details_financial_account"];
            issuing_card?: string;
            type: "balance" | "financial_account" | "issuing_card" | "stripe" | "us_bank_account";
            us_bank_account?: components["schemas"]["treasury_shared_resource_initiating_payment_method_details_us_bank_account"];
        };
        treasury_shared_resource_initiating_payment_method_details_us_bank_account: {
            bank_name?: string | null;
            last4?: string | null;
            routing_number?: string | null;
        };
        treasury_transactions_resource_abstract_transaction_resource_status_transitions: {
            posted_at?: number | null;
            void_at?: number | null;
        };
        treasury_transactions_resource_balance_impact: {
            cash: number;
            inbound_pending: number;
            outbound_pending: number;
        };
        treasury_transactions_resource_flow_details: {
            credit_reversal?: components["schemas"]["treasury.credit_reversal"];
            debit_reversal?: components["schemas"]["treasury.debit_reversal"];
            inbound_transfer?: components["schemas"]["treasury.inbound_transfer"];
            issuing_authorization?: components["schemas"]["issuing.authorization"];
            outbound_payment?: components["schemas"]["treasury.outbound_payment"];
            outbound_transfer?: components["schemas"]["treasury.outbound_transfer"];
            received_credit?: components["schemas"]["treasury.received_credit"];
            received_debit?: components["schemas"]["treasury.received_debit"];
            type: "credit_reversal" | "debit_reversal" | "inbound_transfer" | "issuing_authorization" | "other" | "outbound_payment" | "outbound_transfer" | "received_credit" | "received_debit";
        };
        us_bank_account_networks: {
            preferred?: string | null;
            supported: ("ach" | "us_domestic_wire")[];
        };
        usage_record: {
            id: string;
            livemode: boolean;
            object: "usage_record";
            quantity: number;
            subscription_item: string;
            timestamp: number;
        };
        usage_record_summary: {
            id: string;
            invoice?: string | null;
            livemode: boolean;
            object: "usage_record_summary";
            period: components["schemas"]["period"];
            subscription_item: string;
            total_usage: number;
        };
        verification_session_redaction: {
            status: "processing" | "redacted";
        };
        webhook_endpoint: {
            api_version?: string | null;
            application?: string | null;
            created: number;
            description?: string | null;
            enabled_events: string[];
            id: string;
            livemode: boolean;
            metadata: {
                [key: string]: string;
            };
            object: "webhook_endpoint";
            secret?: string;
            status: string;
            url: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type external = Record<string, never>;
export interface operations {
    GetAccount: {
        parameters: {
            query?: {
                expand?: string[];
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountLinks: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    account: string;
                    collect?: "currently_due" | "eventually_due";
                    expand?: string[];
                    refresh_url?: string;
                    return_url?: string;
                    type: "account_onboarding" | "account_update";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["account_link"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccounts: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["account"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccounts: {
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    account_token?: string;
                    bank_account?: ({
                        account_holder_name?: string;
                        account_holder_type?: "company" | "individual";
                        account_number: string;
                        account_type?: "checking" | "futsu" | "savings" | "toza";
                        country: string;
                        currency?: string;
                        documents?: {
                            bank_account_ownership_verification?: {
                                files?: string[];
                            };
                        };
                        object?: "bank_account";
                        routing_number?: string;
                    }) | string;
                    business_profile?: {
                        mcc?: string;
                        monthly_estimated_revenue?: {
                            amount: number;
                            currency: string;
                        };
                        name?: string;
                        product_description?: string;
                        support_address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        support_email?: string;
                        support_phone?: string;
                        support_url?: string | "";
                        url?: string;
                    };
                    business_type?: "company" | "government_entity" | "individual" | "non_profit";
                    capabilities?: {
                        acss_debit_payments?: {
                            requested?: boolean;
                        };
                        affirm_payments?: {
                            requested?: boolean;
                        };
                        afterpay_clearpay_payments?: {
                            requested?: boolean;
                        };
                        au_becs_debit_payments?: {
                            requested?: boolean;
                        };
                        bacs_debit_payments?: {
                            requested?: boolean;
                        };
                        bancontact_payments?: {
                            requested?: boolean;
                        };
                        bank_transfer_payments?: {
                            requested?: boolean;
                        };
                        blik_payments?: {
                            requested?: boolean;
                        };
                        boleto_payments?: {
                            requested?: boolean;
                        };
                        card_issuing?: {
                            requested?: boolean;
                        };
                        card_payments?: {
                            requested?: boolean;
                        };
                        cartes_bancaires_payments?: {
                            requested?: boolean;
                        };
                        cashapp_payments?: {
                            requested?: boolean;
                        };
                        eps_payments?: {
                            requested?: boolean;
                        };
                        fpx_payments?: {
                            requested?: boolean;
                        };
                        giropay_payments?: {
                            requested?: boolean;
                        };
                        grabpay_payments?: {
                            requested?: boolean;
                        };
                        ideal_payments?: {
                            requested?: boolean;
                        };
                        india_international_payments?: {
                            requested?: boolean;
                        };
                        jcb_payments?: {
                            requested?: boolean;
                        };
                        klarna_payments?: {
                            requested?: boolean;
                        };
                        konbini_payments?: {
                            requested?: boolean;
                        };
                        legacy_payments?: {
                            requested?: boolean;
                        };
                        link_payments?: {
                            requested?: boolean;
                        };
                        oxxo_payments?: {
                            requested?: boolean;
                        };
                        p24_payments?: {
                            requested?: boolean;
                        };
                        paynow_payments?: {
                            requested?: boolean;
                        };
                        promptpay_payments?: {
                            requested?: boolean;
                        };
                        sepa_debit_payments?: {
                            requested?: boolean;
                        };
                        sofort_payments?: {
                            requested?: boolean;
                        };
                        tax_reporting_us_1099_k?: {
                            requested?: boolean;
                        };
                        tax_reporting_us_1099_misc?: {
                            requested?: boolean;
                        };
                        transfers?: {
                            requested?: boolean;
                        };
                        treasury?: {
                            requested?: boolean;
                        };
                        us_bank_account_ach_payments?: {
                            requested?: boolean;
                        };
                        zip_payments?: {
                            requested?: boolean;
                        };
                    };
                    company?: {
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        address_kana?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        address_kanji?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        directors_provided?: boolean;
                        executives_provided?: boolean;
                        export_license_id?: string;
                        export_purpose_code?: string;
                        name?: string;
                        name_kana?: string;
                        name_kanji?: string;
                        owners_provided?: boolean;
                        ownership_declaration?: {
                            date?: number;
                            ip?: string;
                            user_agent?: string;
                        };
                        phone?: string;
                        registration_number?: string;
                        structure?: "" | "free_zone_establishment" | "free_zone_llc" | "government_instrumentality" | "governmental_unit" | "incorporated_non_profit" | "incorporated_partnership" | "limited_liability_partnership" | "llc" | "multi_member_llc" | "private_company" | "private_corporation" | "private_partnership" | "public_company" | "public_corporation" | "public_partnership" | "single_member_llc" | "sole_establishment" | "sole_proprietorship" | "tax_exempt_government_instrumentality" | "unincorporated_association" | "unincorporated_non_profit" | "unincorporated_partnership";
                        tax_id?: string;
                        tax_id_registrar?: string;
                        vat_id?: string;
                        verification?: {
                            document?: {
                                back?: string;
                                front?: string;
                            };
                        };
                    };
                    country?: string;
                    default_currency?: string;
                    documents?: {
                        bank_account_ownership_verification?: {
                            files?: string[];
                        };
                        company_license?: {
                            files?: string[];
                        };
                        company_memorandum_of_association?: {
                            files?: string[];
                        };
                        company_ministerial_decree?: {
                            files?: string[];
                        };
                        company_registration_verification?: {
                            files?: string[];
                        };
                        company_tax_id_verification?: {
                            files?: string[];
                        };
                        proof_of_registration?: {
                            files?: string[];
                        };
                    };
                    email?: string;
                    expand?: string[];
                    external_account?: string;
                    individual?: {
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        address_kana?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        address_kanji?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        dob?: {
                            day: number;
                            month: number;
                            year: number;
                        } | "";
                        email?: string;
                        first_name?: string;
                        first_name_kana?: string;
                        first_name_kanji?: string;
                        full_name_aliases?: string[] | "";
                        gender?: string;
                        id_number?: string;
                        id_number_secondary?: string;
                        last_name?: string;
                        last_name_kana?: string;
                        last_name_kanji?: string;
                        maiden_name?: string;
                        metadata?: {
                            [key: string]: string;
                        } | "";
                        phone?: string;
                        political_exposure?: "existing" | "none";
                        registered_address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        ssn_last_4?: string;
                        verification?: {
                            additional_document?: {
                                back?: string;
                                front?: string;
                            };
                            document?: {
                                back?: string;
                                front?: string;
                            };
                        };
                    };
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    settings?: {
                        branding?: {
                            icon?: string;
                            logo?: string;
                            primary_color?: string;
                            secondary_color?: string;
                        };
                        card_issuing?: {
                            tos_acceptance?: {
                                date?: number;
                                ip?: string;
                                user_agent?: string | "";
                            };
                        };
                        card_payments?: {
                            decline_on?: {
                                avs_failure?: boolean;
                                cvc_failure?: boolean;
                            };
                            statement_descriptor_prefix?: string;
                            statement_descriptor_prefix_kana?: string | "";
                            statement_descriptor_prefix_kanji?: string | "";
                        };
                        payments?: {
                            statement_descriptor?: string;
                            statement_descriptor_kana?: string;
                            statement_descriptor_kanji?: string;
                        };
                        payouts?: {
                            debit_negative_balances?: boolean;
                            schedule?: {
                                delay_days?: "minimum" | number;
                                interval?: "daily" | "manual" | "monthly" | "weekly";
                                monthly_anchor?: number;
                                weekly_anchor?: "friday" | "monday" | "saturday" | "sunday" | "thursday" | "tuesday" | "wednesday";
                            };
                            statement_descriptor?: string;
                        };
                        treasury?: {
                            tos_acceptance?: {
                                date?: number;
                                ip?: string;
                                user_agent?: string | "";
                            };
                        };
                    };
                    tos_acceptance?: {
                        date?: number;
                        ip?: string;
                        service_agreement?: string;
                        user_agent?: string;
                    };
                    type?: "custom" | "express" | "standard";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccount: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccount: {
        parameters: {
            path: {
                account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    account_token?: string;
                    business_profile?: {
                        mcc?: string;
                        monthly_estimated_revenue?: {
                            amount: number;
                            currency: string;
                        };
                        name?: string;
                        product_description?: string;
                        support_address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        support_email?: string;
                        support_phone?: string;
                        support_url?: string | "";
                        url?: string;
                    };
                    business_type?: "company" | "government_entity" | "individual" | "non_profit";
                    capabilities?: {
                        acss_debit_payments?: {
                            requested?: boolean;
                        };
                        affirm_payments?: {
                            requested?: boolean;
                        };
                        afterpay_clearpay_payments?: {
                            requested?: boolean;
                        };
                        au_becs_debit_payments?: {
                            requested?: boolean;
                        };
                        bacs_debit_payments?: {
                            requested?: boolean;
                        };
                        bancontact_payments?: {
                            requested?: boolean;
                        };
                        bank_transfer_payments?: {
                            requested?: boolean;
                        };
                        blik_payments?: {
                            requested?: boolean;
                        };
                        boleto_payments?: {
                            requested?: boolean;
                        };
                        card_issuing?: {
                            requested?: boolean;
                        };
                        card_payments?: {
                            requested?: boolean;
                        };
                        cartes_bancaires_payments?: {
                            requested?: boolean;
                        };
                        cashapp_payments?: {
                            requested?: boolean;
                        };
                        eps_payments?: {
                            requested?: boolean;
                        };
                        fpx_payments?: {
                            requested?: boolean;
                        };
                        giropay_payments?: {
                            requested?: boolean;
                        };
                        grabpay_payments?: {
                            requested?: boolean;
                        };
                        ideal_payments?: {
                            requested?: boolean;
                        };
                        india_international_payments?: {
                            requested?: boolean;
                        };
                        jcb_payments?: {
                            requested?: boolean;
                        };
                        klarna_payments?: {
                            requested?: boolean;
                        };
                        konbini_payments?: {
                            requested?: boolean;
                        };
                        legacy_payments?: {
                            requested?: boolean;
                        };
                        link_payments?: {
                            requested?: boolean;
                        };
                        oxxo_payments?: {
                            requested?: boolean;
                        };
                        p24_payments?: {
                            requested?: boolean;
                        };
                        paynow_payments?: {
                            requested?: boolean;
                        };
                        promptpay_payments?: {
                            requested?: boolean;
                        };
                        sepa_debit_payments?: {
                            requested?: boolean;
                        };
                        sofort_payments?: {
                            requested?: boolean;
                        };
                        tax_reporting_us_1099_k?: {
                            requested?: boolean;
                        };
                        tax_reporting_us_1099_misc?: {
                            requested?: boolean;
                        };
                        transfers?: {
                            requested?: boolean;
                        };
                        treasury?: {
                            requested?: boolean;
                        };
                        us_bank_account_ach_payments?: {
                            requested?: boolean;
                        };
                        zip_payments?: {
                            requested?: boolean;
                        };
                    };
                    company?: {
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        address_kana?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        address_kanji?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        directors_provided?: boolean;
                        executives_provided?: boolean;
                        export_license_id?: string;
                        export_purpose_code?: string;
                        name?: string;
                        name_kana?: string;
                        name_kanji?: string;
                        owners_provided?: boolean;
                        ownership_declaration?: {
                            date?: number;
                            ip?: string;
                            user_agent?: string;
                        };
                        phone?: string;
                        registration_number?: string;
                        structure?: "" | "free_zone_establishment" | "free_zone_llc" | "government_instrumentality" | "governmental_unit" | "incorporated_non_profit" | "incorporated_partnership" | "limited_liability_partnership" | "llc" | "multi_member_llc" | "private_company" | "private_corporation" | "private_partnership" | "public_company" | "public_corporation" | "public_partnership" | "single_member_llc" | "sole_establishment" | "sole_proprietorship" | "tax_exempt_government_instrumentality" | "unincorporated_association" | "unincorporated_non_profit" | "unincorporated_partnership";
                        tax_id?: string;
                        tax_id_registrar?: string;
                        vat_id?: string;
                        verification?: {
                            document?: {
                                back?: string;
                                front?: string;
                            };
                        };
                    };
                    default_currency?: string;
                    documents?: {
                        bank_account_ownership_verification?: {
                            files?: string[];
                        };
                        company_license?: {
                            files?: string[];
                        };
                        company_memorandum_of_association?: {
                            files?: string[];
                        };
                        company_ministerial_decree?: {
                            files?: string[];
                        };
                        company_registration_verification?: {
                            files?: string[];
                        };
                        company_tax_id_verification?: {
                            files?: string[];
                        };
                        proof_of_registration?: {
                            files?: string[];
                        };
                    };
                    email?: string;
                    expand?: string[];
                    external_account?: string;
                    individual?: {
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        address_kana?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        address_kanji?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        dob?: {
                            day: number;
                            month: number;
                            year: number;
                        } | "";
                        email?: string;
                        first_name?: string;
                        first_name_kana?: string;
                        first_name_kanji?: string;
                        full_name_aliases?: string[] | "";
                        gender?: string;
                        id_number?: string;
                        id_number_secondary?: string;
                        last_name?: string;
                        last_name_kana?: string;
                        last_name_kanji?: string;
                        maiden_name?: string;
                        metadata?: {
                            [key: string]: string;
                        } | "";
                        phone?: string;
                        political_exposure?: "existing" | "none";
                        registered_address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        ssn_last_4?: string;
                        verification?: {
                            additional_document?: {
                                back?: string;
                                front?: string;
                            };
                            document?: {
                                back?: string;
                                front?: string;
                            };
                        };
                    };
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    settings?: {
                        branding?: {
                            icon?: string;
                            logo?: string;
                            primary_color?: string;
                            secondary_color?: string;
                        };
                        card_issuing?: {
                            tos_acceptance?: {
                                date?: number;
                                ip?: string;
                                user_agent?: string | "";
                            };
                        };
                        card_payments?: {
                            decline_on?: {
                                avs_failure?: boolean;
                                cvc_failure?: boolean;
                            };
                            statement_descriptor_prefix?: string;
                            statement_descriptor_prefix_kana?: string | "";
                            statement_descriptor_prefix_kanji?: string | "";
                        };
                        payments?: {
                            statement_descriptor?: string;
                            statement_descriptor_kana?: string;
                            statement_descriptor_kanji?: string;
                        };
                        payouts?: {
                            debit_negative_balances?: boolean;
                            schedule?: {
                                delay_days?: "minimum" | number;
                                interval?: "daily" | "manual" | "monthly" | "weekly";
                                monthly_anchor?: number;
                                weekly_anchor?: "friday" | "monday" | "saturday" | "sunday" | "thursday" | "tuesday" | "wednesday";
                            };
                            statement_descriptor?: string;
                        };
                        treasury?: {
                            tos_acceptance?: {
                                date?: number;
                                ip?: string;
                                user_agent?: string | "";
                            };
                        };
                    };
                    tos_acceptance?: {
                        date?: number;
                        ip?: string;
                        service_agreement?: string;
                        user_agent?: string;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteAccountsAccount: {
        parameters: {
            path: {
                account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountBankAccounts: {
        parameters: {
            path: {
                account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    bank_account?: ({
                        account_holder_name?: string;
                        account_holder_type?: "company" | "individual";
                        account_number: string;
                        account_type?: "checking" | "futsu" | "savings" | "toza";
                        country: string;
                        currency?: string;
                        documents?: {
                            bank_account_ownership_verification?: {
                                files?: string[];
                            };
                        };
                        object?: "bank_account";
                        routing_number?: string;
                    }) | string;
                    default_for_currency?: boolean;
                    expand?: string[];
                    external_account?: string;
                    metadata?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["external_account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccountBankAccountsId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                account: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["external_account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountBankAccountsId: {
        parameters: {
            path: {
                account: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    account_holder_name?: string;
                    account_holder_type?: "" | "company" | "individual";
                    account_type?: "checking" | "futsu" | "savings" | "toza";
                    address_city?: string;
                    address_country?: string;
                    address_line1?: string;
                    address_line2?: string;
                    address_state?: string;
                    address_zip?: string;
                    default_for_currency?: boolean;
                    documents?: {
                        bank_account_ownership_verification?: {
                            files?: string[];
                        };
                    };
                    exp_month?: string;
                    exp_year?: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    name?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["external_account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteAccountsAccountBankAccountsId: {
        parameters: {
            path: {
                account: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_external_account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccountCapabilities: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["capability"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccountCapabilitiesCapability: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                account: string;
                capability: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["capability"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountCapabilitiesCapability: {
        parameters: {
            path: {
                account: string;
                capability: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    requested?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["capability"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccountExternalAccounts: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: (components["schemas"]["bank_account"] | components["schemas"]["card"])[];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountExternalAccounts: {
        parameters: {
            path: {
                account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    bank_account?: ({
                        account_holder_name?: string;
                        account_holder_type?: "company" | "individual";
                        account_number: string;
                        account_type?: "checking" | "futsu" | "savings" | "toza";
                        country: string;
                        currency?: string;
                        documents?: {
                            bank_account_ownership_verification?: {
                                files?: string[];
                            };
                        };
                        object?: "bank_account";
                        routing_number?: string;
                    }) | string;
                    default_for_currency?: boolean;
                    expand?: string[];
                    external_account?: string;
                    metadata?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["external_account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccountExternalAccountsId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                account: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["external_account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountExternalAccountsId: {
        parameters: {
            path: {
                account: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    account_holder_name?: string;
                    account_holder_type?: "" | "company" | "individual";
                    account_type?: "checking" | "futsu" | "savings" | "toza";
                    address_city?: string;
                    address_country?: string;
                    address_line1?: string;
                    address_line2?: string;
                    address_state?: string;
                    address_zip?: string;
                    default_for_currency?: boolean;
                    documents?: {
                        bank_account_ownership_verification?: {
                            files?: string[];
                        };
                    };
                    exp_month?: string;
                    exp_year?: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    name?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["external_account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteAccountsAccountExternalAccountsId: {
        parameters: {
            path: {
                account: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_external_account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountLoginLinks: {
        parameters: {
            path: {
                account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["login_link"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccountPeople: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                relationship?: {
                    director?: boolean;
                    executive?: boolean;
                    owner?: boolean;
                    representative?: boolean;
                };
                starting_after?: string;
            };
            path: {
                account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["person"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountPeople: {
        parameters: {
            path: {
                account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    address_kana?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                        town?: string;
                    };
                    address_kanji?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                        town?: string;
                    };
                    dob?: {
                        day: number;
                        month: number;
                        year: number;
                    } | "";
                    documents?: {
                        company_authorization?: {
                            files?: (string | "")[];
                        };
                        passport?: {
                            files?: (string | "")[];
                        };
                        visa?: {
                            files?: (string | "")[];
                        };
                    };
                    email?: string;
                    expand?: string[];
                    first_name?: string;
                    first_name_kana?: string;
                    first_name_kanji?: string;
                    full_name_aliases?: string[] | "";
                    gender?: string;
                    id_number?: string;
                    id_number_secondary?: string;
                    last_name?: string;
                    last_name_kana?: string;
                    last_name_kanji?: string;
                    maiden_name?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    nationality?: string;
                    person_token?: string;
                    phone?: string;
                    political_exposure?: string;
                    registered_address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    relationship?: {
                        director?: boolean;
                        executive?: boolean;
                        owner?: boolean;
                        percent_ownership?: number | "";
                        representative?: boolean;
                        title?: string;
                    };
                    ssn_last_4?: string;
                    verification?: {
                        additional_document?: {
                            back?: string;
                            front?: string;
                        };
                        document?: {
                            back?: string;
                            front?: string;
                        };
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["person"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccountPeoplePerson: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                account: string;
                person: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["person"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountPeoplePerson: {
        parameters: {
            path: {
                account: string;
                person: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    address_kana?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                        town?: string;
                    };
                    address_kanji?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                        town?: string;
                    };
                    dob?: {
                        day: number;
                        month: number;
                        year: number;
                    } | "";
                    documents?: {
                        company_authorization?: {
                            files?: (string | "")[];
                        };
                        passport?: {
                            files?: (string | "")[];
                        };
                        visa?: {
                            files?: (string | "")[];
                        };
                    };
                    email?: string;
                    expand?: string[];
                    first_name?: string;
                    first_name_kana?: string;
                    first_name_kanji?: string;
                    full_name_aliases?: string[] | "";
                    gender?: string;
                    id_number?: string;
                    id_number_secondary?: string;
                    last_name?: string;
                    last_name_kana?: string;
                    last_name_kanji?: string;
                    maiden_name?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    nationality?: string;
                    person_token?: string;
                    phone?: string;
                    political_exposure?: string;
                    registered_address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    relationship?: {
                        director?: boolean;
                        executive?: boolean;
                        owner?: boolean;
                        percent_ownership?: number | "";
                        representative?: boolean;
                        title?: string;
                    };
                    ssn_last_4?: string;
                    verification?: {
                        additional_document?: {
                            back?: string;
                            front?: string;
                        };
                        document?: {
                            back?: string;
                            front?: string;
                        };
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["person"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteAccountsAccountPeoplePerson: {
        parameters: {
            path: {
                account: string;
                person: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_person"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccountPersons: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                relationship?: {
                    director?: boolean;
                    executive?: boolean;
                    owner?: boolean;
                    representative?: boolean;
                };
                starting_after?: string;
            };
            path: {
                account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["person"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountPersons: {
        parameters: {
            path: {
                account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    address_kana?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                        town?: string;
                    };
                    address_kanji?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                        town?: string;
                    };
                    dob?: {
                        day: number;
                        month: number;
                        year: number;
                    } | "";
                    documents?: {
                        company_authorization?: {
                            files?: (string | "")[];
                        };
                        passport?: {
                            files?: (string | "")[];
                        };
                        visa?: {
                            files?: (string | "")[];
                        };
                    };
                    email?: string;
                    expand?: string[];
                    first_name?: string;
                    first_name_kana?: string;
                    first_name_kanji?: string;
                    full_name_aliases?: string[] | "";
                    gender?: string;
                    id_number?: string;
                    id_number_secondary?: string;
                    last_name?: string;
                    last_name_kana?: string;
                    last_name_kanji?: string;
                    maiden_name?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    nationality?: string;
                    person_token?: string;
                    phone?: string;
                    political_exposure?: string;
                    registered_address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    relationship?: {
                        director?: boolean;
                        executive?: boolean;
                        owner?: boolean;
                        percent_ownership?: number | "";
                        representative?: boolean;
                        title?: string;
                    };
                    ssn_last_4?: string;
                    verification?: {
                        additional_document?: {
                            back?: string;
                            front?: string;
                        };
                        document?: {
                            back?: string;
                            front?: string;
                        };
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["person"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAccountsAccountPersonsPerson: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                account: string;
                person: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["person"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountPersonsPerson: {
        parameters: {
            path: {
                account: string;
                person: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    address_kana?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                        town?: string;
                    };
                    address_kanji?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                        town?: string;
                    };
                    dob?: {
                        day: number;
                        month: number;
                        year: number;
                    } | "";
                    documents?: {
                        company_authorization?: {
                            files?: (string | "")[];
                        };
                        passport?: {
                            files?: (string | "")[];
                        };
                        visa?: {
                            files?: (string | "")[];
                        };
                    };
                    email?: string;
                    expand?: string[];
                    first_name?: string;
                    first_name_kana?: string;
                    first_name_kanji?: string;
                    full_name_aliases?: string[] | "";
                    gender?: string;
                    id_number?: string;
                    id_number_secondary?: string;
                    last_name?: string;
                    last_name_kana?: string;
                    last_name_kanji?: string;
                    maiden_name?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    nationality?: string;
                    person_token?: string;
                    phone?: string;
                    political_exposure?: string;
                    registered_address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    relationship?: {
                        director?: boolean;
                        executive?: boolean;
                        owner?: boolean;
                        percent_ownership?: number | "";
                        representative?: boolean;
                        title?: string;
                    };
                    ssn_last_4?: string;
                    verification?: {
                        additional_document?: {
                            back?: string;
                            front?: string;
                        };
                        document?: {
                            back?: string;
                            front?: string;
                        };
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["person"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteAccountsAccountPersonsPerson: {
        parameters: {
            path: {
                account: string;
                person: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_person"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAccountsAccountReject: {
        parameters: {
            path: {
                account: string;
            };
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    reason: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetApplePayDomains: {
        parameters: {
            query?: {
                domain_name?: string;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["apple_pay_domain"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostApplePayDomains: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    domain_name: string;
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["apple_pay_domain"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetApplePayDomainsDomain: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                domain: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["apple_pay_domain"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteApplePayDomainsDomain: {
        parameters: {
            path: {
                domain: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_apple_pay_domain"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetApplicationFees: {
        parameters: {
            query?: {
                charge?: string;
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["application_fee"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetApplicationFeesFeeRefundsId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                fee: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["fee_refund"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostApplicationFeesFeeRefundsId: {
        parameters: {
            path: {
                fee: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["fee_refund"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetApplicationFeesId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["application_fee"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostApplicationFeesIdRefund: {
        parameters: {
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    directive?: string;
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["application_fee"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetApplicationFeesIdRefunds: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["fee_refund"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostApplicationFeesIdRefunds: {
        parameters: {
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["fee_refund"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAppsSecrets: {
        parameters: {
            query: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                scope: {
                    type: "account" | "user";
                    user?: string;
                };
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["apps.secret"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAppsSecrets: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    expires_at?: number;
                    name: string;
                    payload: string;
                    scope: {
                        type: "account" | "user";
                        user?: string;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["apps.secret"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostAppsSecretsDelete: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    name: string;
                    scope: {
                        type: "account" | "user";
                        user?: string;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["apps.secret"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetAppsSecretsFind: {
        parameters: {
            query: {
                expand?: string[];
                name: string;
                scope: {
                    type: "account" | "user";
                    user?: string;
                };
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["apps.secret"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBalance: {
        parameters: {
            query?: {
                expand?: string[];
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["balance"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBalanceHistory: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                currency?: string;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                payout?: string;
                source?: string;
                starting_after?: string;
                type?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["balance_transaction"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBalanceHistoryId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["balance_transaction"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBalanceTransactions: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                currency?: string;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                payout?: string;
                source?: string;
                starting_after?: string;
                type?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["balance_transaction"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBalanceTransactionsId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["balance_transaction"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBillingPortalConfigurations: {
        parameters: {
            query?: {
                active?: boolean;
                ending_before?: string;
                expand?: string[];
                is_default?: boolean;
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["billing_portal.configuration"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingPortalConfigurations: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    business_profile: {
                        headline?: string | "";
                        privacy_policy_url?: string;
                        terms_of_service_url?: string;
                    };
                    default_return_url?: string | "";
                    expand?: string[];
                    features: {
                        customer_update?: {
                            allowed_updates?: (("address" | "email" | "name" | "phone" | "shipping" | "tax_id")[]) | "";
                            enabled: boolean;
                        };
                        invoice_history?: {
                            enabled: boolean;
                        };
                        payment_method_update?: {
                            enabled: boolean;
                        };
                        subscription_cancel?: {
                            cancellation_reason?: {
                                enabled: boolean;
                                options: (("customer_service" | "low_quality" | "missing_features" | "other" | "switched_service" | "too_complex" | "too_expensive" | "unused")[]) | "";
                            };
                            enabled: boolean;
                            mode?: "at_period_end" | "immediately";
                            proration_behavior?: "always_invoice" | "create_prorations" | "none";
                        };
                        subscription_pause?: {
                            enabled?: boolean;
                        };
                        subscription_update?: {
                            default_allowed_updates: (("price" | "promotion_code" | "quantity")[]) | "";
                            enabled: boolean;
                            products: {
                                prices: string[];
                                product: string;
                            }[] | "";
                            proration_behavior?: "always_invoice" | "create_prorations" | "none";
                        };
                    };
                    login_page?: {
                        enabled: boolean;
                    };
                    metadata?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["billing_portal.configuration"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetBillingPortalConfigurationsConfiguration: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                configuration: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["billing_portal.configuration"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingPortalConfigurationsConfiguration: {
        parameters: {
            path: {
                configuration: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    active?: boolean;
                    business_profile?: {
                        headline?: string | "";
                        privacy_policy_url?: string | "";
                        terms_of_service_url?: string | "";
                    };
                    default_return_url?: string | "";
                    expand?: string[];
                    features?: {
                        customer_update?: {
                            allowed_updates?: (("address" | "email" | "name" | "phone" | "shipping" | "tax_id")[]) | "";
                            enabled?: boolean;
                        };
                        invoice_history?: {
                            enabled: boolean;
                        };
                        payment_method_update?: {
                            enabled: boolean;
                        };
                        subscription_cancel?: {
                            cancellation_reason?: {
                                enabled: boolean;
                                options?: (("customer_service" | "low_quality" | "missing_features" | "other" | "switched_service" | "too_complex" | "too_expensive" | "unused")[]) | "";
                            };
                            enabled?: boolean;
                            mode?: "at_period_end" | "immediately";
                            proration_behavior?: "always_invoice" | "create_prorations" | "none";
                        };
                        subscription_pause?: {
                            enabled?: boolean;
                        };
                        subscription_update?: {
                            default_allowed_updates?: (("price" | "promotion_code" | "quantity")[]) | "";
                            enabled?: boolean;
                            products?: {
                                prices: string[];
                                product: string;
                            }[] | "";
                            proration_behavior?: "always_invoice" | "create_prorations" | "none";
                        };
                    };
                    login_page?: {
                        enabled: boolean;
                    };
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["billing_portal.configuration"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostBillingPortalSessions: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    configuration?: string;
                    customer: string;
                    expand?: string[];
                    flow_data?: {
                        after_completion?: {
                            hosted_confirmation?: {
                                custom_message?: string;
                            };
                            redirect?: {
                                return_url: string;
                            };
                            type: "hosted_confirmation" | "portal_homepage" | "redirect";
                        };
                        subscription_cancel?: {
                            subscription: string;
                        };
                        subscription_update?: {
                            subscription: string;
                        };
                        subscription_update_confirm?: {
                            discounts?: {
                                coupon?: string;
                                promotion_code?: string;
                            }[];
                            items: {
                                id: string;
                                price?: string;
                                quantity?: number;
                            }[];
                            subscription: string;
                        };
                        type: "payment_method_update" | "subscription_cancel" | "subscription_update" | "subscription_update_confirm";
                    };
                    locale?: "auto" | "bg" | "cs" | "da" | "de" | "el" | "en" | "en-AU" | "en-CA" | "en-GB" | "en-IE" | "en-IN" | "en-NZ" | "en-SG" | "es" | "es-419" | "et" | "fi" | "fil" | "fr" | "fr-CA" | "hr" | "hu" | "id" | "it" | "ja" | "ko" | "lt" | "lv" | "ms" | "mt" | "nb" | "nl" | "pl" | "pt" | "pt-BR" | "ro" | "ru" | "sk" | "sl" | "sv" | "th" | "tr" | "vi" | "zh" | "zh-HK" | "zh-TW";
                    on_behalf_of?: string;
                    return_url?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["billing_portal.session"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCharges: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                customer?: string;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                payment_intent?: string;
                starting_after?: string;
                transfer_group?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["charge"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCharges: {
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    application_fee?: number;
                    application_fee_amount?: number;
                    capture?: boolean;
                    card?: {
                        address_city?: string;
                        address_country?: string;
                        address_line1?: string;
                        address_line2?: string;
                        address_state?: string;
                        address_zip?: string;
                        cvc?: string;
                        exp_month: number;
                        exp_year: number;
                        metadata?: {
                            [key: string]: string;
                        };
                        name?: string;
                        number: string;
                        object?: "card";
                    } | string;
                    currency?: string;
                    customer?: string;
                    description?: string;
                    destination?: {
                        account: string;
                        amount?: number;
                    } | string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    on_behalf_of?: string;
                    radar_options?: {
                        session?: string;
                    };
                    receipt_email?: string;
                    shipping?: {
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        carrier?: string;
                        name: string;
                        phone?: string;
                        tracking_number?: string;
                    };
                    source?: string;
                    statement_descriptor?: string;
                    statement_descriptor_suffix?: string;
                    transfer_data?: {
                        amount?: number;
                        destination: string;
                    };
                    transfer_group?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["charge"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetChargesSearch: {
        parameters: {
            query: {
                expand?: string[];
                limit?: number;
                page?: string;
                query: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["charge"][];
                        has_more: boolean;
                        next_page?: string | null;
                        object: "search_result";
                        total_count?: number;
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetChargesCharge: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                charge: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["charge"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostChargesCharge: {
        parameters: {
            path: {
                charge: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    customer?: string;
                    description?: string;
                    expand?: string[];
                    fraud_details?: {
                        user_report: "" | "fraudulent" | "safe";
                    };
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    receipt_email?: string;
                    shipping?: {
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        carrier?: string;
                        name: string;
                        phone?: string;
                        tracking_number?: string;
                    };
                    transfer_group?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["charge"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostChargesChargeCapture: {
        parameters: {
            path: {
                charge: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    application_fee?: number;
                    application_fee_amount?: number;
                    expand?: string[];
                    receipt_email?: string;
                    statement_descriptor?: string;
                    statement_descriptor_suffix?: string;
                    transfer_data?: {
                        amount?: number;
                    };
                    transfer_group?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["charge"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetChargesChargeDispute: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                charge: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["dispute"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostChargesChargeDispute: {
        parameters: {
            path: {
                charge: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    evidence?: {
                        access_activity_log?: string;
                        billing_address?: string;
                        cancellation_policy?: string;
                        cancellation_policy_disclosure?: string;
                        cancellation_rebuttal?: string;
                        customer_communication?: string;
                        customer_email_address?: string;
                        customer_name?: string;
                        customer_purchase_ip?: string;
                        customer_signature?: string;
                        duplicate_charge_documentation?: string;
                        duplicate_charge_explanation?: string;
                        duplicate_charge_id?: string;
                        product_description?: string;
                        receipt?: string;
                        refund_policy?: string;
                        refund_policy_disclosure?: string;
                        refund_refusal_explanation?: string;
                        service_date?: string;
                        service_documentation?: string;
                        shipping_address?: string;
                        shipping_carrier?: string;
                        shipping_date?: string;
                        shipping_documentation?: string;
                        shipping_tracking_number?: string;
                        uncategorized_file?: string;
                        uncategorized_text?: string;
                    };
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    submit?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["dispute"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostChargesChargeDisputeClose: {
        parameters: {
            path: {
                charge: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["dispute"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostChargesChargeRefund: {
        parameters: {
            path: {
                charge: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    expand?: string[];
                    instructions_email?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    payment_intent?: string;
                    reason?: "duplicate" | "fraudulent" | "requested_by_customer";
                    refund_application_fee?: boolean;
                    reverse_transfer?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["charge"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetChargesChargeRefunds: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                charge: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["refund"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostChargesChargeRefunds: {
        parameters: {
            path: {
                charge: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    currency?: string;
                    customer?: string;
                    expand?: string[];
                    instructions_email?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    origin?: "customer_balance";
                    payment_intent?: string;
                    reason?: "duplicate" | "fraudulent" | "requested_by_customer";
                    refund_application_fee?: boolean;
                    reverse_transfer?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["refund"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetChargesChargeRefundsRefund: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                charge: string;
                refund: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["refund"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostChargesChargeRefundsRefund: {
        parameters: {
            path: {
                charge: string;
                refund: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["refund"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCheckoutSessions: {
        parameters: {
            query?: {
                customer?: string;
                customer_details?: {
                    email: string;
                };
                ending_before?: string;
                expand?: string[];
                limit?: number;
                payment_intent?: string;
                payment_link?: string;
                starting_after?: string;
                subscription?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["checkout.session"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCheckoutSessions: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    after_expiration?: {
                        recovery?: {
                            allow_promotion_codes?: boolean;
                            enabled: boolean;
                        };
                    };
                    allow_promotion_codes?: boolean;
                    automatic_tax?: {
                        enabled: boolean;
                    };
                    billing_address_collection?: "auto" | "required";
                    cancel_url?: string;
                    client_reference_id?: string;
                    consent_collection?: {
                        promotions?: "auto" | "none";
                        terms_of_service?: "none" | "required";
                    };
                    currency?: string;
                    custom_fields?: ({
                        dropdown?: {
                            options: {
                                label: string;
                                value: string;
                            }[];
                        };
                        key: string;
                        label: {
                            custom: string;
                            type: "custom";
                        };
                        numeric?: {
                            maximum_length?: number;
                            minimum_length?: number;
                        };
                        optional?: boolean;
                        text?: {
                            maximum_length?: number;
                            minimum_length?: number;
                        };
                        type: "dropdown" | "numeric" | "text";
                    })[];
                    custom_text?: {
                        shipping_address?: {
                            message: string;
                        } | "";
                        submit?: {
                            message: string;
                        } | "";
                    };
                    customer?: string;
                    customer_creation?: "always" | "if_required";
                    customer_email?: string;
                    customer_update?: {
                        address?: "auto" | "never";
                        name?: "auto" | "never";
                        shipping?: "auto" | "never";
                    };
                    discounts?: {
                        coupon?: string;
                        promotion_code?: string;
                    }[];
                    expand?: string[];
                    expires_at?: number;
                    invoice_creation?: {
                        enabled: boolean;
                        invoice_data?: {
                            account_tax_ids?: string[] | "";
                            custom_fields?: {
                                name: string;
                                value: string;
                            }[] | "";
                            description?: string;
                            footer?: string;
                            metadata?: {
                                [key: string]: string;
                            };
                            rendering_options?: ({
                                amount_tax_display?: "" | "exclude_tax" | "include_inclusive_tax";
                            }) | "";
                        };
                    };
                    line_items?: ({
                        adjustable_quantity?: {
                            enabled: boolean;
                            maximum?: number;
                            minimum?: number;
                        };
                        dynamic_tax_rates?: string[];
                        price?: string;
                        price_data?: {
                            currency: string;
                            product?: string;
                            product_data?: {
                                description?: string;
                                images?: string[];
                                metadata?: {
                                    [key: string]: string;
                                };
                                name: string;
                                tax_code?: string;
                            };
                            recurring?: {
                                interval: "day" | "month" | "week" | "year";
                                interval_count?: number;
                            };
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[];
                    })[];
                    locale?: "auto" | "bg" | "cs" | "da" | "de" | "el" | "en" | "en-GB" | "es" | "es-419" | "et" | "fi" | "fil" | "fr" | "fr-CA" | "hr" | "hu" | "id" | "it" | "ja" | "ko" | "lt" | "lv" | "ms" | "mt" | "nb" | "nl" | "pl" | "pt" | "pt-BR" | "ro" | "ru" | "sk" | "sl" | "sv" | "th" | "tr" | "vi" | "zh" | "zh-HK" | "zh-TW";
                    metadata?: {
                        [key: string]: string;
                    };
                    mode?: "payment" | "setup" | "subscription";
                    payment_intent_data?: {
                        application_fee_amount?: number;
                        capture_method?: "automatic" | "automatic_async" | "manual";
                        description?: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        on_behalf_of?: string;
                        receipt_email?: string;
                        setup_future_usage?: "off_session" | "on_session";
                        shipping?: {
                            address: {
                                city?: string;
                                country?: string;
                                line1: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            };
                            carrier?: string;
                            name: string;
                            phone?: string;
                            tracking_number?: string;
                        };
                        statement_descriptor?: string;
                        statement_descriptor_suffix?: string;
                        transfer_data?: {
                            amount?: number;
                            destination: string;
                        };
                        transfer_group?: string;
                    };
                    payment_method_collection?: "always" | "if_required";
                    payment_method_options?: {
                        acss_debit?: {
                            currency?: "cad" | "usd";
                            mandate_options?: {
                                custom_mandate_url?: string | "";
                                default_for?: ("invoice" | "subscription")[];
                                interval_description?: string;
                                payment_schedule?: "combined" | "interval" | "sporadic";
                                transaction_type?: "business" | "personal";
                            };
                            setup_future_usage?: "none" | "off_session" | "on_session";
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        };
                        affirm?: {
                            setup_future_usage?: "none";
                        };
                        afterpay_clearpay?: {
                            setup_future_usage?: "none";
                        };
                        alipay?: {
                            setup_future_usage?: "none";
                        };
                        au_becs_debit?: {
                            setup_future_usage?: "none";
                        };
                        bacs_debit?: {
                            setup_future_usage?: "none" | "off_session" | "on_session";
                        };
                        bancontact?: {
                            setup_future_usage?: "none";
                        };
                        boleto?: {
                            expires_after_days?: number;
                            setup_future_usage?: "none" | "off_session" | "on_session";
                        };
                        card?: {
                            installments?: {
                                enabled?: boolean;
                            };
                            setup_future_usage?: "off_session" | "on_session";
                            statement_descriptor_suffix_kana?: string;
                            statement_descriptor_suffix_kanji?: string;
                        };
                        cashapp?: {
                            setup_future_usage?: "none" | "off_session" | "on_session";
                        };
                        customer_balance?: {
                            bank_transfer?: {
                                eu_bank_transfer?: {
                                    country: string;
                                };
                                requested_address_types?: ("aba" | "iban" | "sepa" | "sort_code" | "spei" | "swift" | "zengin")[];
                                type: "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer";
                            };
                            funding_type?: "bank_transfer";
                            setup_future_usage?: "none";
                        };
                        eps?: {
                            setup_future_usage?: "none";
                        };
                        fpx?: {
                            setup_future_usage?: "none";
                        };
                        giropay?: {
                            setup_future_usage?: "none";
                        };
                        grabpay?: {
                            setup_future_usage?: "none";
                        };
                        ideal?: {
                            setup_future_usage?: "none";
                        };
                        klarna?: {
                            setup_future_usage?: "none";
                        };
                        konbini?: {
                            expires_after_days?: number;
                            setup_future_usage?: "none";
                        };
                        link?: {
                            setup_future_usage?: "none" | "off_session";
                        };
                        oxxo?: {
                            expires_after_days?: number;
                            setup_future_usage?: "none";
                        };
                        p24?: {
                            setup_future_usage?: "none";
                            tos_shown_and_accepted?: boolean;
                        };
                        paynow?: {
                            setup_future_usage?: "none";
                        };
                        paypal?: {
                            capture_method?: "" | "manual";
                            preferred_locale?: "cs-CZ" | "da-DK" | "de-AT" | "de-DE" | "de-LU" | "el-GR" | "en-GB" | "en-US" | "es-ES" | "fi-FI" | "fr-BE" | "fr-FR" | "fr-LU" | "hu-HU" | "it-IT" | "nl-BE" | "nl-NL" | "pl-PL" | "pt-PT" | "sk-SK" | "sv-SE";
                            reference?: string;
                            risk_correlation_id?: string;
                            setup_future_usage?: "" | "none" | "off_session";
                        };
                        pix?: {
                            expires_after_seconds?: number;
                        };
                        sepa_debit?: {
                            setup_future_usage?: "none" | "off_session" | "on_session";
                        };
                        sofort?: {
                            setup_future_usage?: "none";
                        };
                        us_bank_account?: {
                            financial_connections?: {
                                permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                            };
                            setup_future_usage?: "none" | "off_session" | "on_session";
                            verification_method?: "automatic" | "instant";
                        };
                        wechat_pay?: {
                            app_id?: string;
                            client: "android" | "ios" | "web";
                            setup_future_usage?: "none";
                        };
                    };
                    payment_method_types?: ("acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "card" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "klarna" | "konbini" | "link" | "oxxo" | "p24" | "paynow" | "paypal" | "pix" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay" | "zip")[];
                    phone_number_collection?: {
                        enabled: boolean;
                    };
                    setup_intent_data?: {
                        description?: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        on_behalf_of?: string;
                    };
                    shipping_address_collection?: {
                        allowed_countries: ("AC" | "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AO" | "AQ" | "AR" | "AT" | "AU" | "AW" | "AX" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BQ" | "BR" | "BS" | "BT" | "BV" | "BW" | "BY" | "BZ" | "CA" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CV" | "CW" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GF" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GP" | "GQ" | "GR" | "GS" | "GT" | "GU" | "GW" | "GY" | "HK" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MK" | "ML" | "MM" | "MN" | "MO" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SZ" | "TA" | "TC" | "TD" | "TF" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "US" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VN" | "VU" | "WF" | "WS" | "XK" | "YE" | "YT" | "ZA" | "ZM" | "ZW" | "ZZ")[];
                    };
                    shipping_options?: ({
                        shipping_rate?: string;
                        shipping_rate_data?: {
                            delivery_estimate?: {
                                maximum?: {
                                    unit: "business_day" | "day" | "hour" | "month" | "week";
                                    value: number;
                                };
                                minimum?: {
                                    unit: "business_day" | "day" | "hour" | "month" | "week";
                                    value: number;
                                };
                            };
                            display_name: string;
                            fixed_amount?: {
                                amount: number;
                                currency: string;
                                currency_options?: {
                                    [key: string]: {
                                        amount: number;
                                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                    };
                                };
                            };
                            metadata?: {
                                [key: string]: string;
                            };
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            tax_code?: string;
                            type?: "fixed_amount";
                        };
                    })[];
                    submit_type?: "auto" | "book" | "donate" | "pay";
                    subscription_data?: {
                        application_fee_percent?: number;
                        billing_cycle_anchor?: number;
                        default_tax_rates?: string[];
                        description?: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        on_behalf_of?: string;
                        proration_behavior?: "create_prorations" | "none";
                        transfer_data?: {
                            amount_percent?: number;
                            destination: string;
                        };
                        trial_end?: number;
                        trial_period_days?: number;
                        trial_settings?: {
                            end_behavior: {
                                missing_payment_method: "cancel" | "create_invoice" | "pause";
                            };
                        };
                    };
                    success_url: string;
                    tax_id_collection?: {
                        enabled: boolean;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["checkout.session"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCheckoutSessionsSession: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                session: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["checkout.session"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCheckoutSessionsSessionExpire: {
        parameters: {
            path: {
                session: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["checkout.session"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCheckoutSessionsSessionLineItems: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                session: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["item"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCountrySpecs: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["country_spec"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCountrySpecsCountry: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                country: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["country_spec"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCoupons: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["coupon"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCoupons: {
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount_off?: number;
                    applies_to?: {
                        products?: string[];
                    };
                    currency?: string;
                    currency_options?: {
                        [key: string]: {
                            amount_off: number;
                        };
                    };
                    duration?: "forever" | "once" | "repeating";
                    duration_in_months?: number;
                    expand?: string[];
                    id?: string;
                    max_redemptions?: number;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    name?: string;
                    percent_off?: number;
                    redeem_by?: number;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["coupon"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCouponsCoupon: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                coupon: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["coupon"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCouponsCoupon: {
        parameters: {
            path: {
                coupon: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    currency_options?: {
                        [key: string]: {
                            amount_off: number;
                        };
                    };
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    name?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["coupon"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteCouponsCoupon: {
        parameters: {
            path: {
                coupon: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_coupon"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCreditNotes: {
        parameters: {
            query?: {
                customer?: string;
                ending_before?: string;
                expand?: string[];
                invoice?: string;
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["credit_note"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCreditNotes: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    credit_amount?: number;
                    effective_at?: number;
                    expand?: string[];
                    invoice: string;
                    lines?: ({
                        amount?: number;
                        description?: string;
                        invoice_line_item?: string;
                        quantity?: number;
                        tax_rates?: string[] | "";
                        type: "custom_line_item" | "invoice_line_item";
                        unit_amount?: number;
                        unit_amount_decimal?: string;
                    })[];
                    memo?: string;
                    metadata?: {
                        [key: string]: string;
                    };
                    out_of_band_amount?: number;
                    reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
                    refund?: string;
                    refund_amount?: number;
                    shipping_cost?: {
                        shipping_rate?: string;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["credit_note"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCreditNotesPreview: {
        parameters: {
            query: {
                amount?: number;
                credit_amount?: number;
                effective_at?: number;
                expand?: string[];
                invoice: string;
                lines?: ({
                    amount?: number;
                    description?: string;
                    invoice_line_item?: string;
                    quantity?: number;
                    tax_rates?: string[] | "";
                    type: "custom_line_item" | "invoice_line_item";
                    unit_amount?: number;
                    unit_amount_decimal?: string;
                })[];
                memo?: string;
                metadata?: {
                    [key: string]: string;
                };
                out_of_band_amount?: number;
                reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
                refund?: string;
                refund_amount?: number;
                shipping_cost?: {
                    shipping_rate?: string;
                };
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["credit_note"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCreditNotesPreviewLines: {
        parameters: {
            query: {
                amount?: number;
                credit_amount?: number;
                effective_at?: number;
                ending_before?: string;
                expand?: string[];
                invoice: string;
                limit?: number;
                lines?: ({
                    amount?: number;
                    description?: string;
                    invoice_line_item?: string;
                    quantity?: number;
                    tax_rates?: string[] | "";
                    type: "custom_line_item" | "invoice_line_item";
                    unit_amount?: number;
                    unit_amount_decimal?: string;
                })[];
                memo?: string;
                metadata?: {
                    [key: string]: string;
                };
                out_of_band_amount?: number;
                reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
                refund?: string;
                refund_amount?: number;
                shipping_cost?: {
                    shipping_rate?: string;
                };
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["credit_note_line_item"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCreditNotesCreditNoteLines: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                credit_note: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["credit_note_line_item"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCreditNotesId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["credit_note"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCreditNotesId: {
        parameters: {
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    memo?: string;
                    metadata?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["credit_note"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCreditNotesIdVoid: {
        parameters: {
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["credit_note"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomers: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                email?: string;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
                test_clock?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["customer"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomers: {
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    } | "";
                    balance?: number;
                    cash_balance?: {
                        settings?: {
                            reconciliation_mode?: "automatic" | "manual" | "merchant_default";
                        };
                    };
                    coupon?: string;
                    description?: string;
                    email?: string;
                    expand?: string[];
                    invoice_prefix?: string;
                    invoice_settings?: {
                        custom_fields?: {
                            name: string;
                            value: string;
                        }[] | "";
                        default_payment_method?: string;
                        footer?: string;
                        rendering_options?: ({
                            amount_tax_display?: "" | "exclude_tax" | "include_inclusive_tax";
                        }) | "";
                    };
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    name?: string;
                    next_invoice_sequence?: number;
                    payment_method?: string;
                    phone?: string;
                    preferred_locales?: string[];
                    promotion_code?: string;
                    shipping?: {
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        name: string;
                        phone?: string;
                    } | "";
                    source?: string;
                    tax?: {
                        ip_address?: string | "";
                    };
                    tax_exempt?: "" | "exempt" | "none" | "reverse";
                    tax_id_data?: ({
                        type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bo_tin" | "br_cnpj" | "br_cpf" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "li_uid" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "no_vat" | "nz_gst" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "ua_vat" | "us_ein" | "uy_ruc" | "ve_rif" | "vn_tin" | "za_vat";
                        value: string;
                    })[];
                    test_clock?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["customer"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersSearch: {
        parameters: {
            query: {
                expand?: string[];
                limit?: number;
                page?: string;
                query: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["customer"][];
                        has_more: boolean;
                        next_page?: string | null;
                        object: "search_result";
                        total_count?: number;
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomer: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                customer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["customer"] | components["schemas"]["deleted_customer"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomer: {
        parameters: {
            path: {
                customer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    } | "";
                    balance?: number;
                    bank_account?: ({
                        account_holder_name?: string;
                        account_holder_type?: "company" | "individual";
                        account_number: string;
                        country: string;
                        currency?: string;
                        object?: "bank_account";
                        routing_number?: string;
                    }) | string;
                    card?: {
                        address_city?: string;
                        address_country?: string;
                        address_line1?: string;
                        address_line2?: string;
                        address_state?: string;
                        address_zip?: string;
                        cvc?: string;
                        exp_month: number;
                        exp_year: number;
                        metadata?: {
                            [key: string]: string;
                        };
                        name?: string;
                        number: string;
                        object?: "card";
                    } | string;
                    cash_balance?: {
                        settings?: {
                            reconciliation_mode?: "automatic" | "manual" | "merchant_default";
                        };
                    };
                    coupon?: string;
                    default_alipay_account?: string;
                    default_bank_account?: string;
                    default_card?: string;
                    default_source?: string;
                    description?: string;
                    email?: string;
                    expand?: string[];
                    invoice_prefix?: string;
                    invoice_settings?: {
                        custom_fields?: {
                            name: string;
                            value: string;
                        }[] | "";
                        default_payment_method?: string;
                        footer?: string;
                        rendering_options?: ({
                            amount_tax_display?: "" | "exclude_tax" | "include_inclusive_tax";
                        }) | "";
                    };
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    name?: string;
                    next_invoice_sequence?: number;
                    phone?: string;
                    preferred_locales?: string[];
                    promotion_code?: string;
                    shipping?: {
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        name: string;
                        phone?: string;
                    } | "";
                    source?: string;
                    tax?: {
                        ip_address?: string | "";
                    };
                    tax_exempt?: "" | "exempt" | "none" | "reverse";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["customer"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteCustomersCustomer: {
        parameters: {
            path: {
                customer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_customer"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerBalanceTransactions: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                customer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["customer_balance_transaction"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerBalanceTransactions: {
        parameters: {
            path: {
                customer: string;
            };
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount: number;
                    currency: string;
                    description?: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["customer_balance_transaction"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerBalanceTransactionsTransaction: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                customer: string;
                transaction: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["customer_balance_transaction"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerBalanceTransactionsTransaction: {
        parameters: {
            path: {
                customer: string;
                transaction: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    description?: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["customer_balance_transaction"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerBankAccounts: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                customer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["bank_account"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerBankAccounts: {
        parameters: {
            path: {
                customer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    alipay_account?: string;
                    bank_account?: ({
                        account_holder_name?: string;
                        account_holder_type?: "company" | "individual";
                        account_number: string;
                        country: string;
                        currency?: string;
                        object?: "bank_account";
                        routing_number?: string;
                    }) | string;
                    card?: {
                        address_city?: string;
                        address_country?: string;
                        address_line1?: string;
                        address_line2?: string;
                        address_state?: string;
                        address_zip?: string;
                        cvc?: string;
                        exp_month: number;
                        exp_year: number;
                        metadata?: {
                            [key: string]: string;
                        };
                        name?: string;
                        number: string;
                        object?: "card";
                    } | string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    };
                    source?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_source"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerBankAccountsId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                customer: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["bank_account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerBankAccountsId: {
        parameters: {
            path: {
                customer: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    account_holder_name?: string;
                    account_holder_type?: "company" | "individual";
                    address_city?: string;
                    address_country?: string;
                    address_line1?: string;
                    address_line2?: string;
                    address_state?: string;
                    address_zip?: string;
                    exp_month?: string;
                    exp_year?: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    name?: string;
                    owner?: {
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        email?: string;
                        name?: string;
                        phone?: string;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["card"] | components["schemas"]["bank_account"] | components["schemas"]["source"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteCustomersCustomerBankAccountsId: {
        parameters: {
            path: {
                customer: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_source"] | components["schemas"]["deleted_payment_source"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerBankAccountsIdVerify: {
        parameters: {
            path: {
                customer: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amounts?: number[];
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["bank_account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerCards: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                customer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["card"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerCards: {
        parameters: {
            path: {
                customer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    alipay_account?: string;
                    bank_account?: ({
                        account_holder_name?: string;
                        account_holder_type?: "company" | "individual";
                        account_number: string;
                        country: string;
                        currency?: string;
                        object?: "bank_account";
                        routing_number?: string;
                    }) | string;
                    card?: {
                        address_city?: string;
                        address_country?: string;
                        address_line1?: string;
                        address_line2?: string;
                        address_state?: string;
                        address_zip?: string;
                        cvc?: string;
                        exp_month: number;
                        exp_year: number;
                        metadata?: {
                            [key: string]: string;
                        };
                        name?: string;
                        number: string;
                        object?: "card";
                    } | string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    };
                    source?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_source"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerCardsId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                customer: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["card"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerCardsId: {
        parameters: {
            path: {
                customer: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    account_holder_name?: string;
                    account_holder_type?: "company" | "individual";
                    address_city?: string;
                    address_country?: string;
                    address_line1?: string;
                    address_line2?: string;
                    address_state?: string;
                    address_zip?: string;
                    exp_month?: string;
                    exp_year?: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    name?: string;
                    owner?: {
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        email?: string;
                        name?: string;
                        phone?: string;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["card"] | components["schemas"]["bank_account"] | components["schemas"]["source"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteCustomersCustomerCardsId: {
        parameters: {
            path: {
                customer: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_source"] | components["schemas"]["deleted_payment_source"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerCashBalance: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                customer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["cash_balance"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerCashBalance: {
        parameters: {
            path: {
                customer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    settings?: {
                        reconciliation_mode?: "automatic" | "manual" | "merchant_default";
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["cash_balance"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerCashBalanceTransactions: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                customer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["customer_cash_balance_transaction"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerCashBalanceTransactionsTransaction: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                customer: string;
                transaction: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["customer_cash_balance_transaction"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerDiscount: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                customer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["discount"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteCustomersCustomerDiscount: {
        parameters: {
            path: {
                customer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_discount"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerFundingInstructions: {
        parameters: {
            path: {
                customer: string;
            };
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    bank_transfer: {
                        eu_bank_transfer?: {
                            country: string;
                        };
                        requested_address_types?: ("iban" | "sort_code" | "spei" | "zengin")[];
                        type: "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer";
                    };
                    currency: string;
                    expand?: string[];
                    funding_type: "bank_transfer";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["funding_instructions"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerPaymentMethods: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
                type?: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "card" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "klarna" | "konbini" | "link" | "oxxo" | "p24" | "paynow" | "paypal" | "pix" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay" | "zip";
            };
            path: {
                customer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["payment_method"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerPaymentMethodsPaymentMethod: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                customer: string;
                payment_method: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_method"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerSources: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                object?: string;
                starting_after?: string;
            };
            path: {
                customer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: (components["schemas"]["bank_account"] | components["schemas"]["card"] | components["schemas"]["source"])[];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerSources: {
        parameters: {
            path: {
                customer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    alipay_account?: string;
                    bank_account?: ({
                        account_holder_name?: string;
                        account_holder_type?: "company" | "individual";
                        account_number: string;
                        country: string;
                        currency?: string;
                        object?: "bank_account";
                        routing_number?: string;
                    }) | string;
                    card?: {
                        address_city?: string;
                        address_country?: string;
                        address_line1?: string;
                        address_line2?: string;
                        address_state?: string;
                        address_zip?: string;
                        cvc?: string;
                        exp_month: number;
                        exp_year: number;
                        metadata?: {
                            [key: string]: string;
                        };
                        name?: string;
                        number: string;
                        object?: "card";
                    } | string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    };
                    source?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_source"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerSourcesId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                customer: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_source"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerSourcesId: {
        parameters: {
            path: {
                customer: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    account_holder_name?: string;
                    account_holder_type?: "company" | "individual";
                    address_city?: string;
                    address_country?: string;
                    address_line1?: string;
                    address_line2?: string;
                    address_state?: string;
                    address_zip?: string;
                    exp_month?: string;
                    exp_year?: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    name?: string;
                    owner?: {
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        email?: string;
                        name?: string;
                        phone?: string;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["card"] | components["schemas"]["bank_account"] | components["schemas"]["source"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteCustomersCustomerSourcesId: {
        parameters: {
            path: {
                customer: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_source"] | components["schemas"]["deleted_payment_source"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerSourcesIdVerify: {
        parameters: {
            path: {
                customer: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amounts?: number[];
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["bank_account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerSubscriptions: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                customer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["subscription"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerSubscriptions: {
        parameters: {
            path: {
                customer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    add_invoice_items?: ({
                        price?: string;
                        price_data?: {
                            currency: string;
                            product: string;
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    })[];
                    application_fee_percent?: number;
                    automatic_tax?: {
                        enabled: boolean;
                    };
                    backdate_start_date?: number;
                    billing_cycle_anchor?: number;
                    billing_thresholds?: {
                        amount_gte?: number;
                        reset_billing_cycle_anchor?: boolean;
                    } | "";
                    cancel_at?: number;
                    cancel_at_period_end?: boolean;
                    collection_method?: "charge_automatically" | "send_invoice";
                    coupon?: string;
                    currency?: string;
                    days_until_due?: number;
                    default_payment_method?: string;
                    default_source?: string;
                    default_tax_rates?: string[] | "";
                    expand?: string[];
                    items?: ({
                        billing_thresholds?: {
                            usage_gte: number;
                        } | "";
                        metadata?: {
                            [key: string]: string;
                        };
                        price?: string;
                        price_data?: {
                            currency: string;
                            product: string;
                            recurring: {
                                interval: "day" | "month" | "week" | "year";
                                interval_count?: number;
                            };
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    })[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    off_session?: boolean;
                    payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
                    payment_settings?: {
                        payment_method_options?: {
                            acss_debit?: ({
                                mandate_options?: {
                                    transaction_type?: "business" | "personal";
                                };
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            }) | "";
                            bancontact?: ({
                                preferred_language?: "de" | "en" | "fr" | "nl";
                            }) | "";
                            card?: ({
                                mandate_options?: {
                                    amount?: number;
                                    amount_type?: "fixed" | "maximum";
                                    description?: string;
                                };
                                network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "interac" | "jcb" | "mastercard" | "unionpay" | "unknown" | "visa";
                                request_three_d_secure?: "any" | "automatic";
                            }) | "";
                            customer_balance?: {
                                bank_transfer?: {
                                    eu_bank_transfer?: {
                                        country: string;
                                    };
                                    type?: string;
                                };
                                funding_type?: string;
                            } | "";
                            konbini?: Record<string, never> | "";
                            us_bank_account?: ({
                                financial_connections?: {
                                    permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                };
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            }) | "";
                        };
                        payment_method_types?: (("ach_credit_transfer" | "ach_debit" | "acss_debit" | "au_becs_debit" | "bacs_debit" | "bancontact" | "boleto" | "card" | "cashapp" | "customer_balance" | "fpx" | "giropay" | "grabpay" | "ideal" | "konbini" | "link" | "paynow" | "paypal" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay")[]) | "";
                        save_default_payment_method?: "off" | "on_subscription";
                    };
                    pending_invoice_item_interval?: ({
                        interval: "day" | "month" | "week" | "year";
                        interval_count?: number;
                    }) | "";
                    promotion_code?: string;
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                    transfer_data?: {
                        amount_percent?: number;
                        destination: string;
                    };
                    trial_end?: "now" | number;
                    trial_from_plan?: boolean;
                    trial_period_days?: number;
                    trial_settings?: {
                        end_behavior: {
                            missing_payment_method: "cancel" | "create_invoice" | "pause";
                        };
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerSubscriptionsSubscriptionExposedId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                customer: string;
                subscription_exposed_id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerSubscriptionsSubscriptionExposedId: {
        parameters: {
            path: {
                customer: string;
                subscription_exposed_id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    add_invoice_items?: ({
                        price?: string;
                        price_data?: {
                            currency: string;
                            product: string;
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    })[];
                    application_fee_percent?: number;
                    automatic_tax?: {
                        enabled: boolean;
                    };
                    billing_cycle_anchor?: "now" | "unchanged";
                    billing_thresholds?: {
                        amount_gte?: number;
                        reset_billing_cycle_anchor?: boolean;
                    } | "";
                    cancel_at?: number | "";
                    cancel_at_period_end?: boolean;
                    cancellation_details?: {
                        comment?: string | "";
                        feedback?: "" | "customer_service" | "low_quality" | "missing_features" | "other" | "switched_service" | "too_complex" | "too_expensive" | "unused";
                    };
                    collection_method?: "charge_automatically" | "send_invoice";
                    coupon?: string;
                    days_until_due?: number;
                    default_payment_method?: string;
                    default_source?: string | "";
                    default_tax_rates?: string[] | "";
                    expand?: string[];
                    items?: ({
                        billing_thresholds?: {
                            usage_gte: number;
                        } | "";
                        clear_usage?: boolean;
                        deleted?: boolean;
                        id?: string;
                        metadata?: {
                            [key: string]: string;
                        } | "";
                        price?: string;
                        price_data?: {
                            currency: string;
                            product: string;
                            recurring: {
                                interval: "day" | "month" | "week" | "year";
                                interval_count?: number;
                            };
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    })[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    off_session?: boolean;
                    pause_collection?: ({
                        behavior: "keep_as_draft" | "mark_uncollectible" | "void";
                        resumes_at?: number;
                    }) | "";
                    payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
                    payment_settings?: {
                        payment_method_options?: {
                            acss_debit?: ({
                                mandate_options?: {
                                    transaction_type?: "business" | "personal";
                                };
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            }) | "";
                            bancontact?: ({
                                preferred_language?: "de" | "en" | "fr" | "nl";
                            }) | "";
                            card?: ({
                                mandate_options?: {
                                    amount?: number;
                                    amount_type?: "fixed" | "maximum";
                                    description?: string;
                                };
                                network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "interac" | "jcb" | "mastercard" | "unionpay" | "unknown" | "visa";
                                request_three_d_secure?: "any" | "automatic";
                            }) | "";
                            customer_balance?: {
                                bank_transfer?: {
                                    eu_bank_transfer?: {
                                        country: string;
                                    };
                                    type?: string;
                                };
                                funding_type?: string;
                            } | "";
                            konbini?: Record<string, never> | "";
                            us_bank_account?: ({
                                financial_connections?: {
                                    permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                };
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            }) | "";
                        };
                        payment_method_types?: (("ach_credit_transfer" | "ach_debit" | "acss_debit" | "au_becs_debit" | "bacs_debit" | "bancontact" | "boleto" | "card" | "cashapp" | "customer_balance" | "fpx" | "giropay" | "grabpay" | "ideal" | "konbini" | "link" | "paynow" | "paypal" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay")[]) | "";
                        save_default_payment_method?: "off" | "on_subscription";
                    };
                    pending_invoice_item_interval?: ({
                        interval: "day" | "month" | "week" | "year";
                        interval_count?: number;
                    }) | "";
                    promotion_code?: string;
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                    proration_date?: number;
                    transfer_data?: {
                        amount_percent?: number;
                        destination: string;
                    } | "";
                    trial_end?: "now" | number;
                    trial_from_plan?: boolean;
                    trial_settings?: {
                        end_behavior: {
                            missing_payment_method: "cancel" | "create_invoice" | "pause";
                        };
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteCustomersCustomerSubscriptionsSubscriptionExposedId: {
        parameters: {
            path: {
                customer: string;
                subscription_exposed_id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    invoice_now?: boolean;
                    prorate?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                customer: string;
                subscription_exposed_id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["discount"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount: {
        parameters: {
            path: {
                customer: string;
                subscription_exposed_id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_discount"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerTaxIds: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                customer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["tax_id"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostCustomersCustomerTaxIds: {
        parameters: {
            path: {
                customer: string;
            };
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bo_tin" | "br_cnpj" | "br_cpf" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "li_uid" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "no_vat" | "nz_gst" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "ua_vat" | "us_ein" | "uy_ruc" | "ve_rif" | "vn_tin" | "za_vat";
                    value: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["tax_id"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetCustomersCustomerTaxIdsId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                customer: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["tax_id"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteCustomersCustomerTaxIdsId: {
        parameters: {
            path: {
                customer: string;
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_tax_id"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetDisputes: {
        parameters: {
            query?: {
                charge?: string;
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                payment_intent?: string;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["dispute"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetDisputesDispute: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                dispute: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["dispute"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostDisputesDispute: {
        parameters: {
            path: {
                dispute: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    evidence?: {
                        access_activity_log?: string;
                        billing_address?: string;
                        cancellation_policy?: string;
                        cancellation_policy_disclosure?: string;
                        cancellation_rebuttal?: string;
                        customer_communication?: string;
                        customer_email_address?: string;
                        customer_name?: string;
                        customer_purchase_ip?: string;
                        customer_signature?: string;
                        duplicate_charge_documentation?: string;
                        duplicate_charge_explanation?: string;
                        duplicate_charge_id?: string;
                        product_description?: string;
                        receipt?: string;
                        refund_policy?: string;
                        refund_policy_disclosure?: string;
                        refund_refusal_explanation?: string;
                        service_date?: string;
                        service_documentation?: string;
                        shipping_address?: string;
                        shipping_carrier?: string;
                        shipping_date?: string;
                        shipping_documentation?: string;
                        shipping_tracking_number?: string;
                        uncategorized_file?: string;
                        uncategorized_text?: string;
                    };
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    submit?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["dispute"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostDisputesDisputeClose: {
        parameters: {
            path: {
                dispute: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["dispute"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostEphemeralKeys: {
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    customer?: string;
                    expand?: string[];
                    issuing_card?: string;
                    verification_session?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["ephemeral_key"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteEphemeralKeysKey: {
        parameters: {
            path: {
                key: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["ephemeral_key"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetEvents: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                delivery_success?: boolean;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
                type?: string;
                types?: string[];
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["event"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetEventsId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["event"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetExchangeRates: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["exchange_rate"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetExchangeRatesRateId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                rate_id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["exchange_rate"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetFileLinks: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                expired?: boolean;
                file?: string;
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["file_link"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostFileLinks: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    expires_at?: number;
                    file: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["file_link"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetFileLinksLink: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                link: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["file_link"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostFileLinksLink: {
        parameters: {
            path: {
                link: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    expires_at?: "now" | number | "";
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["file_link"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetFiles: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                purpose?: "account_requirement" | "additional_verification" | "business_icon" | "business_logo" | "customer_signature" | "dispute_evidence" | "document_provider_identity_document" | "finance_report_run" | "identity_document" | "identity_document_downloadable" | "pci_document" | "selfie" | "sigma_scheduled_query" | "tax_document_user_upload" | "terminal_reader_splashscreen";
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["file"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostFiles: {
        requestBody: {
            content: {
                "multipart/form-data": {
                    expand?: string[];
                    file: string;
                    file_link_data?: {
                        create: boolean;
                        expires_at?: number;
                        metadata?: {
                            [key: string]: string;
                        } | "";
                    };
                    purpose: "account_requirement" | "additional_verification" | "business_icon" | "business_logo" | "customer_signature" | "dispute_evidence" | "identity_document" | "pci_document" | "tax_document_user_upload" | "terminal_reader_splashscreen";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["file"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetFilesFile: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                file: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["file"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetFinancialConnectionsAccounts: {
        parameters: {
            query?: {
                account_holder?: {
                    account?: string;
                    customer?: string;
                };
                ending_before?: string;
                expand?: string[];
                limit?: number;
                session?: string;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["financial_connections.account"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetFinancialConnectionsAccountsAccount: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["financial_connections.account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostFinancialConnectionsAccountsAccountDisconnect: {
        parameters: {
            path: {
                account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["financial_connections.account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetFinancialConnectionsAccountsAccountOwners: {
        parameters: {
            query: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                ownership: string;
                starting_after?: string;
            };
            path: {
                account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["financial_connections.account_owner"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostFinancialConnectionsAccountsAccountRefresh: {
        parameters: {
            path: {
                account: string;
            };
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    features: ("balance" | "ownership")[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["financial_connections.account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostFinancialConnectionsSessions: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    account_holder: {
                        account?: string;
                        customer?: string;
                        type: "account" | "customer";
                    };
                    expand?: string[];
                    filters?: {
                        countries: string[];
                    };
                    permissions: ("balances" | "ownership" | "payment_method" | "transactions")[];
                    return_url?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["financial_connections.session"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetFinancialConnectionsSessionsSession: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                session: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["financial_connections.session"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIdentityVerificationReports: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
                type?: "document" | "id_number";
                verification_session?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["identity.verification_report"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIdentityVerificationReportsReport: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                report: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["identity.verification_report"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIdentityVerificationSessions: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
                status?: "canceled" | "processing" | "requires_input" | "verified";
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["identity.verification_session"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIdentityVerificationSessions: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    };
                    options?: {
                        document?: ({
                            allowed_types?: ("driving_license" | "id_card" | "passport")[];
                            require_id_number?: boolean;
                            require_live_capture?: boolean;
                            require_matching_selfie?: boolean;
                        }) | "";
                    };
                    return_url?: string;
                    type: "document" | "id_number";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["identity.verification_session"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIdentityVerificationSessionsSession: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                session: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["identity.verification_session"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIdentityVerificationSessionsSession: {
        parameters: {
            path: {
                session: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    };
                    options?: {
                        document?: ({
                            allowed_types?: ("driving_license" | "id_card" | "passport")[];
                            require_id_number?: boolean;
                            require_live_capture?: boolean;
                            require_matching_selfie?: boolean;
                        }) | "";
                    };
                    type?: "document" | "id_number";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["identity.verification_session"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIdentityVerificationSessionsSessionCancel: {
        parameters: {
            path: {
                session: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["identity.verification_session"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIdentityVerificationSessionsSessionRedact: {
        parameters: {
            path: {
                session: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["identity.verification_session"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetInvoiceitems: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                customer?: string;
                ending_before?: string;
                expand?: string[];
                invoice?: string;
                limit?: number;
                pending?: boolean;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["invoiceitem"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoiceitems: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    currency?: string;
                    customer: string;
                    description?: string;
                    discountable?: boolean;
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                    }[] | "";
                    expand?: string[];
                    invoice?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    period?: {
                        end: number;
                        start: number;
                    };
                    price?: string;
                    price_data?: {
                        currency: string;
                        product: string;
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        unit_amount?: number;
                        unit_amount_decimal?: string;
                    };
                    quantity?: number;
                    subscription?: string;
                    tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                    tax_code?: string | "";
                    tax_rates?: string[];
                    unit_amount?: number;
                    unit_amount_decimal?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["invoiceitem"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetInvoiceitemsInvoiceitem: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                invoiceitem: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["invoiceitem"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoiceitemsInvoiceitem: {
        parameters: {
            path: {
                invoiceitem: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    description?: string;
                    discountable?: boolean;
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                    }[] | "";
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    period?: {
                        end: number;
                        start: number;
                    };
                    price?: string;
                    price_data?: {
                        currency: string;
                        product: string;
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        unit_amount?: number;
                        unit_amount_decimal?: string;
                    };
                    quantity?: number;
                    tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                    tax_code?: string | "";
                    tax_rates?: string[] | "";
                    unit_amount?: number;
                    unit_amount_decimal?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["invoiceitem"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteInvoiceitemsInvoiceitem: {
        parameters: {
            path: {
                invoiceitem: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_invoiceitem"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetInvoices: {
        parameters: {
            query?: {
                collection_method?: "charge_automatically" | "send_invoice";
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                customer?: string;
                due_date?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
                status?: "draft" | "open" | "paid" | "uncollectible" | "void";
                subscription?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["invoice"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoices: {
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    account_tax_ids?: string[] | "";
                    application_fee_amount?: number;
                    auto_advance?: boolean;
                    automatic_tax?: {
                        enabled: boolean;
                    };
                    collection_method?: "charge_automatically" | "send_invoice";
                    currency?: string;
                    custom_fields?: {
                        name: string;
                        value: string;
                    }[] | "";
                    customer?: string;
                    days_until_due?: number;
                    default_payment_method?: string;
                    default_source?: string;
                    default_tax_rates?: string[];
                    description?: string;
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                    }[] | "";
                    due_date?: number;
                    effective_at?: number;
                    expand?: string[];
                    footer?: string;
                    from_invoice?: {
                        action: "revision";
                        invoice: string;
                    };
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    on_behalf_of?: string;
                    payment_settings?: {
                        default_mandate?: string | "";
                        payment_method_options?: {
                            acss_debit?: ({
                                mandate_options?: {
                                    transaction_type?: "business" | "personal";
                                };
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            }) | "";
                            bancontact?: ({
                                preferred_language?: "de" | "en" | "fr" | "nl";
                            }) | "";
                            card?: ({
                                installments?: {
                                    enabled?: boolean;
                                    plan?: {
                                        count: number;
                                        interval: "month";
                                        type: "fixed_count";
                                    } | "";
                                };
                                request_three_d_secure?: "any" | "automatic";
                            }) | "";
                            customer_balance?: {
                                bank_transfer?: {
                                    eu_bank_transfer?: {
                                        country: string;
                                    };
                                    type?: string;
                                };
                                funding_type?: string;
                            } | "";
                            konbini?: Record<string, never> | "";
                            us_bank_account?: ({
                                financial_connections?: {
                                    permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                };
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            }) | "";
                        };
                        payment_method_types?: (("ach_credit_transfer" | "ach_debit" | "acss_debit" | "au_becs_debit" | "bacs_debit" | "bancontact" | "boleto" | "card" | "cashapp" | "customer_balance" | "fpx" | "giropay" | "grabpay" | "ideal" | "konbini" | "link" | "paynow" | "paypal" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay")[]) | "";
                    };
                    pending_invoice_items_behavior?: "exclude" | "include" | "include_and_require";
                    rendering_options?: ({
                        amount_tax_display?: "" | "exclude_tax" | "include_inclusive_tax";
                    }) | "";
                    shipping_cost?: {
                        shipping_rate?: string;
                        shipping_rate_data?: {
                            delivery_estimate?: {
                                maximum?: {
                                    unit: "business_day" | "day" | "hour" | "month" | "week";
                                    value: number;
                                };
                                minimum?: {
                                    unit: "business_day" | "day" | "hour" | "month" | "week";
                                    value: number;
                                };
                            };
                            display_name: string;
                            fixed_amount?: {
                                amount: number;
                                currency: string;
                                currency_options?: {
                                    [key: string]: {
                                        amount: number;
                                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                    };
                                };
                            };
                            metadata?: {
                                [key: string]: string;
                            };
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            tax_code?: string;
                            type?: "fixed_amount";
                        };
                    };
                    shipping_details?: {
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        name: string;
                        phone?: string | "";
                    };
                    statement_descriptor?: string;
                    subscription?: string;
                    transfer_data?: {
                        amount?: number;
                        destination: string;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetInvoicesSearch: {
        parameters: {
            query: {
                expand?: string[];
                limit?: number;
                page?: string;
                query: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["invoice"][];
                        has_more: boolean;
                        next_page?: string | null;
                        object: "search_result";
                        total_count?: number;
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetInvoicesUpcoming: {
        parameters: {
            query?: {
                automatic_tax?: {
                    enabled: boolean;
                };
                coupon?: string;
                currency?: string;
                customer?: string;
                customer_details?: {
                    address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    } | "";
                    shipping?: {
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        name: string;
                        phone?: string;
                    } | "";
                    tax?: {
                        ip_address?: string | "";
                    };
                    tax_exempt?: "" | "exempt" | "none" | "reverse";
                    tax_ids?: ({
                        type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bo_tin" | "br_cnpj" | "br_cpf" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "li_uid" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "no_vat" | "nz_gst" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "ua_vat" | "us_ein" | "uy_ruc" | "ve_rif" | "vn_tin" | "za_vat";
                        value: string;
                    })[];
                };
                discounts?: {
                    coupon?: string;
                    discount?: string;
                }[] | "";
                expand?: string[];
                invoice_items?: ({
                    amount?: number;
                    currency?: string;
                    description?: string;
                    discountable?: boolean;
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                    }[] | "";
                    invoiceitem?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    period?: {
                        end: number;
                        start: number;
                    };
                    price?: string;
                    price_data?: {
                        currency: string;
                        product: string;
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        unit_amount?: number;
                        unit_amount_decimal?: string;
                    };
                    quantity?: number;
                    tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                    tax_code?: string | "";
                    tax_rates?: string[] | "";
                    unit_amount?: number;
                    unit_amount_decimal?: string;
                })[];
                schedule?: string;
                subscription?: string;
                subscription_billing_cycle_anchor?: ("now" | "unchanged") | number;
                subscription_cancel_at?: number | "";
                subscription_cancel_at_period_end?: boolean;
                subscription_cancel_now?: boolean;
                subscription_default_tax_rates?: string[] | "";
                subscription_items?: ({
                    billing_thresholds?: {
                        usage_gte: number;
                    } | "";
                    clear_usage?: boolean;
                    deleted?: boolean;
                    id?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    price?: string;
                    price_data?: {
                        currency: string;
                        product: string;
                        recurring: {
                            interval: "day" | "month" | "week" | "year";
                            interval_count?: number;
                        };
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        unit_amount?: number;
                        unit_amount_decimal?: string;
                    };
                    quantity?: number;
                    tax_rates?: string[] | "";
                })[];
                subscription_proration_behavior?: "always_invoice" | "create_prorations" | "none";
                subscription_proration_date?: number;
                subscription_resume_at?: "now";
                subscription_start_date?: number;
                subscription_trial_end?: "now" | number;
                subscription_trial_from_plan?: boolean;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetInvoicesUpcomingLines: {
        parameters: {
            query?: {
                automatic_tax?: {
                    enabled: boolean;
                };
                coupon?: string;
                currency?: string;
                customer?: string;
                customer_details?: {
                    address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    } | "";
                    shipping?: {
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        name: string;
                        phone?: string;
                    } | "";
                    tax?: {
                        ip_address?: string | "";
                    };
                    tax_exempt?: "" | "exempt" | "none" | "reverse";
                    tax_ids?: ({
                        type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bo_tin" | "br_cnpj" | "br_cpf" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "li_uid" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "no_vat" | "nz_gst" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "ua_vat" | "us_ein" | "uy_ruc" | "ve_rif" | "vn_tin" | "za_vat";
                        value: string;
                    })[];
                };
                discounts?: {
                    coupon?: string;
                    discount?: string;
                }[] | "";
                ending_before?: string;
                expand?: string[];
                invoice_items?: ({
                    amount?: number;
                    currency?: string;
                    description?: string;
                    discountable?: boolean;
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                    }[] | "";
                    invoiceitem?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    period?: {
                        end: number;
                        start: number;
                    };
                    price?: string;
                    price_data?: {
                        currency: string;
                        product: string;
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        unit_amount?: number;
                        unit_amount_decimal?: string;
                    };
                    quantity?: number;
                    tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                    tax_code?: string | "";
                    tax_rates?: string[] | "";
                    unit_amount?: number;
                    unit_amount_decimal?: string;
                })[];
                limit?: number;
                schedule?: string;
                starting_after?: string;
                subscription?: string;
                subscription_billing_cycle_anchor?: ("now" | "unchanged") | number;
                subscription_cancel_at?: number | "";
                subscription_cancel_at_period_end?: boolean;
                subscription_cancel_now?: boolean;
                subscription_default_tax_rates?: string[] | "";
                subscription_items?: ({
                    billing_thresholds?: {
                        usage_gte: number;
                    } | "";
                    clear_usage?: boolean;
                    deleted?: boolean;
                    id?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    price?: string;
                    price_data?: {
                        currency: string;
                        product: string;
                        recurring: {
                            interval: "day" | "month" | "week" | "year";
                            interval_count?: number;
                        };
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        unit_amount?: number;
                        unit_amount_decimal?: string;
                    };
                    quantity?: number;
                    tax_rates?: string[] | "";
                })[];
                subscription_proration_behavior?: "always_invoice" | "create_prorations" | "none";
                subscription_proration_date?: number;
                subscription_resume_at?: "now";
                subscription_start_date?: number;
                subscription_trial_end?: "now" | number;
                subscription_trial_from_plan?: boolean;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["line_item"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetInvoicesInvoice: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                invoice: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoicesInvoice: {
        parameters: {
            path: {
                invoice: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    account_tax_ids?: string[] | "";
                    application_fee_amount?: number;
                    auto_advance?: boolean;
                    automatic_tax?: {
                        enabled: boolean;
                    };
                    collection_method?: "charge_automatically" | "send_invoice";
                    custom_fields?: {
                        name: string;
                        value: string;
                    }[] | "";
                    days_until_due?: number;
                    default_payment_method?: string;
                    default_source?: string | "";
                    default_tax_rates?: string[] | "";
                    description?: string;
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                    }[] | "";
                    due_date?: number;
                    effective_at?: number | "";
                    expand?: string[];
                    footer?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    on_behalf_of?: string | "";
                    payment_settings?: {
                        default_mandate?: string | "";
                        payment_method_options?: {
                            acss_debit?: ({
                                mandate_options?: {
                                    transaction_type?: "business" | "personal";
                                };
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            }) | "";
                            bancontact?: ({
                                preferred_language?: "de" | "en" | "fr" | "nl";
                            }) | "";
                            card?: ({
                                installments?: {
                                    enabled?: boolean;
                                    plan?: {
                                        count: number;
                                        interval: "month";
                                        type: "fixed_count";
                                    } | "";
                                };
                                request_three_d_secure?: "any" | "automatic";
                            }) | "";
                            customer_balance?: {
                                bank_transfer?: {
                                    eu_bank_transfer?: {
                                        country: string;
                                    };
                                    type?: string;
                                };
                                funding_type?: string;
                            } | "";
                            konbini?: Record<string, never> | "";
                            us_bank_account?: ({
                                financial_connections?: {
                                    permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                };
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            }) | "";
                        };
                        payment_method_types?: (("ach_credit_transfer" | "ach_debit" | "acss_debit" | "au_becs_debit" | "bacs_debit" | "bancontact" | "boleto" | "card" | "cashapp" | "customer_balance" | "fpx" | "giropay" | "grabpay" | "ideal" | "konbini" | "link" | "paynow" | "paypal" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay")[]) | "";
                    };
                    rendering_options?: ({
                        amount_tax_display?: "" | "exclude_tax" | "include_inclusive_tax";
                    }) | "";
                    shipping_cost?: ({
                        shipping_rate?: string;
                        shipping_rate_data?: {
                            delivery_estimate?: {
                                maximum?: {
                                    unit: "business_day" | "day" | "hour" | "month" | "week";
                                    value: number;
                                };
                                minimum?: {
                                    unit: "business_day" | "day" | "hour" | "month" | "week";
                                    value: number;
                                };
                            };
                            display_name: string;
                            fixed_amount?: {
                                amount: number;
                                currency: string;
                                currency_options?: {
                                    [key: string]: {
                                        amount: number;
                                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                    };
                                };
                            };
                            metadata?: {
                                [key: string]: string;
                            };
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            tax_code?: string;
                            type?: "fixed_amount";
                        };
                    }) | "";
                    shipping_details?: ({
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        name: string;
                        phone?: string | "";
                    }) | "";
                    statement_descriptor?: string;
                    transfer_data?: {
                        amount?: number;
                        destination: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteInvoicesInvoice: {
        parameters: {
            path: {
                invoice: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_invoice"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoicesInvoiceFinalize: {
        parameters: {
            path: {
                invoice: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    auto_advance?: boolean;
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetInvoicesInvoiceLines: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                invoice: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["line_item"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoicesInvoiceMarkUncollectible: {
        parameters: {
            path: {
                invoice: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoicesInvoicePay: {
        parameters: {
            path: {
                invoice: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    forgive?: boolean;
                    mandate?: string | "";
                    off_session?: boolean;
                    paid_out_of_band?: boolean;
                    payment_method?: string;
                    source?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoicesInvoiceSend: {
        parameters: {
            path: {
                invoice: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostInvoicesInvoiceVoid: {
        parameters: {
            path: {
                invoice: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingAuthorizations: {
        parameters: {
            query?: {
                card?: string;
                cardholder?: string;
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
                status?: "closed" | "pending" | "reversed";
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["issuing.authorization"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingAuthorizationsAuthorization: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                authorization: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.authorization"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingAuthorizationsAuthorization: {
        parameters: {
            path: {
                authorization: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.authorization"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingAuthorizationsAuthorizationApprove: {
        parameters: {
            path: {
                authorization: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.authorization"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingAuthorizationsAuthorizationDecline: {
        parameters: {
            path: {
                authorization: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.authorization"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingCardholders: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                email?: string;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                phone_number?: string;
                starting_after?: string;
                status?: "active" | "blocked" | "inactive";
                type?: "company" | "individual";
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["issuing.cardholder"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingCardholders: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    billing: {
                        address: {
                            city: string;
                            country: string;
                            line1: string;
                            line2?: string;
                            postal_code: string;
                            state?: string;
                        };
                    };
                    company?: {
                        tax_id?: string;
                    };
                    email?: string;
                    expand?: string[];
                    individual?: {
                        card_issuing?: {
                            user_terms_acceptance?: {
                                date?: number;
                                ip?: string;
                                user_agent?: string | "";
                            };
                        };
                        dob?: {
                            day: number;
                            month: number;
                            year: number;
                        };
                        first_name?: string;
                        last_name?: string;
                        verification?: {
                            document?: {
                                back?: string;
                                front?: string;
                            };
                        };
                    };
                    metadata?: {
                        [key: string]: string;
                    };
                    name: string;
                    phone_number?: string;
                    preferred_locales?: ("de" | "en" | "es" | "fr" | "it")[];
                    spending_controls?: {
                        allowed_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                        blocked_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                        spending_limits?: ({
                            amount: number;
                            categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                            interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
                        })[];
                        spending_limits_currency?: string;
                    };
                    status?: "active" | "inactive";
                    type?: "company" | "individual";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.cardholder"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingCardholdersCardholder: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                cardholder: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.cardholder"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingCardholdersCardholder: {
        parameters: {
            path: {
                cardholder: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    billing?: {
                        address: {
                            city: string;
                            country: string;
                            line1: string;
                            line2?: string;
                            postal_code: string;
                            state?: string;
                        };
                    };
                    company?: {
                        tax_id?: string;
                    };
                    email?: string;
                    expand?: string[];
                    individual?: {
                        card_issuing?: {
                            user_terms_acceptance?: {
                                date?: number;
                                ip?: string;
                                user_agent?: string | "";
                            };
                        };
                        dob?: {
                            day: number;
                            month: number;
                            year: number;
                        };
                        first_name?: string;
                        last_name?: string;
                        verification?: {
                            document?: {
                                back?: string;
                                front?: string;
                            };
                        };
                    };
                    metadata?: {
                        [key: string]: string;
                    };
                    phone_number?: string;
                    preferred_locales?: ("de" | "en" | "es" | "fr" | "it")[];
                    spending_controls?: {
                        allowed_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                        blocked_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                        spending_limits?: ({
                            amount: number;
                            categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                            interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
                        })[];
                        spending_limits_currency?: string;
                    };
                    status?: "active" | "inactive";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.cardholder"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingCards: {
        parameters: {
            query?: {
                cardholder?: string;
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                exp_month?: number;
                exp_year?: number;
                expand?: string[];
                last4?: string;
                limit?: number;
                starting_after?: string;
                status?: "active" | "canceled" | "inactive";
                type?: "physical" | "virtual";
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["issuing.card"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingCards: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    cardholder?: string;
                    currency: string;
                    expand?: string[];
                    financial_account?: string;
                    metadata?: {
                        [key: string]: string;
                    };
                    replacement_for?: string;
                    replacement_reason?: "damaged" | "expired" | "lost" | "stolen";
                    shipping?: {
                        address: {
                            city: string;
                            country: string;
                            line1: string;
                            line2?: string;
                            postal_code: string;
                            state?: string;
                        };
                        customs?: {
                            eori_number?: string;
                        };
                        name: string;
                        phone_number?: string;
                        require_signature?: boolean;
                        service?: "express" | "priority" | "standard";
                        type?: "bulk" | "individual";
                    };
                    spending_controls?: {
                        allowed_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                        blocked_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                        spending_limits?: ({
                            amount: number;
                            categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                            interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
                        })[];
                    };
                    status?: "active" | "inactive";
                    type: "physical" | "virtual";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.card"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingCardsCard: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                card: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.card"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingCardsCard: {
        parameters: {
            path: {
                card: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    cancellation_reason?: "lost" | "stolen";
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    pin?: {
                        encrypted_number?: string;
                    };
                    spending_controls?: {
                        allowed_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                        blocked_categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                        spending_limits?: ({
                            amount: number;
                            categories?: ("ac_refrigeration_repair" | "accounting_bookkeeping_services" | "advertising_services" | "agricultural_cooperative" | "airlines_air_carriers" | "airports_flying_fields" | "ambulance_services" | "amusement_parks_carnivals" | "antique_reproductions" | "antique_shops" | "aquariums" | "architectural_surveying_services" | "art_dealers_and_galleries" | "artists_supply_and_craft_shops" | "auto_and_home_supply_stores" | "auto_body_repair_shops" | "auto_paint_shops" | "auto_service_shops" | "automated_cash_disburse" | "automated_fuel_dispensers" | "automobile_associations" | "automotive_parts_and_accessories_stores" | "automotive_tire_stores" | "bail_and_bond_payments" | "bakeries" | "bands_orchestras" | "barber_and_beauty_shops" | "betting_casino_gambling" | "bicycle_shops" | "billiard_pool_establishments" | "boat_dealers" | "boat_rentals_and_leases" | "book_stores" | "books_periodicals_and_newspapers" | "bowling_alleys" | "bus_lines" | "business_secretarial_schools" | "buying_shopping_services" | "cable_satellite_and_other_pay_television_and_radio" | "camera_and_photographic_supply_stores" | "candy_nut_and_confectionery_stores" | "car_and_truck_dealers_new_used" | "car_and_truck_dealers_used_only" | "car_rental_agencies" | "car_washes" | "carpentry_services" | "carpet_upholstery_cleaning" | "caterers" | "charitable_and_social_service_organizations_fundraising" | "chemicals_and_allied_products" | "child_care_services" | "childrens_and_infants_wear_stores" | "chiropodists_podiatrists" | "chiropractors" | "cigar_stores_and_stands" | "civic_social_fraternal_associations" | "cleaning_and_maintenance" | "clothing_rental" | "colleges_universities" | "commercial_equipment" | "commercial_footwear" | "commercial_photography_art_and_graphics" | "commuter_transport_and_ferries" | "computer_network_services" | "computer_programming" | "computer_repair" | "computer_software_stores" | "computers_peripherals_and_software" | "concrete_work_services" | "construction_materials" | "consulting_public_relations" | "correspondence_schools" | "cosmetic_stores" | "counseling_services" | "country_clubs" | "courier_services" | "court_costs" | "credit_reporting_agencies" | "cruise_lines" | "dairy_products_stores" | "dance_hall_studios_schools" | "dating_escort_services" | "dentists_orthodontists" | "department_stores" | "detective_agencies" | "digital_goods_applications" | "digital_goods_games" | "digital_goods_large_volume" | "digital_goods_media" | "direct_marketing_catalog_merchant" | "direct_marketing_combination_catalog_and_retail_merchant" | "direct_marketing_inbound_telemarketing" | "direct_marketing_insurance_services" | "direct_marketing_other" | "direct_marketing_outbound_telemarketing" | "direct_marketing_subscription" | "direct_marketing_travel" | "discount_stores" | "doctors" | "door_to_door_sales" | "drapery_window_covering_and_upholstery_stores" | "drinking_places" | "drug_stores_and_pharmacies" | "drugs_drug_proprietaries_and_druggist_sundries" | "dry_cleaners" | "durable_goods" | "duty_free_stores" | "eating_places_restaurants" | "educational_services" | "electric_razor_stores" | "electric_vehicle_charging" | "electrical_parts_and_equipment" | "electrical_services" | "electronics_repair_shops" | "electronics_stores" | "elementary_secondary_schools" | "emergency_services_gcas_visa_use_only" | "employment_temp_agencies" | "equipment_rental" | "exterminating_services" | "family_clothing_stores" | "fast_food_restaurants" | "financial_institutions" | "fines_government_administrative_entities" | "fireplace_fireplace_screens_and_accessories_stores" | "floor_covering_stores" | "florists" | "florists_supplies_nursery_stock_and_flowers" | "freezer_and_locker_meat_provisioners" | "fuel_dealers_non_automotive" | "funeral_services_crematories" | "furniture_home_furnishings_and_equipment_stores_except_appliances" | "furniture_repair_refinishing" | "furriers_and_fur_shops" | "general_services" | "gift_card_novelty_and_souvenir_shops" | "glass_paint_and_wallpaper_stores" | "glassware_crystal_stores" | "golf_courses_public" | "government_licensed_horse_dog_racing_us_region_only" | "government_licensed_online_casions_online_gambling_us_region_only" | "government_owned_lotteries_non_us_region" | "government_owned_lotteries_us_region_only" | "government_services" | "grocery_stores_supermarkets" | "hardware_equipment_and_supplies" | "hardware_stores" | "health_and_beauty_spas" | "hearing_aids_sales_and_supplies" | "heating_plumbing_a_c" | "hobby_toy_and_game_shops" | "home_supply_warehouse_stores" | "hospitals" | "hotels_motels_and_resorts" | "household_appliance_stores" | "industrial_supplies" | "information_retrieval_services" | "insurance_default" | "insurance_underwriting_premiums" | "intra_company_purchases" | "jewelry_stores_watches_clocks_and_silverware_stores" | "landscaping_services" | "laundries" | "laundry_cleaning_services" | "legal_services_attorneys" | "luggage_and_leather_goods_stores" | "lumber_building_materials_stores" | "manual_cash_disburse" | "marinas_service_and_supplies" | "marketplaces" | "masonry_stonework_and_plaster" | "massage_parlors" | "medical_and_dental_labs" | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies" | "medical_services" | "membership_organizations" | "mens_and_boys_clothing_and_accessories_stores" | "mens_womens_clothing_stores" | "metal_service_centers" | "miscellaneous" | "miscellaneous_apparel_and_accessory_shops" | "miscellaneous_auto_dealers" | "miscellaneous_business_services" | "miscellaneous_food_stores" | "miscellaneous_general_merchandise" | "miscellaneous_general_services" | "miscellaneous_home_furnishing_specialty_stores" | "miscellaneous_publishing_and_printing" | "miscellaneous_recreation_services" | "miscellaneous_repair_shops" | "miscellaneous_specialty_retail" | "mobile_home_dealers" | "motion_picture_theaters" | "motor_freight_carriers_and_trucking" | "motor_homes_dealers" | "motor_vehicle_supplies_and_new_parts" | "motorcycle_shops_and_dealers" | "motorcycle_shops_dealers" | "music_stores_musical_instruments_pianos_and_sheet_music" | "news_dealers_and_newsstands" | "non_fi_money_orders" | "non_fi_stored_value_card_purchase_load" | "nondurable_goods" | "nurseries_lawn_and_garden_supply_stores" | "nursing_personal_care" | "office_and_commercial_furniture" | "opticians_eyeglasses" | "optometrists_ophthalmologist" | "orthopedic_goods_prosthetic_devices" | "osteopaths" | "package_stores_beer_wine_and_liquor" | "paints_varnishes_and_supplies" | "parking_lots_garages" | "passenger_railways" | "pawn_shops" | "pet_shops_pet_food_and_supplies" | "petroleum_and_petroleum_products" | "photo_developing" | "photographic_photocopy_microfilm_equipment_and_supplies" | "photographic_studios" | "picture_video_production" | "piece_goods_notions_and_other_dry_goods" | "plumbing_heating_equipment_and_supplies" | "political_organizations" | "postal_services_government_only" | "precious_stones_and_metals_watches_and_jewelry" | "professional_services" | "public_warehousing_and_storage" | "quick_copy_repro_and_blueprint" | "railroads" | "real_estate_agents_and_managers_rentals" | "record_stores" | "recreational_vehicle_rentals" | "religious_goods_stores" | "religious_organizations" | "roofing_siding_sheet_metal" | "secretarial_support_services" | "security_brokers_dealers" | "service_stations" | "sewing_needlework_fabric_and_piece_goods_stores" | "shoe_repair_hat_cleaning" | "shoe_stores" | "small_appliance_repair" | "snowmobile_dealers" | "special_trade_services" | "specialty_cleaning" | "sporting_goods_stores" | "sporting_recreation_camps" | "sports_and_riding_apparel_stores" | "sports_clubs_fields" | "stamp_and_coin_stores" | "stationary_office_supplies_printing_and_writing_paper" | "stationery_stores_office_and_school_supply_stores" | "swimming_pools_sales" | "t_ui_travel_germany" | "tailors_alterations" | "tax_payments_government_agencies" | "tax_preparation_services" | "taxicabs_limousines" | "telecommunication_equipment_and_telephone_sales" | "telecommunication_services" | "telegraph_services" | "tent_and_awning_shops" | "testing_laboratories" | "theatrical_ticket_agencies" | "timeshares" | "tire_retreading_and_repair" | "tolls_bridge_fees" | "tourist_attractions_and_exhibits" | "towing_services" | "trailer_parks_campgrounds" | "transportation_services" | "travel_agencies_tour_operators" | "truck_stop_iteration" | "truck_utility_trailer_rentals" | "typesetting_plate_making_and_related_services" | "typewriter_stores" | "u_s_federal_government_agencies_or_departments" | "uniforms_commercial_clothing" | "used_merchandise_and_secondhand_stores" | "utilities" | "variety_stores" | "veterinary_services" | "video_amusement_game_supplies" | "video_game_arcades" | "video_tape_rental_stores" | "vocational_trade_schools" | "watch_jewelry_repair" | "welding_repair" | "wholesale_clubs" | "wig_and_toupee_stores" | "wires_money_orders" | "womens_accessory_and_specialty_shops" | "womens_ready_to_wear_stores" | "wrecking_and_salvage_yards")[];
                            interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
                        })[];
                    };
                    status?: "active" | "canceled" | "inactive";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.card"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingDisputes: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
                status?: "expired" | "lost" | "submitted" | "unsubmitted" | "won";
                transaction?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["issuing.dispute"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingDisputes: {
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    evidence?: {
                        canceled?: ({
                            additional_documentation?: string | "";
                            canceled_at?: number | "";
                            cancellation_policy_provided?: boolean | "";
                            cancellation_reason?: string | "";
                            expected_at?: number | "";
                            explanation?: string | "";
                            product_description?: string | "";
                            product_type?: "" | "merchandise" | "service";
                            return_status?: "" | "merchant_rejected" | "successful";
                            returned_at?: number | "";
                        }) | "";
                        duplicate?: ({
                            additional_documentation?: string | "";
                            card_statement?: string | "";
                            cash_receipt?: string | "";
                            check_image?: string | "";
                            explanation?: string | "";
                            original_transaction?: string;
                        }) | "";
                        fraudulent?: ({
                            additional_documentation?: string | "";
                            explanation?: string | "";
                        }) | "";
                        merchandise_not_as_described?: ({
                            additional_documentation?: string | "";
                            explanation?: string | "";
                            received_at?: number | "";
                            return_description?: string | "";
                            return_status?: "" | "merchant_rejected" | "successful";
                            returned_at?: number | "";
                        }) | "";
                        not_received?: ({
                            additional_documentation?: string | "";
                            expected_at?: number | "";
                            explanation?: string | "";
                            product_description?: string | "";
                            product_type?: "" | "merchandise" | "service";
                        }) | "";
                        other?: ({
                            additional_documentation?: string | "";
                            explanation?: string | "";
                            product_description?: string | "";
                            product_type?: "" | "merchandise" | "service";
                        }) | "";
                        reason?: "canceled" | "duplicate" | "fraudulent" | "merchandise_not_as_described" | "not_received" | "other" | "service_not_as_described";
                        service_not_as_described?: ({
                            additional_documentation?: string | "";
                            canceled_at?: number | "";
                            cancellation_reason?: string | "";
                            explanation?: string | "";
                            received_at?: number | "";
                        }) | "";
                    };
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    };
                    transaction?: string;
                    treasury?: {
                        received_debit: string;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.dispute"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingDisputesDispute: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                dispute: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.dispute"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingDisputesDispute: {
        parameters: {
            path: {
                dispute: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    evidence?: {
                        canceled?: ({
                            additional_documentation?: string | "";
                            canceled_at?: number | "";
                            cancellation_policy_provided?: boolean | "";
                            cancellation_reason?: string | "";
                            expected_at?: number | "";
                            explanation?: string | "";
                            product_description?: string | "";
                            product_type?: "" | "merchandise" | "service";
                            return_status?: "" | "merchant_rejected" | "successful";
                            returned_at?: number | "";
                        }) | "";
                        duplicate?: ({
                            additional_documentation?: string | "";
                            card_statement?: string | "";
                            cash_receipt?: string | "";
                            check_image?: string | "";
                            explanation?: string | "";
                            original_transaction?: string;
                        }) | "";
                        fraudulent?: ({
                            additional_documentation?: string | "";
                            explanation?: string | "";
                        }) | "";
                        merchandise_not_as_described?: ({
                            additional_documentation?: string | "";
                            explanation?: string | "";
                            received_at?: number | "";
                            return_description?: string | "";
                            return_status?: "" | "merchant_rejected" | "successful";
                            returned_at?: number | "";
                        }) | "";
                        not_received?: ({
                            additional_documentation?: string | "";
                            expected_at?: number | "";
                            explanation?: string | "";
                            product_description?: string | "";
                            product_type?: "" | "merchandise" | "service";
                        }) | "";
                        other?: ({
                            additional_documentation?: string | "";
                            explanation?: string | "";
                            product_description?: string | "";
                            product_type?: "" | "merchandise" | "service";
                        }) | "";
                        reason?: "canceled" | "duplicate" | "fraudulent" | "merchandise_not_as_described" | "not_received" | "other" | "service_not_as_described";
                        service_not_as_described?: ({
                            additional_documentation?: string | "";
                            canceled_at?: number | "";
                            cancellation_reason?: string | "";
                            explanation?: string | "";
                            received_at?: number | "";
                        }) | "";
                    };
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.dispute"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingDisputesDisputeSubmit: {
        parameters: {
            path: {
                dispute: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.dispute"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingSettlements: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["issuing.settlement"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingSettlementsSettlement: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                settlement: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.settlement"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingSettlementsSettlement: {
        parameters: {
            path: {
                settlement: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.settlement"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingTransactions: {
        parameters: {
            query?: {
                card?: string;
                cardholder?: string;
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
                type?: "capture" | "refund";
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["issuing.transaction"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetIssuingTransactionsTransaction: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                transaction: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.transaction"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostIssuingTransactionsTransaction: {
        parameters: {
            path: {
                transaction: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.transaction"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostLinkAccountSessions: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    account_holder: {
                        account?: string;
                        customer?: string;
                        type: "account" | "customer";
                    };
                    expand?: string[];
                    filters?: {
                        countries: string[];
                    };
                    permissions: ("balances" | "ownership" | "payment_method" | "transactions")[];
                    return_url?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["financial_connections.session"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetLinkAccountSessionsSession: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                session: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["financial_connections.session"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetLinkedAccounts: {
        parameters: {
            query?: {
                account_holder?: {
                    account?: string;
                    customer?: string;
                };
                ending_before?: string;
                expand?: string[];
                limit?: number;
                session?: string;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["financial_connections.account"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetLinkedAccountsAccount: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["financial_connections.account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostLinkedAccountsAccountDisconnect: {
        parameters: {
            path: {
                account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["financial_connections.account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetLinkedAccountsAccountOwners: {
        parameters: {
            query: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                ownership: string;
                starting_after?: string;
            };
            path: {
                account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["financial_connections.account_owner"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostLinkedAccountsAccountRefresh: {
        parameters: {
            path: {
                account: string;
            };
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    features: ("balance" | "ownership")[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["financial_connections.account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetMandatesMandate: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                mandate: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["mandate"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentIntents: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                customer?: string;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["payment_intent"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentIntents: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount: number;
                    application_fee_amount?: number;
                    automatic_payment_methods?: {
                        allow_redirects?: "always" | "never";
                        enabled: boolean;
                    };
                    capture_method?: "automatic" | "automatic_async" | "manual";
                    confirm?: boolean;
                    confirmation_method?: "automatic" | "manual";
                    currency: string;
                    customer?: string;
                    description?: string;
                    error_on_requires_action?: boolean;
                    expand?: string[];
                    mandate?: string;
                    mandate_data?: {
                        customer_acceptance: {
                            accepted_at?: number;
                            offline?: Record<string, never>;
                            online?: {
                                ip_address: string;
                                user_agent: string;
                            };
                            type: "offline" | "online";
                        };
                    };
                    metadata?: {
                        [key: string]: string;
                    };
                    off_session?: boolean | ("one_off" | "recurring");
                    on_behalf_of?: string;
                    payment_method?: string;
                    payment_method_data?: {
                        acss_debit?: {
                            account_number: string;
                            institution_number: string;
                            transit_number: string;
                        };
                        affirm?: Record<string, never>;
                        afterpay_clearpay?: Record<string, never>;
                        alipay?: Record<string, never>;
                        au_becs_debit?: {
                            account_number: string;
                            bsb_number: string;
                        };
                        bacs_debit?: {
                            account_number?: string;
                            sort_code?: string;
                        };
                        bancontact?: Record<string, never>;
                        billing_details?: {
                            address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            } | "";
                            email?: string | "";
                            name?: string | "";
                            phone?: string | "";
                        };
                        blik?: Record<string, never>;
                        boleto?: {
                            tax_id: string;
                        };
                        cashapp?: Record<string, never>;
                        customer_balance?: Record<string, never>;
                        eps?: {
                            bank?: "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau";
                        };
                        fpx?: {
                            bank: "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
                        };
                        giropay?: Record<string, never>;
                        grabpay?: Record<string, never>;
                        ideal?: {
                            bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe";
                        };
                        interac_present?: Record<string, never>;
                        klarna?: {
                            dob?: {
                                day: number;
                                month: number;
                                year: number;
                            };
                        };
                        konbini?: Record<string, never>;
                        link?: Record<string, never>;
                        metadata?: {
                            [key: string]: string;
                        };
                        oxxo?: Record<string, never>;
                        p24?: {
                            bank?: "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "volkswagen_bank";
                        };
                        paynow?: Record<string, never>;
                        paypal?: Record<string, never>;
                        pix?: Record<string, never>;
                        promptpay?: Record<string, never>;
                        radar_options?: {
                            session?: string;
                        };
                        sepa_debit?: {
                            iban: string;
                        };
                        sofort?: {
                            country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
                        };
                        type: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "klarna" | "konbini" | "link" | "oxxo" | "p24" | "paynow" | "paypal" | "pix" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay" | "zip";
                        us_bank_account?: {
                            account_holder_type?: "company" | "individual";
                            account_number?: string;
                            account_type?: "checking" | "savings";
                            financial_connections_account?: string;
                            routing_number?: string;
                        };
                        wechat_pay?: Record<string, never>;
                        zip?: Record<string, never>;
                    };
                    payment_method_options?: {
                        acss_debit?: ({
                            mandate_options?: {
                                custom_mandate_url?: string | "";
                                interval_description?: string;
                                payment_schedule?: "combined" | "interval" | "sporadic";
                                transaction_type?: "business" | "personal";
                            };
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        }) | "";
                        affirm?: ({
                            capture_method?: "" | "manual";
                            preferred_locale?: string;
                            setup_future_usage?: "none";
                        }) | "";
                        afterpay_clearpay?: ({
                            capture_method?: "" | "manual";
                            reference?: string;
                            setup_future_usage?: "none";
                        }) | "";
                        alipay?: ({
                            setup_future_usage?: "" | "none" | "off_session";
                        }) | "";
                        au_becs_debit?: ({
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        }) | "";
                        bacs_debit?: ({
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        }) | "";
                        bancontact?: ({
                            preferred_language?: "de" | "en" | "fr" | "nl";
                            setup_future_usage?: "" | "none" | "off_session";
                        }) | "";
                        blik?: {
                            code?: string;
                        } | "";
                        boleto?: ({
                            expires_after_days?: number;
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        }) | "";
                        card?: ({
                            capture_method?: "" | "manual";
                            cvc_token?: string;
                            installments?: {
                                enabled?: boolean;
                                plan?: {
                                    count: number;
                                    interval: "month";
                                    type: "fixed_count";
                                } | "";
                            };
                            mandate_options?: {
                                amount: number;
                                amount_type: "fixed" | "maximum";
                                description?: string;
                                end_date?: number;
                                interval: "day" | "month" | "sporadic" | "week" | "year";
                                interval_count?: number;
                                reference: string;
                                start_date: number;
                                supported_types?: "india"[];
                            };
                            network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "interac" | "jcb" | "mastercard" | "unionpay" | "unknown" | "visa";
                            request_three_d_secure?: "any" | "automatic";
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                            statement_descriptor_suffix_kana?: string | "";
                            statement_descriptor_suffix_kanji?: string | "";
                        }) | "";
                        card_present?: {
                            request_extended_authorization?: boolean;
                            request_incremental_authorization_support?: boolean;
                        } | "";
                        cashapp?: ({
                            capture_method?: "" | "manual";
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        }) | "";
                        customer_balance?: ({
                            bank_transfer?: {
                                eu_bank_transfer?: {
                                    country: string;
                                };
                                requested_address_types?: ("aba" | "iban" | "sepa" | "sort_code" | "spei" | "swift" | "zengin")[];
                                type: "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer";
                            };
                            funding_type?: "bank_transfer";
                            setup_future_usage?: "none";
                        }) | "";
                        eps?: {
                            setup_future_usage?: "none";
                        } | "";
                        fpx?: {
                            setup_future_usage?: "none";
                        } | "";
                        giropay?: {
                            setup_future_usage?: "none";
                        } | "";
                        grabpay?: {
                            setup_future_usage?: "none";
                        } | "";
                        ideal?: ({
                            setup_future_usage?: "" | "none" | "off_session";
                        }) | "";
                        interac_present?: Record<string, never> | "";
                        klarna?: ({
                            capture_method?: "" | "manual";
                            preferred_locale?: "cs-CZ" | "da-DK" | "de-AT" | "de-CH" | "de-DE" | "el-GR" | "en-AT" | "en-AU" | "en-BE" | "en-CA" | "en-CH" | "en-CZ" | "en-DE" | "en-DK" | "en-ES" | "en-FI" | "en-FR" | "en-GB" | "en-GR" | "en-IE" | "en-IT" | "en-NL" | "en-NO" | "en-NZ" | "en-PL" | "en-PT" | "en-SE" | "en-US" | "es-ES" | "es-US" | "fi-FI" | "fr-BE" | "fr-CA" | "fr-CH" | "fr-FR" | "it-CH" | "it-IT" | "nb-NO" | "nl-BE" | "nl-NL" | "pl-PL" | "pt-PT" | "sv-FI" | "sv-SE";
                            setup_future_usage?: "none";
                        }) | "";
                        konbini?: ({
                            confirmation_number?: string | "";
                            expires_after_days?: number | "";
                            expires_at?: number | "";
                            product_description?: string | "";
                            setup_future_usage?: "none";
                        }) | "";
                        link?: ({
                            capture_method?: "" | "manual";
                            setup_future_usage?: "" | "none" | "off_session";
                        }) | "";
                        oxxo?: {
                            expires_after_days?: number;
                            setup_future_usage?: "none";
                        } | "";
                        p24?: {
                            setup_future_usage?: "none";
                            tos_shown_and_accepted?: boolean;
                        } | "";
                        paynow?: {
                            setup_future_usage?: "none";
                        } | "";
                        paypal?: ({
                            capture_method?: "" | "manual";
                            preferred_locale?: "cs-CZ" | "da-DK" | "de-AT" | "de-DE" | "de-LU" | "el-GR" | "en-GB" | "en-US" | "es-ES" | "fi-FI" | "fr-BE" | "fr-FR" | "fr-LU" | "hu-HU" | "it-IT" | "nl-BE" | "nl-NL" | "pl-PL" | "pt-PT" | "sk-SK" | "sv-SE";
                            reference?: string;
                            risk_correlation_id?: string;
                            setup_future_usage?: "" | "none" | "off_session";
                        }) | "";
                        pix?: {
                            expires_after_seconds?: number;
                            expires_at?: number;
                            setup_future_usage?: "none";
                        } | "";
                        promptpay?: {
                            setup_future_usage?: "none";
                        } | "";
                        sepa_debit?: ({
                            mandate_options?: Record<string, never>;
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        }) | "";
                        sofort?: ({
                            preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl";
                            setup_future_usage?: "" | "none" | "off_session";
                        }) | "";
                        us_bank_account?: ({
                            financial_connections?: {
                                permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                return_url?: string;
                            };
                            networks?: {
                                requested?: ("ach" | "us_domestic_wire")[];
                            };
                            preferred_settlement_speed?: "" | "fastest" | "standard";
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        }) | "";
                        wechat_pay?: ({
                            app_id?: string;
                            client: "android" | "ios" | "web";
                            setup_future_usage?: "none";
                        }) | "";
                        zip?: {
                            setup_future_usage?: "none";
                        } | "";
                    };
                    payment_method_types?: string[];
                    radar_options?: {
                        session?: string;
                    };
                    receipt_email?: string;
                    return_url?: string;
                    setup_future_usage?: "off_session" | "on_session";
                    shipping?: {
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        carrier?: string;
                        name: string;
                        phone?: string;
                        tracking_number?: string;
                    };
                    statement_descriptor?: string;
                    statement_descriptor_suffix?: string;
                    transfer_data?: {
                        amount?: number;
                        destination: string;
                    };
                    transfer_group?: string;
                    use_stripe_sdk?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_intent"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentIntentsSearch: {
        parameters: {
            query: {
                expand?: string[];
                limit?: number;
                page?: string;
                query: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["payment_intent"][];
                        has_more: boolean;
                        next_page?: string | null;
                        object: "search_result";
                        total_count?: number;
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentIntentsIntent: {
        parameters: {
            query?: {
                client_secret?: string;
                expand?: string[];
            };
            path: {
                intent: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_intent"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentIntentsIntent: {
        parameters: {
            path: {
                intent: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    application_fee_amount?: number | "";
                    capture_method?: "automatic" | "automatic_async" | "manual";
                    currency?: string;
                    customer?: string;
                    description?: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    payment_method?: string;
                    payment_method_data?: {
                        acss_debit?: {
                            account_number: string;
                            institution_number: string;
                            transit_number: string;
                        };
                        affirm?: Record<string, never>;
                        afterpay_clearpay?: Record<string, never>;
                        alipay?: Record<string, never>;
                        au_becs_debit?: {
                            account_number: string;
                            bsb_number: string;
                        };
                        bacs_debit?: {
                            account_number?: string;
                            sort_code?: string;
                        };
                        bancontact?: Record<string, never>;
                        billing_details?: {
                            address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            } | "";
                            email?: string | "";
                            name?: string | "";
                            phone?: string | "";
                        };
                        blik?: Record<string, never>;
                        boleto?: {
                            tax_id: string;
                        };
                        cashapp?: Record<string, never>;
                        customer_balance?: Record<string, never>;
                        eps?: {
                            bank?: "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau";
                        };
                        fpx?: {
                            bank: "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
                        };
                        giropay?: Record<string, never>;
                        grabpay?: Record<string, never>;
                        ideal?: {
                            bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe";
                        };
                        interac_present?: Record<string, never>;
                        klarna?: {
                            dob?: {
                                day: number;
                                month: number;
                                year: number;
                            };
                        };
                        konbini?: Record<string, never>;
                        link?: Record<string, never>;
                        metadata?: {
                            [key: string]: string;
                        };
                        oxxo?: Record<string, never>;
                        p24?: {
                            bank?: "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "volkswagen_bank";
                        };
                        paynow?: Record<string, never>;
                        paypal?: Record<string, never>;
                        pix?: Record<string, never>;
                        promptpay?: Record<string, never>;
                        radar_options?: {
                            session?: string;
                        };
                        sepa_debit?: {
                            iban: string;
                        };
                        sofort?: {
                            country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
                        };
                        type: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "klarna" | "konbini" | "link" | "oxxo" | "p24" | "paynow" | "paypal" | "pix" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay" | "zip";
                        us_bank_account?: {
                            account_holder_type?: "company" | "individual";
                            account_number?: string;
                            account_type?: "checking" | "savings";
                            financial_connections_account?: string;
                            routing_number?: string;
                        };
                        wechat_pay?: Record<string, never>;
                        zip?: Record<string, never>;
                    };
                    payment_method_options?: {
                        acss_debit?: ({
                            mandate_options?: {
                                custom_mandate_url?: string | "";
                                interval_description?: string;
                                payment_schedule?: "combined" | "interval" | "sporadic";
                                transaction_type?: "business" | "personal";
                            };
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        }) | "";
                        affirm?: ({
                            capture_method?: "" | "manual";
                            preferred_locale?: string;
                            setup_future_usage?: "none";
                        }) | "";
                        afterpay_clearpay?: ({
                            capture_method?: "" | "manual";
                            reference?: string;
                            setup_future_usage?: "none";
                        }) | "";
                        alipay?: ({
                            setup_future_usage?: "" | "none" | "off_session";
                        }) | "";
                        au_becs_debit?: ({
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        }) | "";
                        bacs_debit?: ({
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        }) | "";
                        bancontact?: ({
                            preferred_language?: "de" | "en" | "fr" | "nl";
                            setup_future_usage?: "" | "none" | "off_session";
                        }) | "";
                        blik?: {
                            code?: string;
                        } | "";
                        boleto?: ({
                            expires_after_days?: number;
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        }) | "";
                        card?: ({
                            capture_method?: "" | "manual";
                            cvc_token?: string;
                            installments?: {
                                enabled?: boolean;
                                plan?: {
                                    count: number;
                                    interval: "month";
                                    type: "fixed_count";
                                } | "";
                            };
                            mandate_options?: {
                                amount: number;
                                amount_type: "fixed" | "maximum";
                                description?: string;
                                end_date?: number;
                                interval: "day" | "month" | "sporadic" | "week" | "year";
                                interval_count?: number;
                                reference: string;
                                start_date: number;
                                supported_types?: "india"[];
                            };
                            network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "interac" | "jcb" | "mastercard" | "unionpay" | "unknown" | "visa";
                            request_three_d_secure?: "any" | "automatic";
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                            statement_descriptor_suffix_kana?: string | "";
                            statement_descriptor_suffix_kanji?: string | "";
                        }) | "";
                        card_present?: {
                            request_extended_authorization?: boolean;
                            request_incremental_authorization_support?: boolean;
                        } | "";
                        cashapp?: ({
                            capture_method?: "" | "manual";
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        }) | "";
                        customer_balance?: ({
                            bank_transfer?: {
                                eu_bank_transfer?: {
                                    country: string;
                                };
                                requested_address_types?: ("aba" | "iban" | "sepa" | "sort_code" | "spei" | "swift" | "zengin")[];
                                type: "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer";
                            };
                            funding_type?: "bank_transfer";
                            setup_future_usage?: "none";
                        }) | "";
                        eps?: {
                            setup_future_usage?: "none";
                        } | "";
                        fpx?: {
                            setup_future_usage?: "none";
                        } | "";
                        giropay?: {
                            setup_future_usage?: "none";
                        } | "";
                        grabpay?: {
                            setup_future_usage?: "none";
                        } | "";
                        ideal?: ({
                            setup_future_usage?: "" | "none" | "off_session";
                        }) | "";
                        interac_present?: Record<string, never> | "";
                        klarna?: ({
                            capture_method?: "" | "manual";
                            preferred_locale?: "cs-CZ" | "da-DK" | "de-AT" | "de-CH" | "de-DE" | "el-GR" | "en-AT" | "en-AU" | "en-BE" | "en-CA" | "en-CH" | "en-CZ" | "en-DE" | "en-DK" | "en-ES" | "en-FI" | "en-FR" | "en-GB" | "en-GR" | "en-IE" | "en-IT" | "en-NL" | "en-NO" | "en-NZ" | "en-PL" | "en-PT" | "en-SE" | "en-US" | "es-ES" | "es-US" | "fi-FI" | "fr-BE" | "fr-CA" | "fr-CH" | "fr-FR" | "it-CH" | "it-IT" | "nb-NO" | "nl-BE" | "nl-NL" | "pl-PL" | "pt-PT" | "sv-FI" | "sv-SE";
                            setup_future_usage?: "none";
                        }) | "";
                        konbini?: ({
                            confirmation_number?: string | "";
                            expires_after_days?: number | "";
                            expires_at?: number | "";
                            product_description?: string | "";
                            setup_future_usage?: "none";
                        }) | "";
                        link?: ({
                            capture_method?: "" | "manual";
                            setup_future_usage?: "" | "none" | "off_session";
                        }) | "";
                        oxxo?: {
                            expires_after_days?: number;
                            setup_future_usage?: "none";
                        } | "";
                        p24?: {
                            setup_future_usage?: "none";
                            tos_shown_and_accepted?: boolean;
                        } | "";
                        paynow?: {
                            setup_future_usage?: "none";
                        } | "";
                        paypal?: ({
                            capture_method?: "" | "manual";
                            preferred_locale?: "cs-CZ" | "da-DK" | "de-AT" | "de-DE" | "de-LU" | "el-GR" | "en-GB" | "en-US" | "es-ES" | "fi-FI" | "fr-BE" | "fr-FR" | "fr-LU" | "hu-HU" | "it-IT" | "nl-BE" | "nl-NL" | "pl-PL" | "pt-PT" | "sk-SK" | "sv-SE";
                            reference?: string;
                            risk_correlation_id?: string;
                            setup_future_usage?: "" | "none" | "off_session";
                        }) | "";
                        pix?: {
                            expires_after_seconds?: number;
                            expires_at?: number;
                            setup_future_usage?: "none";
                        } | "";
                        promptpay?: {
                            setup_future_usage?: "none";
                        } | "";
                        sepa_debit?: ({
                            mandate_options?: Record<string, never>;
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        }) | "";
                        sofort?: ({
                            preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl";
                            setup_future_usage?: "" | "none" | "off_session";
                        }) | "";
                        us_bank_account?: ({
                            financial_connections?: {
                                permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                return_url?: string;
                            };
                            networks?: {
                                requested?: ("ach" | "us_domestic_wire")[];
                            };
                            preferred_settlement_speed?: "" | "fastest" | "standard";
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        }) | "";
                        wechat_pay?: ({
                            app_id?: string;
                            client: "android" | "ios" | "web";
                            setup_future_usage?: "none";
                        }) | "";
                        zip?: {
                            setup_future_usage?: "none";
                        } | "";
                    };
                    payment_method_types?: string[];
                    receipt_email?: string | "";
                    setup_future_usage?: "" | "off_session" | "on_session";
                    shipping?: {
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        carrier?: string;
                        name: string;
                        phone?: string;
                        tracking_number?: string;
                    } | "";
                    statement_descriptor?: string;
                    statement_descriptor_suffix?: string;
                    transfer_data?: {
                        amount?: number;
                    };
                    transfer_group?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_intent"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentIntentsIntentApplyCustomerBalance: {
        parameters: {
            path: {
                intent: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    currency?: string;
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_intent"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentIntentsIntentCancel: {
        parameters: {
            path: {
                intent: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    cancellation_reason?: "abandoned" | "duplicate" | "fraudulent" | "requested_by_customer";
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_intent"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentIntentsIntentCapture: {
        parameters: {
            path: {
                intent: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount_to_capture?: number;
                    application_fee_amount?: number;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    statement_descriptor?: string;
                    statement_descriptor_suffix?: string;
                    transfer_data?: {
                        amount?: number;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_intent"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentIntentsIntentConfirm: {
        parameters: {
            path: {
                intent: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    capture_method?: "automatic" | "automatic_async" | "manual";
                    client_secret?: string;
                    error_on_requires_action?: boolean;
                    expand?: string[];
                    mandate?: string;
                    mandate_data?: ({
                        customer_acceptance: {
                            accepted_at?: number;
                            offline?: Record<string, never>;
                            online?: {
                                ip_address: string;
                                user_agent: string;
                            };
                            type: "offline" | "online";
                        };
                    }) | {
                        customer_acceptance: {
                            online: {
                                ip_address?: string;
                                user_agent?: string;
                            };
                            type: "online";
                        };
                    };
                    off_session?: boolean | ("one_off" | "recurring");
                    payment_method?: string;
                    payment_method_data?: {
                        acss_debit?: {
                            account_number: string;
                            institution_number: string;
                            transit_number: string;
                        };
                        affirm?: Record<string, never>;
                        afterpay_clearpay?: Record<string, never>;
                        alipay?: Record<string, never>;
                        au_becs_debit?: {
                            account_number: string;
                            bsb_number: string;
                        };
                        bacs_debit?: {
                            account_number?: string;
                            sort_code?: string;
                        };
                        bancontact?: Record<string, never>;
                        billing_details?: {
                            address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            } | "";
                            email?: string | "";
                            name?: string | "";
                            phone?: string | "";
                        };
                        blik?: Record<string, never>;
                        boleto?: {
                            tax_id: string;
                        };
                        cashapp?: Record<string, never>;
                        customer_balance?: Record<string, never>;
                        eps?: {
                            bank?: "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau";
                        };
                        fpx?: {
                            bank: "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
                        };
                        giropay?: Record<string, never>;
                        grabpay?: Record<string, never>;
                        ideal?: {
                            bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe";
                        };
                        interac_present?: Record<string, never>;
                        klarna?: {
                            dob?: {
                                day: number;
                                month: number;
                                year: number;
                            };
                        };
                        konbini?: Record<string, never>;
                        link?: Record<string, never>;
                        metadata?: {
                            [key: string]: string;
                        };
                        oxxo?: Record<string, never>;
                        p24?: {
                            bank?: "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "volkswagen_bank";
                        };
                        paynow?: Record<string, never>;
                        paypal?: Record<string, never>;
                        pix?: Record<string, never>;
                        promptpay?: Record<string, never>;
                        radar_options?: {
                            session?: string;
                        };
                        sepa_debit?: {
                            iban: string;
                        };
                        sofort?: {
                            country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
                        };
                        type: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "klarna" | "konbini" | "link" | "oxxo" | "p24" | "paynow" | "paypal" | "pix" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay" | "zip";
                        us_bank_account?: {
                            account_holder_type?: "company" | "individual";
                            account_number?: string;
                            account_type?: "checking" | "savings";
                            financial_connections_account?: string;
                            routing_number?: string;
                        };
                        wechat_pay?: Record<string, never>;
                        zip?: Record<string, never>;
                    };
                    payment_method_options?: {
                        acss_debit?: ({
                            mandate_options?: {
                                custom_mandate_url?: string | "";
                                interval_description?: string;
                                payment_schedule?: "combined" | "interval" | "sporadic";
                                transaction_type?: "business" | "personal";
                            };
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        }) | "";
                        affirm?: ({
                            capture_method?: "" | "manual";
                            preferred_locale?: string;
                            setup_future_usage?: "none";
                        }) | "";
                        afterpay_clearpay?: ({
                            capture_method?: "" | "manual";
                            reference?: string;
                            setup_future_usage?: "none";
                        }) | "";
                        alipay?: ({
                            setup_future_usage?: "" | "none" | "off_session";
                        }) | "";
                        au_becs_debit?: ({
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        }) | "";
                        bacs_debit?: ({
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        }) | "";
                        bancontact?: ({
                            preferred_language?: "de" | "en" | "fr" | "nl";
                            setup_future_usage?: "" | "none" | "off_session";
                        }) | "";
                        blik?: {
                            code?: string;
                        } | "";
                        boleto?: ({
                            expires_after_days?: number;
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        }) | "";
                        card?: ({
                            capture_method?: "" | "manual";
                            cvc_token?: string;
                            installments?: {
                                enabled?: boolean;
                                plan?: {
                                    count: number;
                                    interval: "month";
                                    type: "fixed_count";
                                } | "";
                            };
                            mandate_options?: {
                                amount: number;
                                amount_type: "fixed" | "maximum";
                                description?: string;
                                end_date?: number;
                                interval: "day" | "month" | "sporadic" | "week" | "year";
                                interval_count?: number;
                                reference: string;
                                start_date: number;
                                supported_types?: "india"[];
                            };
                            network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "interac" | "jcb" | "mastercard" | "unionpay" | "unknown" | "visa";
                            request_three_d_secure?: "any" | "automatic";
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                            statement_descriptor_suffix_kana?: string | "";
                            statement_descriptor_suffix_kanji?: string | "";
                        }) | "";
                        card_present?: {
                            request_extended_authorization?: boolean;
                            request_incremental_authorization_support?: boolean;
                        } | "";
                        cashapp?: ({
                            capture_method?: "" | "manual";
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        }) | "";
                        customer_balance?: ({
                            bank_transfer?: {
                                eu_bank_transfer?: {
                                    country: string;
                                };
                                requested_address_types?: ("aba" | "iban" | "sepa" | "sort_code" | "spei" | "swift" | "zengin")[];
                                type: "eu_bank_transfer" | "gb_bank_transfer" | "jp_bank_transfer" | "mx_bank_transfer" | "us_bank_transfer";
                            };
                            funding_type?: "bank_transfer";
                            setup_future_usage?: "none";
                        }) | "";
                        eps?: {
                            setup_future_usage?: "none";
                        } | "";
                        fpx?: {
                            setup_future_usage?: "none";
                        } | "";
                        giropay?: {
                            setup_future_usage?: "none";
                        } | "";
                        grabpay?: {
                            setup_future_usage?: "none";
                        } | "";
                        ideal?: ({
                            setup_future_usage?: "" | "none" | "off_session";
                        }) | "";
                        interac_present?: Record<string, never> | "";
                        klarna?: ({
                            capture_method?: "" | "manual";
                            preferred_locale?: "cs-CZ" | "da-DK" | "de-AT" | "de-CH" | "de-DE" | "el-GR" | "en-AT" | "en-AU" | "en-BE" | "en-CA" | "en-CH" | "en-CZ" | "en-DE" | "en-DK" | "en-ES" | "en-FI" | "en-FR" | "en-GB" | "en-GR" | "en-IE" | "en-IT" | "en-NL" | "en-NO" | "en-NZ" | "en-PL" | "en-PT" | "en-SE" | "en-US" | "es-ES" | "es-US" | "fi-FI" | "fr-BE" | "fr-CA" | "fr-CH" | "fr-FR" | "it-CH" | "it-IT" | "nb-NO" | "nl-BE" | "nl-NL" | "pl-PL" | "pt-PT" | "sv-FI" | "sv-SE";
                            setup_future_usage?: "none";
                        }) | "";
                        konbini?: ({
                            confirmation_number?: string | "";
                            expires_after_days?: number | "";
                            expires_at?: number | "";
                            product_description?: string | "";
                            setup_future_usage?: "none";
                        }) | "";
                        link?: ({
                            capture_method?: "" | "manual";
                            setup_future_usage?: "" | "none" | "off_session";
                        }) | "";
                        oxxo?: {
                            expires_after_days?: number;
                            setup_future_usage?: "none";
                        } | "";
                        p24?: {
                            setup_future_usage?: "none";
                            tos_shown_and_accepted?: boolean;
                        } | "";
                        paynow?: {
                            setup_future_usage?: "none";
                        } | "";
                        paypal?: ({
                            capture_method?: "" | "manual";
                            preferred_locale?: "cs-CZ" | "da-DK" | "de-AT" | "de-DE" | "de-LU" | "el-GR" | "en-GB" | "en-US" | "es-ES" | "fi-FI" | "fr-BE" | "fr-FR" | "fr-LU" | "hu-HU" | "it-IT" | "nl-BE" | "nl-NL" | "pl-PL" | "pt-PT" | "sk-SK" | "sv-SE";
                            reference?: string;
                            risk_correlation_id?: string;
                            setup_future_usage?: "" | "none" | "off_session";
                        }) | "";
                        pix?: {
                            expires_after_seconds?: number;
                            expires_at?: number;
                            setup_future_usage?: "none";
                        } | "";
                        promptpay?: {
                            setup_future_usage?: "none";
                        } | "";
                        sepa_debit?: ({
                            mandate_options?: Record<string, never>;
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                        }) | "";
                        sofort?: ({
                            preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl";
                            setup_future_usage?: "" | "none" | "off_session";
                        }) | "";
                        us_bank_account?: ({
                            financial_connections?: {
                                permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                return_url?: string;
                            };
                            networks?: {
                                requested?: ("ach" | "us_domestic_wire")[];
                            };
                            preferred_settlement_speed?: "" | "fastest" | "standard";
                            setup_future_usage?: "" | "none" | "off_session" | "on_session";
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        }) | "";
                        wechat_pay?: ({
                            app_id?: string;
                            client: "android" | "ios" | "web";
                            setup_future_usage?: "none";
                        }) | "";
                        zip?: {
                            setup_future_usage?: "none";
                        } | "";
                    };
                    payment_method_types?: string[];
                    radar_options?: {
                        session?: string;
                    };
                    receipt_email?: string | "";
                    return_url?: string;
                    setup_future_usage?: "" | "off_session" | "on_session";
                    shipping?: {
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        carrier?: string;
                        name: string;
                        phone?: string;
                        tracking_number?: string;
                    } | "";
                    use_stripe_sdk?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_intent"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentIntentsIntentIncrementAuthorization: {
        parameters: {
            path: {
                intent: string;
            };
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount: number;
                    application_fee_amount?: number;
                    description?: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    };
                    statement_descriptor?: string;
                    transfer_data?: {
                        amount?: number;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_intent"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentIntentsIntentVerifyMicrodeposits: {
        parameters: {
            path: {
                intent: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amounts?: number[];
                    client_secret?: string;
                    descriptor_code?: string;
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_intent"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentLinks: {
        parameters: {
            query?: {
                active?: boolean;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["payment_link"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentLinks: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    after_completion?: {
                        hosted_confirmation?: {
                            custom_message?: string;
                        };
                        redirect?: {
                            url: string;
                        };
                        type: "hosted_confirmation" | "redirect";
                    };
                    allow_promotion_codes?: boolean;
                    application_fee_amount?: number;
                    application_fee_percent?: number;
                    automatic_tax?: {
                        enabled: boolean;
                    };
                    billing_address_collection?: "auto" | "required";
                    consent_collection?: {
                        promotions?: "auto" | "none";
                        terms_of_service?: "none" | "required";
                    };
                    currency?: string;
                    custom_fields?: ({
                        dropdown?: {
                            options: {
                                label: string;
                                value: string;
                            }[];
                        };
                        key: string;
                        label: {
                            custom: string;
                            type: "custom";
                        };
                        numeric?: {
                            maximum_length?: number;
                            minimum_length?: number;
                        };
                        optional?: boolean;
                        text?: {
                            maximum_length?: number;
                            minimum_length?: number;
                        };
                        type: "dropdown" | "numeric" | "text";
                    })[];
                    custom_text?: {
                        shipping_address?: {
                            message: string;
                        } | "";
                        submit?: {
                            message: string;
                        } | "";
                    };
                    customer_creation?: "always" | "if_required";
                    expand?: string[];
                    invoice_creation?: {
                        enabled: boolean;
                        invoice_data?: {
                            account_tax_ids?: string[] | "";
                            custom_fields?: {
                                name: string;
                                value: string;
                            }[] | "";
                            description?: string;
                            footer?: string;
                            metadata?: {
                                [key: string]: string;
                            } | "";
                            rendering_options?: ({
                                amount_tax_display?: "" | "exclude_tax" | "include_inclusive_tax";
                            }) | "";
                        };
                    };
                    line_items: {
                        adjustable_quantity?: {
                            enabled: boolean;
                            maximum?: number;
                            minimum?: number;
                        };
                        price: string;
                        quantity: number;
                    }[];
                    metadata?: {
                        [key: string]: string;
                    };
                    on_behalf_of?: string;
                    payment_intent_data?: {
                        capture_method?: "automatic" | "automatic_async" | "manual";
                        setup_future_usage?: "off_session" | "on_session";
                    };
                    payment_method_collection?: "always" | "if_required";
                    payment_method_types?: ("affirm" | "afterpay_clearpay" | "alipay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "card" | "cashapp" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "klarna" | "konbini" | "link" | "oxxo" | "p24" | "paynow" | "paypal" | "pix" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay")[];
                    phone_number_collection?: {
                        enabled: boolean;
                    };
                    shipping_address_collection?: {
                        allowed_countries: ("AC" | "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AO" | "AQ" | "AR" | "AT" | "AU" | "AW" | "AX" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BQ" | "BR" | "BS" | "BT" | "BV" | "BW" | "BY" | "BZ" | "CA" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CV" | "CW" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GF" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GP" | "GQ" | "GR" | "GS" | "GT" | "GU" | "GW" | "GY" | "HK" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MK" | "ML" | "MM" | "MN" | "MO" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SZ" | "TA" | "TC" | "TD" | "TF" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "US" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VN" | "VU" | "WF" | "WS" | "XK" | "YE" | "YT" | "ZA" | "ZM" | "ZW" | "ZZ")[];
                    };
                    shipping_options?: {
                        shipping_rate?: string;
                    }[];
                    submit_type?: "auto" | "book" | "donate" | "pay";
                    subscription_data?: {
                        description?: string;
                        trial_period_days?: number;
                    };
                    tax_id_collection?: {
                        enabled: boolean;
                    };
                    transfer_data?: {
                        amount?: number;
                        destination: string;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_link"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentLinksPaymentLink: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                payment_link: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_link"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentLinksPaymentLink: {
        parameters: {
            path: {
                payment_link: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    active?: boolean;
                    after_completion?: {
                        hosted_confirmation?: {
                            custom_message?: string;
                        };
                        redirect?: {
                            url: string;
                        };
                        type: "hosted_confirmation" | "redirect";
                    };
                    allow_promotion_codes?: boolean;
                    automatic_tax?: {
                        enabled: boolean;
                    };
                    billing_address_collection?: "auto" | "required";
                    custom_fields?: (({
                        dropdown?: {
                            options: {
                                label: string;
                                value: string;
                            }[];
                        };
                        key: string;
                        label: {
                            custom: string;
                            type: "custom";
                        };
                        numeric?: {
                            maximum_length?: number;
                            minimum_length?: number;
                        };
                        optional?: boolean;
                        text?: {
                            maximum_length?: number;
                            minimum_length?: number;
                        };
                        type: "dropdown" | "numeric" | "text";
                    })[]) | "";
                    custom_text?: {
                        shipping_address?: {
                            message: string;
                        } | "";
                        submit?: {
                            message: string;
                        } | "";
                    };
                    customer_creation?: "always" | "if_required";
                    expand?: string[];
                    invoice_creation?: {
                        enabled: boolean;
                        invoice_data?: {
                            account_tax_ids?: string[] | "";
                            custom_fields?: {
                                name: string;
                                value: string;
                            }[] | "";
                            description?: string;
                            footer?: string;
                            metadata?: {
                                [key: string]: string;
                            } | "";
                            rendering_options?: ({
                                amount_tax_display?: "" | "exclude_tax" | "include_inclusive_tax";
                            }) | "";
                        };
                    };
                    line_items?: {
                        adjustable_quantity?: {
                            enabled: boolean;
                            maximum?: number;
                            minimum?: number;
                        };
                        id: string;
                        quantity?: number;
                    }[];
                    metadata?: {
                        [key: string]: string;
                    };
                    payment_method_collection?: "always" | "if_required";
                    payment_method_types?: (("affirm" | "afterpay_clearpay" | "alipay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "card" | "cashapp" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "klarna" | "konbini" | "link" | "oxxo" | "p24" | "paynow" | "paypal" | "pix" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay")[]) | "";
                    shipping_address_collection?: ({
                        allowed_countries: ("AC" | "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AO" | "AQ" | "AR" | "AT" | "AU" | "AW" | "AX" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BQ" | "BR" | "BS" | "BT" | "BV" | "BW" | "BY" | "BZ" | "CA" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CV" | "CW" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GF" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GP" | "GQ" | "GR" | "GS" | "GT" | "GU" | "GW" | "GY" | "HK" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MK" | "ML" | "MM" | "MN" | "MO" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SZ" | "TA" | "TC" | "TD" | "TF" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "US" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VN" | "VU" | "WF" | "WS" | "XK" | "YE" | "YT" | "ZA" | "ZM" | "ZW" | "ZZ")[];
                    }) | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_link"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentLinksPaymentLinkLineItems: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                payment_link: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["item"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentMethods: {
        parameters: {
            query?: {
                customer?: string;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
                type?: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "card" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "klarna" | "konbini" | "link" | "oxxo" | "p24" | "paynow" | "paypal" | "pix" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay" | "zip";
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["payment_method"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentMethods: {
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    acss_debit?: {
                        account_number: string;
                        institution_number: string;
                        transit_number: string;
                    };
                    affirm?: Record<string, never>;
                    afterpay_clearpay?: Record<string, never>;
                    alipay?: Record<string, never>;
                    au_becs_debit?: {
                        account_number: string;
                        bsb_number: string;
                    };
                    bacs_debit?: {
                        account_number?: string;
                        sort_code?: string;
                    };
                    bancontact?: Record<string, never>;
                    billing_details?: {
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        } | "";
                        email?: string | "";
                        name?: string | "";
                        phone?: string | "";
                    };
                    blik?: Record<string, never>;
                    boleto?: {
                        tax_id: string;
                    };
                    card?: {
                        cvc?: string;
                        exp_month: number;
                        exp_year: number;
                        number: string;
                    } | {
                        token: string;
                    };
                    cashapp?: Record<string, never>;
                    customer?: string;
                    customer_balance?: Record<string, never>;
                    eps?: {
                        bank?: "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau";
                    };
                    expand?: string[];
                    fpx?: {
                        bank: "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
                    };
                    giropay?: Record<string, never>;
                    grabpay?: Record<string, never>;
                    ideal?: {
                        bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe";
                    };
                    interac_present?: Record<string, never>;
                    klarna?: {
                        dob?: {
                            day: number;
                            month: number;
                            year: number;
                        };
                    };
                    konbini?: Record<string, never>;
                    link?: Record<string, never>;
                    metadata?: {
                        [key: string]: string;
                    };
                    oxxo?: Record<string, never>;
                    p24?: {
                        bank?: "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "volkswagen_bank";
                    };
                    payment_method?: string;
                    paynow?: Record<string, never>;
                    paypal?: Record<string, never>;
                    pix?: Record<string, never>;
                    promptpay?: Record<string, never>;
                    radar_options?: {
                        session?: string;
                    };
                    sepa_debit?: {
                        iban: string;
                    };
                    sofort?: {
                        country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
                    };
                    type?: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "card" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "klarna" | "konbini" | "link" | "oxxo" | "p24" | "paynow" | "paypal" | "pix" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay" | "zip";
                    us_bank_account?: {
                        account_holder_type?: "company" | "individual";
                        account_number?: string;
                        account_type?: "checking" | "savings";
                        financial_connections_account?: string;
                        routing_number?: string;
                    };
                    wechat_pay?: Record<string, never>;
                    zip?: Record<string, never>;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_method"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPaymentMethodsPaymentMethod: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                payment_method: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_method"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentMethodsPaymentMethod: {
        parameters: {
            path: {
                payment_method: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    billing_details?: {
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        } | "";
                        email?: string | "";
                        name?: string | "";
                        phone?: string | "";
                    };
                    card?: {
                        exp_month?: number;
                        exp_year?: number;
                    };
                    expand?: string[];
                    link?: Record<string, never>;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    us_bank_account?: {
                        account_holder_type?: "company" | "individual";
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_method"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentMethodsPaymentMethodAttach: {
        parameters: {
            path: {
                payment_method: string;
            };
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    customer: string;
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_method"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPaymentMethodsPaymentMethodDetach: {
        parameters: {
            path: {
                payment_method: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payment_method"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPayouts: {
        parameters: {
            query?: {
                arrival_date?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                destination?: string;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
                status?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["payout"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPayouts: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount: number;
                    currency: string;
                    description?: string;
                    destination?: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    };
                    method?: "instant" | "standard";
                    source_type?: "bank_account" | "card" | "fpx";
                    statement_descriptor?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payout"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPayoutsPayout: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                payout: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payout"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPayoutsPayout: {
        parameters: {
            path: {
                payout: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payout"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPayoutsPayoutCancel: {
        parameters: {
            path: {
                payout: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payout"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPayoutsPayoutReverse: {
        parameters: {
            path: {
                payout: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["payout"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPlans: {
        parameters: {
            query?: {
                active?: boolean;
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                product?: string;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["plan"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPlans: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    active?: boolean;
                    aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum";
                    amount?: number;
                    amount_decimal?: string;
                    billing_scheme?: "per_unit" | "tiered";
                    currency: string;
                    expand?: string[];
                    id?: string;
                    interval: "day" | "month" | "week" | "year";
                    interval_count?: number;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    nickname?: string;
                    product?: {
                        active?: boolean;
                        id?: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        name: string;
                        statement_descriptor?: string;
                        tax_code?: string;
                        unit_label?: string;
                    } | string;
                    tiers?: ({
                        flat_amount?: number;
                        flat_amount_decimal?: string;
                        unit_amount?: number;
                        unit_amount_decimal?: string;
                        up_to: "inf" | number;
                    })[];
                    tiers_mode?: "graduated" | "volume";
                    transform_usage?: {
                        divide_by: number;
                        round: "down" | "up";
                    };
                    trial_period_days?: number;
                    usage_type?: "licensed" | "metered";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["plan"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPlansPlan: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                plan: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["plan"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPlansPlan: {
        parameters: {
            path: {
                plan: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    active?: boolean;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    nickname?: string;
                    product?: string;
                    trial_period_days?: number;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["plan"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeletePlansPlan: {
        parameters: {
            path: {
                plan: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_plan"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPrices: {
        parameters: {
            query?: {
                active?: boolean;
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                currency?: string;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                lookup_keys?: string[];
                product?: string;
                recurring?: {
                    interval?: "day" | "month" | "week" | "year";
                    usage_type?: "licensed" | "metered";
                };
                starting_after?: string;
                type?: "one_time" | "recurring";
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["price"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPrices: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    active?: boolean;
                    billing_scheme?: "per_unit" | "tiered";
                    currency: string;
                    currency_options?: {
                        [key: string]: {
                            custom_unit_amount?: {
                                enabled: boolean;
                                maximum?: number;
                                minimum?: number;
                                preset?: number;
                            };
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            tiers?: ({
                                flat_amount?: number;
                                flat_amount_decimal?: string;
                                unit_amount?: number;
                                unit_amount_decimal?: string;
                                up_to: "inf" | number;
                            })[];
                            unit_amount?: number;
                            unit_amount_decimal?: string;
                        };
                    };
                    custom_unit_amount?: {
                        enabled: boolean;
                        maximum?: number;
                        minimum?: number;
                        preset?: number;
                    };
                    expand?: string[];
                    lookup_key?: string;
                    metadata?: {
                        [key: string]: string;
                    };
                    nickname?: string;
                    product?: string;
                    product_data?: {
                        active?: boolean;
                        id?: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        name: string;
                        statement_descriptor?: string;
                        tax_code?: string;
                        unit_label?: string;
                    };
                    recurring?: {
                        aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum";
                        interval: "day" | "month" | "week" | "year";
                        interval_count?: number;
                        usage_type?: "licensed" | "metered";
                    };
                    tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                    tiers?: ({
                        flat_amount?: number;
                        flat_amount_decimal?: string;
                        unit_amount?: number;
                        unit_amount_decimal?: string;
                        up_to: "inf" | number;
                    })[];
                    tiers_mode?: "graduated" | "volume";
                    transfer_lookup_key?: boolean;
                    transform_quantity?: {
                        divide_by: number;
                        round: "down" | "up";
                    };
                    unit_amount?: number;
                    unit_amount_decimal?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["price"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPricesSearch: {
        parameters: {
            query: {
                expand?: string[];
                limit?: number;
                page?: string;
                query: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["price"][];
                        has_more: boolean;
                        next_page?: string | null;
                        object: "search_result";
                        total_count?: number;
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPricesPrice: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                price: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["price"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPricesPrice: {
        parameters: {
            path: {
                price: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    active?: boolean;
                    currency_options?: ({
                        [key: string]: {
                            custom_unit_amount?: {
                                enabled: boolean;
                                maximum?: number;
                                minimum?: number;
                                preset?: number;
                            };
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            tiers?: ({
                                flat_amount?: number;
                                flat_amount_decimal?: string;
                                unit_amount?: number;
                                unit_amount_decimal?: string;
                                up_to: "inf" | number;
                            })[];
                            unit_amount?: number;
                            unit_amount_decimal?: string;
                        };
                    }) | "";
                    expand?: string[];
                    lookup_key?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    nickname?: string;
                    tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                    transfer_lookup_key?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["price"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetProducts: {
        parameters: {
            query?: {
                active?: boolean;
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                ids?: string[];
                limit?: number;
                shippable?: boolean;
                starting_after?: string;
                url?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["product"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostProducts: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    active?: boolean;
                    default_price_data?: {
                        currency: string;
                        currency_options?: {
                            [key: string]: {
                                custom_unit_amount?: {
                                    enabled: boolean;
                                    maximum?: number;
                                    minimum?: number;
                                    preset?: number;
                                };
                                tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                tiers?: ({
                                    flat_amount?: number;
                                    flat_amount_decimal?: string;
                                    unit_amount?: number;
                                    unit_amount_decimal?: string;
                                    up_to: "inf" | number;
                                })[];
                                unit_amount?: number;
                                unit_amount_decimal?: string;
                            };
                        };
                        recurring?: {
                            interval: "day" | "month" | "week" | "year";
                            interval_count?: number;
                        };
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        unit_amount?: number;
                        unit_amount_decimal?: string;
                    };
                    description?: string;
                    expand?: string[];
                    id?: string;
                    images?: string[];
                    metadata?: {
                        [key: string]: string;
                    };
                    name: string;
                    package_dimensions?: {
                        height: number;
                        length: number;
                        weight: number;
                        width: number;
                    };
                    shippable?: boolean;
                    statement_descriptor?: string;
                    tax_code?: string;
                    unit_label?: string;
                    url?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["product"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetProductsSearch: {
        parameters: {
            query: {
                expand?: string[];
                limit?: number;
                page?: string;
                query: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["product"][];
                        has_more: boolean;
                        next_page?: string | null;
                        object: "search_result";
                        total_count?: number;
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetProductsId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["product"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostProductsId: {
        parameters: {
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    active?: boolean;
                    default_price?: string;
                    description?: string | "";
                    expand?: string[];
                    images?: string[] | "";
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    name?: string;
                    package_dimensions?: {
                        height: number;
                        length: number;
                        weight: number;
                        width: number;
                    } | "";
                    shippable?: boolean;
                    statement_descriptor?: string;
                    tax_code?: string | "";
                    unit_label?: string | "";
                    url?: string | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["product"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteProductsId: {
        parameters: {
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_product"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPromotionCodes: {
        parameters: {
            query?: {
                active?: boolean;
                code?: string;
                coupon?: string;
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                customer?: string;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["promotion_code"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPromotionCodes: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    active?: boolean;
                    code?: string;
                    coupon: string;
                    customer?: string;
                    expand?: string[];
                    expires_at?: number;
                    max_redemptions?: number;
                    metadata?: {
                        [key: string]: string;
                    };
                    restrictions?: {
                        currency_options?: {
                            [key: string]: {
                                minimum_amount?: number;
                            };
                        };
                        first_time_transaction?: boolean;
                        minimum_amount?: number;
                        minimum_amount_currency?: string;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["promotion_code"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetPromotionCodesPromotionCode: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                promotion_code: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["promotion_code"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostPromotionCodesPromotionCode: {
        parameters: {
            path: {
                promotion_code: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    active?: boolean;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    restrictions?: {
                        currency_options?: {
                            [key: string]: {
                                minimum_amount?: number;
                            };
                        };
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["promotion_code"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetQuotes: {
        parameters: {
            query?: {
                customer?: string;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
                status?: "accepted" | "canceled" | "draft" | "open";
                test_clock?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["quote"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostQuotes: {
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    application_fee_amount?: number | "";
                    application_fee_percent?: number | "";
                    automatic_tax?: {
                        enabled: boolean;
                    };
                    collection_method?: "charge_automatically" | "send_invoice";
                    customer?: string;
                    default_tax_rates?: string[] | "";
                    description?: string | "";
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                    }[] | "";
                    expand?: string[];
                    expires_at?: number;
                    footer?: string | "";
                    from_quote?: {
                        is_revision?: boolean;
                        quote: string;
                    };
                    header?: string | "";
                    invoice_settings?: {
                        days_until_due?: number;
                    };
                    line_items?: ({
                        price?: string;
                        price_data?: {
                            currency: string;
                            product: string;
                            recurring?: {
                                interval: "day" | "month" | "week" | "year";
                                interval_count?: number;
                            };
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    })[];
                    metadata?: {
                        [key: string]: string;
                    };
                    on_behalf_of?: string | "";
                    subscription_data?: {
                        description?: string;
                        effective_date?: "current_period_end" | number | "";
                        trial_period_days?: number | "";
                    };
                    test_clock?: string;
                    transfer_data?: {
                        amount?: number;
                        amount_percent?: number;
                        destination: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["quote"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetQuotesQuote: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                quote: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["quote"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostQuotesQuote: {
        parameters: {
            path: {
                quote: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    application_fee_amount?: number | "";
                    application_fee_percent?: number | "";
                    automatic_tax?: {
                        enabled: boolean;
                    };
                    collection_method?: "charge_automatically" | "send_invoice";
                    customer?: string;
                    default_tax_rates?: string[] | "";
                    description?: string | "";
                    discounts?: {
                        coupon?: string;
                        discount?: string;
                    }[] | "";
                    expand?: string[];
                    expires_at?: number;
                    footer?: string | "";
                    header?: string | "";
                    invoice_settings?: {
                        days_until_due?: number;
                    };
                    line_items?: ({
                        id?: string;
                        price?: string;
                        price_data?: {
                            currency: string;
                            product: string;
                            recurring?: {
                                interval: "day" | "month" | "week" | "year";
                                interval_count?: number;
                            };
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    })[];
                    metadata?: {
                        [key: string]: string;
                    };
                    on_behalf_of?: string | "";
                    subscription_data?: {
                        description?: string | "";
                        effective_date?: "current_period_end" | number | "";
                        trial_period_days?: number | "";
                    };
                    transfer_data?: {
                        amount?: number;
                        amount_percent?: number;
                        destination: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["quote"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostQuotesQuoteAccept: {
        parameters: {
            path: {
                quote: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["quote"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostQuotesQuoteCancel: {
        parameters: {
            path: {
                quote: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["quote"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetQuotesQuoteComputedUpfrontLineItems: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                quote: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["item"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostQuotesQuoteFinalize: {
        parameters: {
            path: {
                quote: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    expires_at?: number;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["quote"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetQuotesQuoteLineItems: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                quote: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["item"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetQuotesQuotePdf: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                quote: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/pdf": string;
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetRadarEarlyFraudWarnings: {
        parameters: {
            query?: {
                charge?: string;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                payment_intent?: string;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["radar.early_fraud_warning"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetRadarEarlyFraudWarningsEarlyFraudWarning: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                early_fraud_warning: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["radar.early_fraud_warning"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetRadarValueListItems: {
        parameters: {
            query: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
                value?: string;
                value_list: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["radar.value_list_item"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostRadarValueListItems: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    value: string;
                    value_list: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["radar.value_list_item"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetRadarValueListItemsItem: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                item: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["radar.value_list_item"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteRadarValueListItemsItem: {
        parameters: {
            path: {
                item: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_radar.value_list_item"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetRadarValueLists: {
        parameters: {
            query?: {
                alias?: string;
                contains?: string;
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["radar.value_list"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostRadarValueLists: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    alias: string;
                    expand?: string[];
                    item_type?: "card_bin" | "card_fingerprint" | "case_sensitive_string" | "country" | "customer_id" | "email" | "ip_address" | "sepa_debit_fingerprint" | "string" | "us_bank_account_fingerprint";
                    metadata?: {
                        [key: string]: string;
                    };
                    name: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["radar.value_list"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetRadarValueListsValueList: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                value_list: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["radar.value_list"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostRadarValueListsValueList: {
        parameters: {
            path: {
                value_list: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    alias?: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    };
                    name?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["radar.value_list"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteRadarValueListsValueList: {
        parameters: {
            path: {
                value_list: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_radar.value_list"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetRefunds: {
        parameters: {
            query?: {
                charge?: string;
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                payment_intent?: string;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["refund"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostRefunds: {
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    charge?: string;
                    currency?: string;
                    customer?: string;
                    expand?: string[];
                    instructions_email?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    origin?: "customer_balance";
                    payment_intent?: string;
                    reason?: "duplicate" | "fraudulent" | "requested_by_customer";
                    refund_application_fee?: boolean;
                    reverse_transfer?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["refund"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetRefundsRefund: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                refund: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["refund"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostRefundsRefund: {
        parameters: {
            path: {
                refund: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["refund"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostRefundsRefundCancel: {
        parameters: {
            path: {
                refund: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["refund"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetReportingReportRuns: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["reporting.report_run"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostReportingReportRuns: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    parameters?: {
                        columns?: string[];
                        connected_account?: string;
                        currency?: string;
                        interval_end?: number;
                        interval_start?: number;
                        payout?: string;
                        reporting_category?: "advance" | "advance_funding" | "anticipation_repayment" | "charge" | "charge_failure" | "connect_collection_transfer" | "connect_reserved_funds" | "contribution" | "dispute" | "dispute_reversal" | "fee" | "financing_paydown" | "financing_paydown_reversal" | "financing_payout" | "financing_payout_reversal" | "issuing_authorization_hold" | "issuing_authorization_release" | "issuing_dispute" | "issuing_transaction" | "network_cost" | "other_adjustment" | "partial_capture_reversal" | "payout" | "payout_reversal" | "platform_earning" | "platform_earning_refund" | "refund" | "refund_failure" | "risk_reserved_funds" | "tax" | "topup" | "topup_reversal" | "transfer" | "transfer_reversal";
                        timezone?: "Africa/Abidjan" | "Africa/Accra" | "Africa/Addis_Ababa" | "Africa/Algiers" | "Africa/Asmara" | "Africa/Asmera" | "Africa/Bamako" | "Africa/Bangui" | "Africa/Banjul" | "Africa/Bissau" | "Africa/Blantyre" | "Africa/Brazzaville" | "Africa/Bujumbura" | "Africa/Cairo" | "Africa/Casablanca" | "Africa/Ceuta" | "Africa/Conakry" | "Africa/Dakar" | "Africa/Dar_es_Salaam" | "Africa/Djibouti" | "Africa/Douala" | "Africa/El_Aaiun" | "Africa/Freetown" | "Africa/Gaborone" | "Africa/Harare" | "Africa/Johannesburg" | "Africa/Juba" | "Africa/Kampala" | "Africa/Khartoum" | "Africa/Kigali" | "Africa/Kinshasa" | "Africa/Lagos" | "Africa/Libreville" | "Africa/Lome" | "Africa/Luanda" | "Africa/Lubumbashi" | "Africa/Lusaka" | "Africa/Malabo" | "Africa/Maputo" | "Africa/Maseru" | "Africa/Mbabane" | "Africa/Mogadishu" | "Africa/Monrovia" | "Africa/Nairobi" | "Africa/Ndjamena" | "Africa/Niamey" | "Africa/Nouakchott" | "Africa/Ouagadougou" | "Africa/Porto-Novo" | "Africa/Sao_Tome" | "Africa/Timbuktu" | "Africa/Tripoli" | "Africa/Tunis" | "Africa/Windhoek" | "America/Adak" | "America/Anchorage" | "America/Anguilla" | "America/Antigua" | "America/Araguaina" | "America/Argentina/Buenos_Aires" | "America/Argentina/Catamarca" | "America/Argentina/ComodRivadavia" | "America/Argentina/Cordoba" | "America/Argentina/Jujuy" | "America/Argentina/La_Rioja" | "America/Argentina/Mendoza" | "America/Argentina/Rio_Gallegos" | "America/Argentina/Salta" | "America/Argentina/San_Juan" | "America/Argentina/San_Luis" | "America/Argentina/Tucuman" | "America/Argentina/Ushuaia" | "America/Aruba" | "America/Asuncion" | "America/Atikokan" | "America/Atka" | "America/Bahia" | "America/Bahia_Banderas" | "America/Barbados" | "America/Belem" | "America/Belize" | "America/Blanc-Sablon" | "America/Boa_Vista" | "America/Bogota" | "America/Boise" | "America/Buenos_Aires" | "America/Cambridge_Bay" | "America/Campo_Grande" | "America/Cancun" | "America/Caracas" | "America/Catamarca" | "America/Cayenne" | "America/Cayman" | "America/Chicago" | "America/Chihuahua" | "America/Ciudad_Juarez" | "America/Coral_Harbour" | "America/Cordoba" | "America/Costa_Rica" | "America/Creston" | "America/Cuiaba" | "America/Curacao" | "America/Danmarkshavn" | "America/Dawson" | "America/Dawson_Creek" | "America/Denver" | "America/Detroit" | "America/Dominica" | "America/Edmonton" | "America/Eirunepe" | "America/El_Salvador" | "America/Ensenada" | "America/Fort_Nelson" | "America/Fort_Wayne" | "America/Fortaleza" | "America/Glace_Bay" | "America/Godthab" | "America/Goose_Bay" | "America/Grand_Turk" | "America/Grenada" | "America/Guadeloupe" | "America/Guatemala" | "America/Guayaquil" | "America/Guyana" | "America/Halifax" | "America/Havana" | "America/Hermosillo" | "America/Indiana/Indianapolis" | "America/Indiana/Knox" | "America/Indiana/Marengo" | "America/Indiana/Petersburg" | "America/Indiana/Tell_City" | "America/Indiana/Vevay" | "America/Indiana/Vincennes" | "America/Indiana/Winamac" | "America/Indianapolis" | "America/Inuvik" | "America/Iqaluit" | "America/Jamaica" | "America/Jujuy" | "America/Juneau" | "America/Kentucky/Louisville" | "America/Kentucky/Monticello" | "America/Knox_IN" | "America/Kralendijk" | "America/La_Paz" | "America/Lima" | "America/Los_Angeles" | "America/Louisville" | "America/Lower_Princes" | "America/Maceio" | "America/Managua" | "America/Manaus" | "America/Marigot" | "America/Martinique" | "America/Matamoros" | "America/Mazatlan" | "America/Mendoza" | "America/Menominee" | "America/Merida" | "America/Metlakatla" | "America/Mexico_City" | "America/Miquelon" | "America/Moncton" | "America/Monterrey" | "America/Montevideo" | "America/Montreal" | "America/Montserrat" | "America/Nassau" | "America/New_York" | "America/Nipigon" | "America/Nome" | "America/Noronha" | "America/North_Dakota/Beulah" | "America/North_Dakota/Center" | "America/North_Dakota/New_Salem" | "America/Nuuk" | "America/Ojinaga" | "America/Panama" | "America/Pangnirtung" | "America/Paramaribo" | "America/Phoenix" | "America/Port-au-Prince" | "America/Port_of_Spain" | "America/Porto_Acre" | "America/Porto_Velho" | "America/Puerto_Rico" | "America/Punta_Arenas" | "America/Rainy_River" | "America/Rankin_Inlet" | "America/Recife" | "America/Regina" | "America/Resolute" | "America/Rio_Branco" | "America/Rosario" | "America/Santa_Isabel" | "America/Santarem" | "America/Santiago" | "America/Santo_Domingo" | "America/Sao_Paulo" | "America/Scoresbysund" | "America/Shiprock" | "America/Sitka" | "America/St_Barthelemy" | "America/St_Johns" | "America/St_Kitts" | "America/St_Lucia" | "America/St_Thomas" | "America/St_Vincent" | "America/Swift_Current" | "America/Tegucigalpa" | "America/Thule" | "America/Thunder_Bay" | "America/Tijuana" | "America/Toronto" | "America/Tortola" | "America/Vancouver" | "America/Virgin" | "America/Whitehorse" | "America/Winnipeg" | "America/Yakutat" | "America/Yellowknife" | "Antarctica/Casey" | "Antarctica/Davis" | "Antarctica/DumontDUrville" | "Antarctica/Macquarie" | "Antarctica/Mawson" | "Antarctica/McMurdo" | "Antarctica/Palmer" | "Antarctica/Rothera" | "Antarctica/South_Pole" | "Antarctica/Syowa" | "Antarctica/Troll" | "Antarctica/Vostok" | "Arctic/Longyearbyen" | "Asia/Aden" | "Asia/Almaty" | "Asia/Amman" | "Asia/Anadyr" | "Asia/Aqtau" | "Asia/Aqtobe" | "Asia/Ashgabat" | "Asia/Ashkhabad" | "Asia/Atyrau" | "Asia/Baghdad" | "Asia/Bahrain" | "Asia/Baku" | "Asia/Bangkok" | "Asia/Barnaul" | "Asia/Beirut" | "Asia/Bishkek" | "Asia/Brunei" | "Asia/Calcutta" | "Asia/Chita" | "Asia/Choibalsan" | "Asia/Chongqing" | "Asia/Chungking" | "Asia/Colombo" | "Asia/Dacca" | "Asia/Damascus" | "Asia/Dhaka" | "Asia/Dili" | "Asia/Dubai" | "Asia/Dushanbe" | "Asia/Famagusta" | "Asia/Gaza" | "Asia/Harbin" | "Asia/Hebron" | "Asia/Ho_Chi_Minh" | "Asia/Hong_Kong" | "Asia/Hovd" | "Asia/Irkutsk" | "Asia/Istanbul" | "Asia/Jakarta" | "Asia/Jayapura" | "Asia/Jerusalem" | "Asia/Kabul" | "Asia/Kamchatka" | "Asia/Karachi" | "Asia/Kashgar" | "Asia/Kathmandu" | "Asia/Katmandu" | "Asia/Khandyga" | "Asia/Kolkata" | "Asia/Krasnoyarsk" | "Asia/Kuala_Lumpur" | "Asia/Kuching" | "Asia/Kuwait" | "Asia/Macao" | "Asia/Macau" | "Asia/Magadan" | "Asia/Makassar" | "Asia/Manila" | "Asia/Muscat" | "Asia/Nicosia" | "Asia/Novokuznetsk" | "Asia/Novosibirsk" | "Asia/Omsk" | "Asia/Oral" | "Asia/Phnom_Penh" | "Asia/Pontianak" | "Asia/Pyongyang" | "Asia/Qatar" | "Asia/Qostanay" | "Asia/Qyzylorda" | "Asia/Rangoon" | "Asia/Riyadh" | "Asia/Saigon" | "Asia/Sakhalin" | "Asia/Samarkand" | "Asia/Seoul" | "Asia/Shanghai" | "Asia/Singapore" | "Asia/Srednekolymsk" | "Asia/Taipei" | "Asia/Tashkent" | "Asia/Tbilisi" | "Asia/Tehran" | "Asia/Tel_Aviv" | "Asia/Thimbu" | "Asia/Thimphu" | "Asia/Tokyo" | "Asia/Tomsk" | "Asia/Ujung_Pandang" | "Asia/Ulaanbaatar" | "Asia/Ulan_Bator" | "Asia/Urumqi" | "Asia/Ust-Nera" | "Asia/Vientiane" | "Asia/Vladivostok" | "Asia/Yakutsk" | "Asia/Yangon" | "Asia/Yekaterinburg" | "Asia/Yerevan" | "Atlantic/Azores" | "Atlantic/Bermuda" | "Atlantic/Canary" | "Atlantic/Cape_Verde" | "Atlantic/Faeroe" | "Atlantic/Faroe" | "Atlantic/Jan_Mayen" | "Atlantic/Madeira" | "Atlantic/Reykjavik" | "Atlantic/South_Georgia" | "Atlantic/St_Helena" | "Atlantic/Stanley" | "Australia/ACT" | "Australia/Adelaide" | "Australia/Brisbane" | "Australia/Broken_Hill" | "Australia/Canberra" | "Australia/Currie" | "Australia/Darwin" | "Australia/Eucla" | "Australia/Hobart" | "Australia/LHI" | "Australia/Lindeman" | "Australia/Lord_Howe" | "Australia/Melbourne" | "Australia/NSW" | "Australia/North" | "Australia/Perth" | "Australia/Queensland" | "Australia/South" | "Australia/Sydney" | "Australia/Tasmania" | "Australia/Victoria" | "Australia/West" | "Australia/Yancowinna" | "Brazil/Acre" | "Brazil/DeNoronha" | "Brazil/East" | "Brazil/West" | "CET" | "CST6CDT" | "Canada/Atlantic" | "Canada/Central" | "Canada/Eastern" | "Canada/Mountain" | "Canada/Newfoundland" | "Canada/Pacific" | "Canada/Saskatchewan" | "Canada/Yukon" | "Chile/Continental" | "Chile/EasterIsland" | "Cuba" | "EET" | "EST" | "EST5EDT" | "Egypt" | "Eire" | "Etc/GMT" | "Etc/GMT+0" | "Etc/GMT+1" | "Etc/GMT+10" | "Etc/GMT+11" | "Etc/GMT+12" | "Etc/GMT+2" | "Etc/GMT+3" | "Etc/GMT+4" | "Etc/GMT+5" | "Etc/GMT+6" | "Etc/GMT+7" | "Etc/GMT+8" | "Etc/GMT+9" | "Etc/GMT-0" | "Etc/GMT-1" | "Etc/GMT-10" | "Etc/GMT-11" | "Etc/GMT-12" | "Etc/GMT-13" | "Etc/GMT-14" | "Etc/GMT-2" | "Etc/GMT-3" | "Etc/GMT-4" | "Etc/GMT-5" | "Etc/GMT-6" | "Etc/GMT-7" | "Etc/GMT-8" | "Etc/GMT-9" | "Etc/GMT0" | "Etc/Greenwich" | "Etc/UCT" | "Etc/UTC" | "Etc/Universal" | "Etc/Zulu" | "Europe/Amsterdam" | "Europe/Andorra" | "Europe/Astrakhan" | "Europe/Athens" | "Europe/Belfast" | "Europe/Belgrade" | "Europe/Berlin" | "Europe/Bratislava" | "Europe/Brussels" | "Europe/Bucharest" | "Europe/Budapest" | "Europe/Busingen" | "Europe/Chisinau" | "Europe/Copenhagen" | "Europe/Dublin" | "Europe/Gibraltar" | "Europe/Guernsey" | "Europe/Helsinki" | "Europe/Isle_of_Man" | "Europe/Istanbul" | "Europe/Jersey" | "Europe/Kaliningrad" | "Europe/Kiev" | "Europe/Kirov" | "Europe/Kyiv" | "Europe/Lisbon" | "Europe/Ljubljana" | "Europe/London" | "Europe/Luxembourg" | "Europe/Madrid" | "Europe/Malta" | "Europe/Mariehamn" | "Europe/Minsk" | "Europe/Monaco" | "Europe/Moscow" | "Europe/Nicosia" | "Europe/Oslo" | "Europe/Paris" | "Europe/Podgorica" | "Europe/Prague" | "Europe/Riga" | "Europe/Rome" | "Europe/Samara" | "Europe/San_Marino" | "Europe/Sarajevo" | "Europe/Saratov" | "Europe/Simferopol" | "Europe/Skopje" | "Europe/Sofia" | "Europe/Stockholm" | "Europe/Tallinn" | "Europe/Tirane" | "Europe/Tiraspol" | "Europe/Ulyanovsk" | "Europe/Uzhgorod" | "Europe/Vaduz" | "Europe/Vatican" | "Europe/Vienna" | "Europe/Vilnius" | "Europe/Volgograd" | "Europe/Warsaw" | "Europe/Zagreb" | "Europe/Zaporozhye" | "Europe/Zurich" | "Factory" | "GB" | "GB-Eire" | "GMT" | "GMT+0" | "GMT-0" | "GMT0" | "Greenwich" | "HST" | "Hongkong" | "Iceland" | "Indian/Antananarivo" | "Indian/Chagos" | "Indian/Christmas" | "Indian/Cocos" | "Indian/Comoro" | "Indian/Kerguelen" | "Indian/Mahe" | "Indian/Maldives" | "Indian/Mauritius" | "Indian/Mayotte" | "Indian/Reunion" | "Iran" | "Israel" | "Jamaica" | "Japan" | "Kwajalein" | "Libya" | "MET" | "MST" | "MST7MDT" | "Mexico/BajaNorte" | "Mexico/BajaSur" | "Mexico/General" | "NZ" | "NZ-CHAT" | "Navajo" | "PRC" | "PST8PDT" | "Pacific/Apia" | "Pacific/Auckland" | "Pacific/Bougainville" | "Pacific/Chatham" | "Pacific/Chuuk" | "Pacific/Easter" | "Pacific/Efate" | "Pacific/Enderbury" | "Pacific/Fakaofo" | "Pacific/Fiji" | "Pacific/Funafuti" | "Pacific/Galapagos" | "Pacific/Gambier" | "Pacific/Guadalcanal" | "Pacific/Guam" | "Pacific/Honolulu" | "Pacific/Johnston" | "Pacific/Kanton" | "Pacific/Kiritimati" | "Pacific/Kosrae" | "Pacific/Kwajalein" | "Pacific/Majuro" | "Pacific/Marquesas" | "Pacific/Midway" | "Pacific/Nauru" | "Pacific/Niue" | "Pacific/Norfolk" | "Pacific/Noumea" | "Pacific/Pago_Pago" | "Pacific/Palau" | "Pacific/Pitcairn" | "Pacific/Pohnpei" | "Pacific/Ponape" | "Pacific/Port_Moresby" | "Pacific/Rarotonga" | "Pacific/Saipan" | "Pacific/Samoa" | "Pacific/Tahiti" | "Pacific/Tarawa" | "Pacific/Tongatapu" | "Pacific/Truk" | "Pacific/Wake" | "Pacific/Wallis" | "Pacific/Yap" | "Poland" | "Portugal" | "ROC" | "ROK" | "Singapore" | "Turkey" | "UCT" | "US/Alaska" | "US/Aleutian" | "US/Arizona" | "US/Central" | "US/East-Indiana" | "US/Eastern" | "US/Hawaii" | "US/Indiana-Starke" | "US/Michigan" | "US/Mountain" | "US/Pacific" | "US/Pacific-New" | "US/Samoa" | "UTC" | "Universal" | "W-SU" | "WET" | "Zulu";
                    };
                    report_type: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["reporting.report_run"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetReportingReportRunsReportRun: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                report_run: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["reporting.report_run"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetReportingReportTypes: {
        parameters: {
            query?: {
                expand?: string[];
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["reporting.report_type"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetReportingReportTypesReportType: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                report_type: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["reporting.report_type"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetReviews: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["review"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetReviewsReview: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                review: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["review"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostReviewsReviewApprove: {
        parameters: {
            path: {
                review: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["review"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSetupAttempts: {
        parameters: {
            query: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                setup_intent: string;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["setup_attempt"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSetupIntents: {
        parameters: {
            query?: {
                attach_to_self?: boolean;
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                customer?: string;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                payment_method?: string;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["setup_intent"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSetupIntents: {
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    attach_to_self?: boolean;
                    automatic_payment_methods?: {
                        allow_redirects?: "always" | "never";
                        enabled: boolean;
                    };
                    confirm?: boolean;
                    customer?: string;
                    description?: string;
                    expand?: string[];
                    flow_directions?: ("inbound" | "outbound")[];
                    mandate_data?: {
                        customer_acceptance: {
                            accepted_at?: number;
                            offline?: Record<string, never>;
                            online?: {
                                ip_address: string;
                                user_agent: string;
                            };
                            type: "offline" | "online";
                        };
                    };
                    metadata?: {
                        [key: string]: string;
                    };
                    on_behalf_of?: string;
                    payment_method?: string;
                    payment_method_data?: {
                        acss_debit?: {
                            account_number: string;
                            institution_number: string;
                            transit_number: string;
                        };
                        affirm?: Record<string, never>;
                        afterpay_clearpay?: Record<string, never>;
                        alipay?: Record<string, never>;
                        au_becs_debit?: {
                            account_number: string;
                            bsb_number: string;
                        };
                        bacs_debit?: {
                            account_number?: string;
                            sort_code?: string;
                        };
                        bancontact?: Record<string, never>;
                        billing_details?: {
                            address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            } | "";
                            email?: string | "";
                            name?: string | "";
                            phone?: string | "";
                        };
                        blik?: Record<string, never>;
                        boleto?: {
                            tax_id: string;
                        };
                        cashapp?: Record<string, never>;
                        customer_balance?: Record<string, never>;
                        eps?: {
                            bank?: "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau";
                        };
                        fpx?: {
                            bank: "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
                        };
                        giropay?: Record<string, never>;
                        grabpay?: Record<string, never>;
                        ideal?: {
                            bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe";
                        };
                        interac_present?: Record<string, never>;
                        klarna?: {
                            dob?: {
                                day: number;
                                month: number;
                                year: number;
                            };
                        };
                        konbini?: Record<string, never>;
                        link?: Record<string, never>;
                        metadata?: {
                            [key: string]: string;
                        };
                        oxxo?: Record<string, never>;
                        p24?: {
                            bank?: "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "volkswagen_bank";
                        };
                        paynow?: Record<string, never>;
                        paypal?: Record<string, never>;
                        pix?: Record<string, never>;
                        promptpay?: Record<string, never>;
                        radar_options?: {
                            session?: string;
                        };
                        sepa_debit?: {
                            iban: string;
                        };
                        sofort?: {
                            country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
                        };
                        type: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "klarna" | "konbini" | "link" | "oxxo" | "p24" | "paynow" | "paypal" | "pix" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay" | "zip";
                        us_bank_account?: {
                            account_holder_type?: "company" | "individual";
                            account_number?: string;
                            account_type?: "checking" | "savings";
                            financial_connections_account?: string;
                            routing_number?: string;
                        };
                        wechat_pay?: Record<string, never>;
                        zip?: Record<string, never>;
                    };
                    payment_method_options?: {
                        acss_debit?: {
                            currency?: "cad" | "usd";
                            mandate_options?: {
                                custom_mandate_url?: string | "";
                                default_for?: ("invoice" | "subscription")[];
                                interval_description?: string;
                                payment_schedule?: "combined" | "interval" | "sporadic";
                                transaction_type?: "business" | "personal";
                            };
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        };
                        card?: {
                            mandate_options?: {
                                amount: number;
                                amount_type: "fixed" | "maximum";
                                currency: string;
                                description?: string;
                                end_date?: number;
                                interval: "day" | "month" | "sporadic" | "week" | "year";
                                interval_count?: number;
                                reference: string;
                                start_date: number;
                                supported_types?: "india"[];
                            };
                            network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "interac" | "jcb" | "mastercard" | "unionpay" | "unknown" | "visa";
                            request_three_d_secure?: "any" | "automatic";
                        };
                        link?: Record<string, never>;
                        paypal?: {
                            billing_agreement_id?: string;
                        };
                        sepa_debit?: {
                            mandate_options?: Record<string, never>;
                        };
                        us_bank_account?: {
                            financial_connections?: {
                                permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                return_url?: string;
                            };
                            networks?: {
                                requested?: ("ach" | "us_domestic_wire")[];
                            };
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        };
                    };
                    payment_method_types?: string[];
                    return_url?: string;
                    single_use?: {
                        amount: number;
                        currency: string;
                    };
                    usage?: "off_session" | "on_session";
                    use_stripe_sdk?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["setup_intent"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSetupIntentsIntent: {
        parameters: {
            query?: {
                client_secret?: string;
                expand?: string[];
            };
            path: {
                intent: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["setup_intent"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSetupIntentsIntent: {
        parameters: {
            path: {
                intent: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    attach_to_self?: boolean;
                    customer?: string;
                    description?: string;
                    expand?: string[];
                    flow_directions?: ("inbound" | "outbound")[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    payment_method?: string;
                    payment_method_data?: {
                        acss_debit?: {
                            account_number: string;
                            institution_number: string;
                            transit_number: string;
                        };
                        affirm?: Record<string, never>;
                        afterpay_clearpay?: Record<string, never>;
                        alipay?: Record<string, never>;
                        au_becs_debit?: {
                            account_number: string;
                            bsb_number: string;
                        };
                        bacs_debit?: {
                            account_number?: string;
                            sort_code?: string;
                        };
                        bancontact?: Record<string, never>;
                        billing_details?: {
                            address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            } | "";
                            email?: string | "";
                            name?: string | "";
                            phone?: string | "";
                        };
                        blik?: Record<string, never>;
                        boleto?: {
                            tax_id: string;
                        };
                        cashapp?: Record<string, never>;
                        customer_balance?: Record<string, never>;
                        eps?: {
                            bank?: "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau";
                        };
                        fpx?: {
                            bank: "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
                        };
                        giropay?: Record<string, never>;
                        grabpay?: Record<string, never>;
                        ideal?: {
                            bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe";
                        };
                        interac_present?: Record<string, never>;
                        klarna?: {
                            dob?: {
                                day: number;
                                month: number;
                                year: number;
                            };
                        };
                        konbini?: Record<string, never>;
                        link?: Record<string, never>;
                        metadata?: {
                            [key: string]: string;
                        };
                        oxxo?: Record<string, never>;
                        p24?: {
                            bank?: "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "volkswagen_bank";
                        };
                        paynow?: Record<string, never>;
                        paypal?: Record<string, never>;
                        pix?: Record<string, never>;
                        promptpay?: Record<string, never>;
                        radar_options?: {
                            session?: string;
                        };
                        sepa_debit?: {
                            iban: string;
                        };
                        sofort?: {
                            country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
                        };
                        type: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "klarna" | "konbini" | "link" | "oxxo" | "p24" | "paynow" | "paypal" | "pix" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay" | "zip";
                        us_bank_account?: {
                            account_holder_type?: "company" | "individual";
                            account_number?: string;
                            account_type?: "checking" | "savings";
                            financial_connections_account?: string;
                            routing_number?: string;
                        };
                        wechat_pay?: Record<string, never>;
                        zip?: Record<string, never>;
                    };
                    payment_method_options?: {
                        acss_debit?: {
                            currency?: "cad" | "usd";
                            mandate_options?: {
                                custom_mandate_url?: string | "";
                                default_for?: ("invoice" | "subscription")[];
                                interval_description?: string;
                                payment_schedule?: "combined" | "interval" | "sporadic";
                                transaction_type?: "business" | "personal";
                            };
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        };
                        card?: {
                            mandate_options?: {
                                amount: number;
                                amount_type: "fixed" | "maximum";
                                currency: string;
                                description?: string;
                                end_date?: number;
                                interval: "day" | "month" | "sporadic" | "week" | "year";
                                interval_count?: number;
                                reference: string;
                                start_date: number;
                                supported_types?: "india"[];
                            };
                            network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "interac" | "jcb" | "mastercard" | "unionpay" | "unknown" | "visa";
                            request_three_d_secure?: "any" | "automatic";
                        };
                        link?: Record<string, never>;
                        paypal?: {
                            billing_agreement_id?: string;
                        };
                        sepa_debit?: {
                            mandate_options?: Record<string, never>;
                        };
                        us_bank_account?: {
                            financial_connections?: {
                                permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                return_url?: string;
                            };
                            networks?: {
                                requested?: ("ach" | "us_domestic_wire")[];
                            };
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        };
                    };
                    payment_method_types?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["setup_intent"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSetupIntentsIntentCancel: {
        parameters: {
            path: {
                intent: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    cancellation_reason?: "abandoned" | "duplicate" | "requested_by_customer";
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["setup_intent"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSetupIntentsIntentConfirm: {
        parameters: {
            path: {
                intent: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    client_secret?: string;
                    expand?: string[];
                    mandate_data?: ({
                        customer_acceptance: {
                            accepted_at?: number;
                            offline?: Record<string, never>;
                            online?: {
                                ip_address: string;
                                user_agent: string;
                            };
                            type: "offline" | "online";
                        };
                    }) | {
                        customer_acceptance: {
                            online: {
                                ip_address?: string;
                                user_agent?: string;
                            };
                            type: "online";
                        };
                    };
                    payment_method?: string;
                    payment_method_data?: {
                        acss_debit?: {
                            account_number: string;
                            institution_number: string;
                            transit_number: string;
                        };
                        affirm?: Record<string, never>;
                        afterpay_clearpay?: Record<string, never>;
                        alipay?: Record<string, never>;
                        au_becs_debit?: {
                            account_number: string;
                            bsb_number: string;
                        };
                        bacs_debit?: {
                            account_number?: string;
                            sort_code?: string;
                        };
                        bancontact?: Record<string, never>;
                        billing_details?: {
                            address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            } | "";
                            email?: string | "";
                            name?: string | "";
                            phone?: string | "";
                        };
                        blik?: Record<string, never>;
                        boleto?: {
                            tax_id: string;
                        };
                        cashapp?: Record<string, never>;
                        customer_balance?: Record<string, never>;
                        eps?: {
                            bank?: "arzte_und_apotheker_bank" | "austrian_anadi_bank_ag" | "bank_austria" | "bankhaus_carl_spangler" | "bankhaus_schelhammer_und_schattera_ag" | "bawag_psk_ag" | "bks_bank_ag" | "brull_kallmus_bank_ag" | "btv_vier_lander_bank" | "capital_bank_grawe_gruppe_ag" | "deutsche_bank_ag" | "dolomitenbank" | "easybank_ag" | "erste_bank_und_sparkassen" | "hypo_alpeadriabank_international_ag" | "hypo_bank_burgenland_aktiengesellschaft" | "hypo_noe_lb_fur_niederosterreich_u_wien" | "hypo_oberosterreich_salzburg_steiermark" | "hypo_tirol_bank_ag" | "hypo_vorarlberg_bank_ag" | "marchfelder_bank" | "oberbank_ag" | "raiffeisen_bankengruppe_osterreich" | "schoellerbank_ag" | "sparda_bank_wien" | "volksbank_gruppe" | "volkskreditbank_ag" | "vr_bank_braunau";
                        };
                        fpx?: {
                            bank: "affin_bank" | "agrobank" | "alliance_bank" | "ambank" | "bank_islam" | "bank_muamalat" | "bank_of_china" | "bank_rakyat" | "bsn" | "cimb" | "deutsche_bank" | "hong_leong_bank" | "hsbc" | "kfh" | "maybank2e" | "maybank2u" | "ocbc" | "pb_enterprise" | "public_bank" | "rhb" | "standard_chartered" | "uob";
                        };
                        giropay?: Record<string, never>;
                        grabpay?: Record<string, never>;
                        ideal?: {
                            bank?: "abn_amro" | "asn_bank" | "bunq" | "handelsbanken" | "ing" | "knab" | "moneyou" | "rabobank" | "regiobank" | "revolut" | "sns_bank" | "triodos_bank" | "van_lanschot" | "yoursafe";
                        };
                        interac_present?: Record<string, never>;
                        klarna?: {
                            dob?: {
                                day: number;
                                month: number;
                                year: number;
                            };
                        };
                        konbini?: Record<string, never>;
                        link?: Record<string, never>;
                        metadata?: {
                            [key: string]: string;
                        };
                        oxxo?: Record<string, never>;
                        p24?: {
                            bank?: "alior_bank" | "bank_millennium" | "bank_nowy_bfg_sa" | "bank_pekao_sa" | "banki_spbdzielcze" | "blik" | "bnp_paribas" | "boz" | "citi_handlowy" | "credit_agricole" | "envelobank" | "etransfer_pocztowy24" | "getin_bank" | "ideabank" | "ing" | "inteligo" | "mbank_mtransfer" | "nest_przelew" | "noble_pay" | "pbac_z_ipko" | "plus_bank" | "santander_przelew24" | "tmobile_usbugi_bankowe" | "toyota_bank" | "volkswagen_bank";
                        };
                        paynow?: Record<string, never>;
                        paypal?: Record<string, never>;
                        pix?: Record<string, never>;
                        promptpay?: Record<string, never>;
                        radar_options?: {
                            session?: string;
                        };
                        sepa_debit?: {
                            iban: string;
                        };
                        sofort?: {
                            country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
                        };
                        type: "acss_debit" | "affirm" | "afterpay_clearpay" | "alipay" | "au_becs_debit" | "bacs_debit" | "bancontact" | "blik" | "boleto" | "cashapp" | "customer_balance" | "eps" | "fpx" | "giropay" | "grabpay" | "ideal" | "klarna" | "konbini" | "link" | "oxxo" | "p24" | "paynow" | "paypal" | "pix" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay" | "zip";
                        us_bank_account?: {
                            account_holder_type?: "company" | "individual";
                            account_number?: string;
                            account_type?: "checking" | "savings";
                            financial_connections_account?: string;
                            routing_number?: string;
                        };
                        wechat_pay?: Record<string, never>;
                        zip?: Record<string, never>;
                    };
                    payment_method_options?: {
                        acss_debit?: {
                            currency?: "cad" | "usd";
                            mandate_options?: {
                                custom_mandate_url?: string | "";
                                default_for?: ("invoice" | "subscription")[];
                                interval_description?: string;
                                payment_schedule?: "combined" | "interval" | "sporadic";
                                transaction_type?: "business" | "personal";
                            };
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        };
                        card?: {
                            mandate_options?: {
                                amount: number;
                                amount_type: "fixed" | "maximum";
                                currency: string;
                                description?: string;
                                end_date?: number;
                                interval: "day" | "month" | "sporadic" | "week" | "year";
                                interval_count?: number;
                                reference: string;
                                start_date: number;
                                supported_types?: "india"[];
                            };
                            network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "interac" | "jcb" | "mastercard" | "unionpay" | "unknown" | "visa";
                            request_three_d_secure?: "any" | "automatic";
                        };
                        link?: Record<string, never>;
                        paypal?: {
                            billing_agreement_id?: string;
                        };
                        sepa_debit?: {
                            mandate_options?: Record<string, never>;
                        };
                        us_bank_account?: {
                            financial_connections?: {
                                permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                return_url?: string;
                            };
                            networks?: {
                                requested?: ("ach" | "us_domestic_wire")[];
                            };
                            verification_method?: "automatic" | "instant" | "microdeposits";
                        };
                    };
                    return_url?: string;
                    use_stripe_sdk?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["setup_intent"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSetupIntentsIntentVerifyMicrodeposits: {
        parameters: {
            path: {
                intent: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amounts?: number[];
                    client_secret?: string;
                    descriptor_code?: string;
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["setup_intent"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetShippingRates: {
        parameters: {
            query?: {
                active?: boolean;
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                currency?: string;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["shipping_rate"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostShippingRates: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    delivery_estimate?: {
                        maximum?: {
                            unit: "business_day" | "day" | "hour" | "month" | "week";
                            value: number;
                        };
                        minimum?: {
                            unit: "business_day" | "day" | "hour" | "month" | "week";
                            value: number;
                        };
                    };
                    display_name: string;
                    expand?: string[];
                    fixed_amount?: {
                        amount: number;
                        currency: string;
                        currency_options?: {
                            [key: string]: {
                                amount: number;
                                tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            };
                        };
                    };
                    metadata?: {
                        [key: string]: string;
                    };
                    tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                    tax_code?: string;
                    type?: "fixed_amount";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["shipping_rate"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetShippingRatesShippingRateToken: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                shipping_rate_token: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["shipping_rate"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostShippingRatesShippingRateToken: {
        parameters: {
            path: {
                shipping_rate_token: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    active?: boolean;
                    expand?: string[];
                    fixed_amount?: {
                        currency_options?: {
                            [key: string]: {
                                amount?: number;
                                tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            };
                        };
                    };
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["shipping_rate"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSigmaScheduledQueryRuns: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["scheduled_query_run"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSigmaScheduledQueryRunsScheduledQueryRun: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                scheduled_query_run: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["scheduled_query_run"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSources: {
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    currency?: string;
                    customer?: string;
                    expand?: string[];
                    flow?: "code_verification" | "none" | "receiver" | "redirect";
                    mandate?: {
                        acceptance?: {
                            date?: number;
                            ip?: string;
                            offline?: {
                                contact_email: string;
                            };
                            online?: {
                                date?: number;
                                ip?: string;
                                user_agent?: string;
                            };
                            status: "accepted" | "pending" | "refused" | "revoked";
                            type?: "offline" | "online";
                            user_agent?: string;
                        };
                        amount?: number | "";
                        currency?: string;
                        interval?: "one_time" | "scheduled" | "variable";
                        notification_method?: "deprecated_none" | "email" | "manual" | "none" | "stripe_email";
                    };
                    metadata?: {
                        [key: string]: string;
                    };
                    original_source?: string;
                    owner?: {
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        email?: string;
                        name?: string;
                        phone?: string;
                    };
                    receiver?: {
                        refund_attributes_method?: "email" | "manual" | "none";
                    };
                    redirect?: {
                        return_url: string;
                    };
                    source_order?: {
                        items?: ({
                            amount?: number;
                            currency?: string;
                            description?: string;
                            parent?: string;
                            quantity?: number;
                            type?: "discount" | "shipping" | "sku" | "tax";
                        })[];
                        shipping?: {
                            address: {
                                city?: string;
                                country?: string;
                                line1: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            };
                            carrier?: string;
                            name?: string;
                            phone?: string;
                            tracking_number?: string;
                        };
                    };
                    statement_descriptor?: string;
                    token?: string;
                    type?: string;
                    usage?: "reusable" | "single_use";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["source"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSourcesSource: {
        parameters: {
            query?: {
                client_secret?: string;
                expand?: string[];
            };
            path: {
                source: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["source"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSourcesSource: {
        parameters: {
            path: {
                source: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    expand?: string[];
                    mandate?: {
                        acceptance?: {
                            date?: number;
                            ip?: string;
                            offline?: {
                                contact_email: string;
                            };
                            online?: {
                                date?: number;
                                ip?: string;
                                user_agent?: string;
                            };
                            status: "accepted" | "pending" | "refused" | "revoked";
                            type?: "offline" | "online";
                            user_agent?: string;
                        };
                        amount?: number | "";
                        currency?: string;
                        interval?: "one_time" | "scheduled" | "variable";
                        notification_method?: "deprecated_none" | "email" | "manual" | "none" | "stripe_email";
                    };
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    owner?: {
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        email?: string;
                        name?: string;
                        phone?: string;
                    };
                    source_order?: {
                        items?: ({
                            amount?: number;
                            currency?: string;
                            description?: string;
                            parent?: string;
                            quantity?: number;
                            type?: "discount" | "shipping" | "sku" | "tax";
                        })[];
                        shipping?: {
                            address: {
                                city?: string;
                                country?: string;
                                line1: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            };
                            carrier?: string;
                            name?: string;
                            phone?: string;
                            tracking_number?: string;
                        };
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["source"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSourcesSourceMandateNotificationsMandateNotification: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                mandate_notification: string;
                source: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["source_mandate_notification"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSourcesSourceSourceTransactions: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                source: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["source_transaction"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSourcesSourceSourceTransactionsSourceTransaction: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                source: string;
                source_transaction: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["source_transaction"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSourcesSourceVerify: {
        parameters: {
            path: {
                source: string;
            };
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    values: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["source"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSubscriptionItems: {
        parameters: {
            query: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
                subscription: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["subscription_item"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptionItems: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    billing_thresholds?: {
                        usage_gte: number;
                    } | "";
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    };
                    payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
                    price?: string;
                    price_data?: {
                        currency: string;
                        product: string;
                        recurring: {
                            interval: "day" | "month" | "week" | "year";
                            interval_count?: number;
                        };
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        unit_amount?: number;
                        unit_amount_decimal?: string;
                    };
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                    proration_date?: number;
                    quantity?: number;
                    subscription: string;
                    tax_rates?: string[] | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["subscription_item"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSubscriptionItemsItem: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                item: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["subscription_item"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptionItemsItem: {
        parameters: {
            path: {
                item: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    billing_thresholds?: {
                        usage_gte: number;
                    } | "";
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    off_session?: boolean;
                    payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
                    price?: string;
                    price_data?: {
                        currency: string;
                        product: string;
                        recurring: {
                            interval: "day" | "month" | "week" | "year";
                            interval_count?: number;
                        };
                        tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                        unit_amount?: number;
                        unit_amount_decimal?: string;
                    };
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                    proration_date?: number;
                    quantity?: number;
                    tax_rates?: string[] | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["subscription_item"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteSubscriptionItemsItem: {
        parameters: {
            path: {
                item: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    clear_usage?: boolean;
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                    proration_date?: number;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_subscription_item"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSubscriptionItemsSubscriptionItemUsageRecordSummaries: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                subscription_item: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["usage_record_summary"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptionItemsSubscriptionItemUsageRecords: {
        parameters: {
            path: {
                subscription_item: string;
            };
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    action?: "increment" | "set";
                    expand?: string[];
                    quantity: number;
                    timestamp?: "now" | number;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["usage_record"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSubscriptionSchedules: {
        parameters: {
            query?: {
                canceled_at?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                completed_at?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                customer?: string;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                released_at?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                scheduled?: boolean;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["subscription_schedule"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptionSchedules: {
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    customer?: string;
                    default_settings?: {
                        application_fee_percent?: number;
                        automatic_tax?: {
                            enabled: boolean;
                        };
                        billing_cycle_anchor?: "automatic" | "phase_start";
                        billing_thresholds?: {
                            amount_gte?: number;
                            reset_billing_cycle_anchor?: boolean;
                        } | "";
                        collection_method?: "charge_automatically" | "send_invoice";
                        default_payment_method?: string;
                        description?: string | "";
                        invoice_settings?: {
                            days_until_due?: number;
                        };
                        on_behalf_of?: string | "";
                        transfer_data?: {
                            amount_percent?: number;
                            destination: string;
                        } | "";
                    };
                    end_behavior?: "cancel" | "none" | "release" | "renew";
                    expand?: string[];
                    from_subscription?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    phases?: ({
                        add_invoice_items?: ({
                            price?: string;
                            price_data?: {
                                currency: string;
                                product: string;
                                tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                unit_amount?: number;
                                unit_amount_decimal?: string;
                            };
                            quantity?: number;
                            tax_rates?: string[] | "";
                        })[];
                        application_fee_percent?: number;
                        automatic_tax?: {
                            enabled: boolean;
                        };
                        billing_cycle_anchor?: "automatic" | "phase_start";
                        billing_thresholds?: {
                            amount_gte?: number;
                            reset_billing_cycle_anchor?: boolean;
                        } | "";
                        collection_method?: "charge_automatically" | "send_invoice";
                        coupon?: string;
                        currency?: string;
                        default_payment_method?: string;
                        default_tax_rates?: string[] | "";
                        description?: string | "";
                        end_date?: number;
                        invoice_settings?: {
                            days_until_due?: number;
                        };
                        items: ({
                            billing_thresholds?: {
                                usage_gte: number;
                            } | "";
                            metadata?: {
                                [key: string]: string;
                            };
                            price?: string;
                            price_data?: {
                                currency: string;
                                product: string;
                                recurring: {
                                    interval: "day" | "month" | "week" | "year";
                                    interval_count?: number;
                                };
                                tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                unit_amount?: number;
                                unit_amount_decimal?: string;
                            };
                            quantity?: number;
                            tax_rates?: string[] | "";
                        })[];
                        iterations?: number;
                        metadata?: {
                            [key: string]: string;
                        };
                        on_behalf_of?: string;
                        proration_behavior?: "always_invoice" | "create_prorations" | "none";
                        transfer_data?: {
                            amount_percent?: number;
                            destination: string;
                        };
                        trial?: boolean;
                        trial_end?: number;
                    })[];
                    start_date?: number | "now";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["subscription_schedule"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSubscriptionSchedulesSchedule: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                schedule: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["subscription_schedule"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptionSchedulesSchedule: {
        parameters: {
            path: {
                schedule: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    default_settings?: {
                        application_fee_percent?: number;
                        automatic_tax?: {
                            enabled: boolean;
                        };
                        billing_cycle_anchor?: "automatic" | "phase_start";
                        billing_thresholds?: {
                            amount_gte?: number;
                            reset_billing_cycle_anchor?: boolean;
                        } | "";
                        collection_method?: "charge_automatically" | "send_invoice";
                        default_payment_method?: string;
                        description?: string | "";
                        invoice_settings?: {
                            days_until_due?: number;
                        };
                        on_behalf_of?: string | "";
                        transfer_data?: {
                            amount_percent?: number;
                            destination: string;
                        } | "";
                    };
                    end_behavior?: "cancel" | "none" | "release" | "renew";
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    phases?: ({
                        add_invoice_items?: ({
                            price?: string;
                            price_data?: {
                                currency: string;
                                product: string;
                                tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                unit_amount?: number;
                                unit_amount_decimal?: string;
                            };
                            quantity?: number;
                            tax_rates?: string[] | "";
                        })[];
                        application_fee_percent?: number;
                        automatic_tax?: {
                            enabled: boolean;
                        };
                        billing_cycle_anchor?: "automatic" | "phase_start";
                        billing_thresholds?: {
                            amount_gte?: number;
                            reset_billing_cycle_anchor?: boolean;
                        } | "";
                        collection_method?: "charge_automatically" | "send_invoice";
                        coupon?: string;
                        default_payment_method?: string;
                        default_tax_rates?: string[] | "";
                        description?: string | "";
                        end_date?: number | "now";
                        invoice_settings?: {
                            days_until_due?: number;
                        };
                        items: ({
                            billing_thresholds?: {
                                usage_gte: number;
                            } | "";
                            metadata?: {
                                [key: string]: string;
                            };
                            price?: string;
                            price_data?: {
                                currency: string;
                                product: string;
                                recurring: {
                                    interval: "day" | "month" | "week" | "year";
                                    interval_count?: number;
                                };
                                tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                                unit_amount?: number;
                                unit_amount_decimal?: string;
                            };
                            quantity?: number;
                            tax_rates?: string[] | "";
                        })[];
                        iterations?: number;
                        metadata?: {
                            [key: string]: string;
                        };
                        on_behalf_of?: string;
                        proration_behavior?: "always_invoice" | "create_prorations" | "none";
                        start_date?: number | "now";
                        transfer_data?: {
                            amount_percent?: number;
                            destination: string;
                        };
                        trial?: boolean;
                        trial_end?: number | "now";
                    })[];
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["subscription_schedule"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptionSchedulesScheduleCancel: {
        parameters: {
            path: {
                schedule: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    invoice_now?: boolean;
                    prorate?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["subscription_schedule"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptionSchedulesScheduleRelease: {
        parameters: {
            path: {
                schedule: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    preserve_cancel_date?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["subscription_schedule"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSubscriptions: {
        parameters: {
            query?: {
                automatic_tax?: {
                    enabled: boolean;
                };
                collection_method?: "charge_automatically" | "send_invoice";
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                current_period_end?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                current_period_start?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                customer?: string;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                price?: string;
                starting_after?: string;
                status?: "active" | "all" | "canceled" | "ended" | "incomplete" | "incomplete_expired" | "past_due" | "paused" | "trialing" | "unpaid";
                test_clock?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["subscription"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptions: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    add_invoice_items?: ({
                        price?: string;
                        price_data?: {
                            currency: string;
                            product: string;
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    })[];
                    application_fee_percent?: number;
                    automatic_tax?: {
                        enabled: boolean;
                    };
                    backdate_start_date?: number;
                    billing_cycle_anchor?: number;
                    billing_thresholds?: {
                        amount_gte?: number;
                        reset_billing_cycle_anchor?: boolean;
                    } | "";
                    cancel_at?: number;
                    cancel_at_period_end?: boolean;
                    collection_method?: "charge_automatically" | "send_invoice";
                    coupon?: string;
                    currency?: string;
                    customer: string;
                    days_until_due?: number;
                    default_payment_method?: string;
                    default_source?: string;
                    default_tax_rates?: string[] | "";
                    description?: string;
                    expand?: string[];
                    items?: ({
                        billing_thresholds?: {
                            usage_gte: number;
                        } | "";
                        metadata?: {
                            [key: string]: string;
                        };
                        price?: string;
                        price_data?: {
                            currency: string;
                            product: string;
                            recurring: {
                                interval: "day" | "month" | "week" | "year";
                                interval_count?: number;
                            };
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    })[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    off_session?: boolean;
                    on_behalf_of?: string | "";
                    payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
                    payment_settings?: {
                        payment_method_options?: {
                            acss_debit?: ({
                                mandate_options?: {
                                    transaction_type?: "business" | "personal";
                                };
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            }) | "";
                            bancontact?: ({
                                preferred_language?: "de" | "en" | "fr" | "nl";
                            }) | "";
                            card?: ({
                                mandate_options?: {
                                    amount?: number;
                                    amount_type?: "fixed" | "maximum";
                                    description?: string;
                                };
                                network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "interac" | "jcb" | "mastercard" | "unionpay" | "unknown" | "visa";
                                request_three_d_secure?: "any" | "automatic";
                            }) | "";
                            customer_balance?: {
                                bank_transfer?: {
                                    eu_bank_transfer?: {
                                        country: string;
                                    };
                                    type?: string;
                                };
                                funding_type?: string;
                            } | "";
                            konbini?: Record<string, never> | "";
                            us_bank_account?: ({
                                financial_connections?: {
                                    permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                };
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            }) | "";
                        };
                        payment_method_types?: (("ach_credit_transfer" | "ach_debit" | "acss_debit" | "au_becs_debit" | "bacs_debit" | "bancontact" | "boleto" | "card" | "cashapp" | "customer_balance" | "fpx" | "giropay" | "grabpay" | "ideal" | "konbini" | "link" | "paynow" | "paypal" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay")[]) | "";
                        save_default_payment_method?: "off" | "on_subscription";
                    };
                    pending_invoice_item_interval?: ({
                        interval: "day" | "month" | "week" | "year";
                        interval_count?: number;
                    }) | "";
                    promotion_code?: string;
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                    transfer_data?: {
                        amount_percent?: number;
                        destination: string;
                    };
                    trial_end?: "now" | number;
                    trial_from_plan?: boolean;
                    trial_period_days?: number;
                    trial_settings?: {
                        end_behavior: {
                            missing_payment_method: "cancel" | "create_invoice" | "pause";
                        };
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSubscriptionsSearch: {
        parameters: {
            query: {
                expand?: string[];
                limit?: number;
                page?: string;
                query: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["subscription"][];
                        has_more: boolean;
                        next_page?: string | null;
                        object: "search_result";
                        total_count?: number;
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetSubscriptionsSubscriptionExposedId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                subscription_exposed_id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptionsSubscriptionExposedId: {
        parameters: {
            path: {
                subscription_exposed_id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    add_invoice_items?: ({
                        price?: string;
                        price_data?: {
                            currency: string;
                            product: string;
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    })[];
                    application_fee_percent?: number;
                    automatic_tax?: {
                        enabled: boolean;
                    };
                    billing_cycle_anchor?: "now" | "unchanged";
                    billing_thresholds?: {
                        amount_gte?: number;
                        reset_billing_cycle_anchor?: boolean;
                    } | "";
                    cancel_at?: number | "";
                    cancel_at_period_end?: boolean;
                    cancellation_details?: {
                        comment?: string | "";
                        feedback?: "" | "customer_service" | "low_quality" | "missing_features" | "other" | "switched_service" | "too_complex" | "too_expensive" | "unused";
                    };
                    collection_method?: "charge_automatically" | "send_invoice";
                    coupon?: string;
                    days_until_due?: number;
                    default_payment_method?: string;
                    default_source?: string | "";
                    default_tax_rates?: string[] | "";
                    description?: string | "";
                    expand?: string[];
                    items?: ({
                        billing_thresholds?: {
                            usage_gte: number;
                        } | "";
                        clear_usage?: boolean;
                        deleted?: boolean;
                        id?: string;
                        metadata?: {
                            [key: string]: string;
                        } | "";
                        price?: string;
                        price_data?: {
                            currency: string;
                            product: string;
                            recurring: {
                                interval: "day" | "month" | "week" | "year";
                                interval_count?: number;
                            };
                            tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                            unit_amount?: number;
                            unit_amount_decimal?: string;
                        };
                        quantity?: number;
                        tax_rates?: string[] | "";
                    })[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    off_session?: boolean;
                    on_behalf_of?: string | "";
                    pause_collection?: ({
                        behavior: "keep_as_draft" | "mark_uncollectible" | "void";
                        resumes_at?: number;
                    }) | "";
                    payment_behavior?: "allow_incomplete" | "default_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
                    payment_settings?: {
                        payment_method_options?: {
                            acss_debit?: ({
                                mandate_options?: {
                                    transaction_type?: "business" | "personal";
                                };
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            }) | "";
                            bancontact?: ({
                                preferred_language?: "de" | "en" | "fr" | "nl";
                            }) | "";
                            card?: ({
                                mandate_options?: {
                                    amount?: number;
                                    amount_type?: "fixed" | "maximum";
                                    description?: string;
                                };
                                network?: "amex" | "cartes_bancaires" | "diners" | "discover" | "eftpos_au" | "interac" | "jcb" | "mastercard" | "unionpay" | "unknown" | "visa";
                                request_three_d_secure?: "any" | "automatic";
                            }) | "";
                            customer_balance?: {
                                bank_transfer?: {
                                    eu_bank_transfer?: {
                                        country: string;
                                    };
                                    type?: string;
                                };
                                funding_type?: string;
                            } | "";
                            konbini?: Record<string, never> | "";
                            us_bank_account?: ({
                                financial_connections?: {
                                    permissions?: ("balances" | "ownership" | "payment_method" | "transactions")[];
                                };
                                verification_method?: "automatic" | "instant" | "microdeposits";
                            }) | "";
                        };
                        payment_method_types?: (("ach_credit_transfer" | "ach_debit" | "acss_debit" | "au_becs_debit" | "bacs_debit" | "bancontact" | "boleto" | "card" | "cashapp" | "customer_balance" | "fpx" | "giropay" | "grabpay" | "ideal" | "konbini" | "link" | "paynow" | "paypal" | "promptpay" | "sepa_debit" | "sofort" | "us_bank_account" | "wechat_pay")[]) | "";
                        save_default_payment_method?: "off" | "on_subscription";
                    };
                    pending_invoice_item_interval?: ({
                        interval: "day" | "month" | "week" | "year";
                        interval_count?: number;
                    }) | "";
                    promotion_code?: string;
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                    proration_date?: number;
                    transfer_data?: {
                        amount_percent?: number;
                        destination: string;
                    } | "";
                    trial_end?: "now" | number;
                    trial_from_plan?: boolean;
                    trial_settings?: {
                        end_behavior: {
                            missing_payment_method: "cancel" | "create_invoice" | "pause";
                        };
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteSubscriptionsSubscriptionExposedId: {
        parameters: {
            path: {
                subscription_exposed_id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    cancellation_details?: {
                        comment?: string | "";
                        feedback?: "" | "customer_service" | "low_quality" | "missing_features" | "other" | "switched_service" | "too_complex" | "too_expensive" | "unused";
                    };
                    expand?: string[];
                    invoice_now?: boolean;
                    prorate?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteSubscriptionsSubscriptionExposedIdDiscount: {
        parameters: {
            path: {
                subscription_exposed_id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_discount"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostSubscriptionsSubscriptionResume: {
        parameters: {
            path: {
                subscription: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    billing_cycle_anchor?: "now" | "unchanged";
                    expand?: string[];
                    proration_behavior?: "always_invoice" | "create_prorations" | "none";
                    proration_date?: number;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTaxCalculations: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    currency: string;
                    customer?: string;
                    customer_details?: {
                        address?: {
                            city?: string | "";
                            country: string;
                            line1?: string | "";
                            line2?: string | "";
                            postal_code?: string | "";
                            state?: string | "";
                        };
                        address_source?: "billing" | "shipping";
                        ip_address?: string;
                        tax_ids?: ({
                            type: "ad_nrt" | "ae_trn" | "ar_cuit" | "au_abn" | "au_arn" | "bg_uic" | "bo_tin" | "br_cnpj" | "br_cpf" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_vat" | "cl_tin" | "cn_tin" | "co_nit" | "cr_tin" | "do_rcn" | "ec_ruc" | "eg_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "jp_trn" | "ke_pin" | "kr_brn" | "li_uid" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "no_vat" | "nz_gst" | "pe_ruc" | "ph_tin" | "ro_tin" | "rs_pib" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "sv_nit" | "th_vat" | "tr_tin" | "tw_vat" | "ua_vat" | "us_ein" | "uy_ruc" | "ve_rif" | "vn_tin" | "za_vat";
                            value: string;
                        })[];
                        taxability_override?: "customer_exempt" | "none" | "reverse_charge";
                    };
                    expand?: string[];
                    line_items: ({
                        amount: number;
                        product?: string;
                        quantity?: number;
                        reference?: string;
                        tax_behavior?: "exclusive" | "inclusive";
                        tax_code?: string;
                    })[];
                    shipping_cost?: {
                        amount?: number;
                        shipping_rate?: string;
                        tax_behavior?: "exclusive" | "inclusive";
                        tax_code?: string;
                    };
                    tax_date?: number;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["tax.calculation"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxCalculationsCalculationLineItems: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                calculation: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["tax.calculation_line_item"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxSettings: {
        parameters: {
            query?: {
                expand?: string[];
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["tax.settings"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTaxSettings: {
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    defaults?: {
                        tax_behavior?: "exclusive" | "inclusive" | "inferred_by_currency";
                        tax_code?: string;
                    };
                    expand?: string[];
                    head_office?: {
                        address: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["tax.settings"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTaxTransactionsCreateFromCalculation: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    calculation: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    };
                    reference: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["tax.transaction"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTaxTransactionsCreateReversal: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    flat_amount?: number;
                    line_items?: {
                        amount: number;
                        amount_tax: number;
                        metadata?: {
                            [key: string]: string;
                        };
                        original_line_item: string;
                        quantity?: number;
                        reference: string;
                    }[];
                    metadata?: {
                        [key: string]: string;
                    };
                    mode: "full" | "partial";
                    original_transaction: string;
                    reference: string;
                    shipping_cost?: {
                        amount: number;
                        amount_tax: number;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["tax.transaction"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxTransactionsTransaction: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                transaction: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["tax.transaction"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxTransactionsTransactionLineItems: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                transaction: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["tax.transaction_line_item"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxCodes: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["tax_code"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxCodesId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["tax_code"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxRates: {
        parameters: {
            query?: {
                active?: boolean;
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                inclusive?: boolean;
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["tax_rate"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTaxRates: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    active?: boolean;
                    country?: string;
                    description?: string;
                    display_name: string;
                    expand?: string[];
                    inclusive: boolean;
                    jurisdiction?: string;
                    metadata?: {
                        [key: string]: string;
                    };
                    percentage: number;
                    state?: string;
                    tax_type?: "amusement_tax" | "communications_tax" | "gst" | "hst" | "igst" | "jct" | "lease_tax" | "pst" | "qst" | "rst" | "sales_tax" | "service_tax" | "vat";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["tax_rate"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTaxRatesTaxRate: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                tax_rate: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["tax_rate"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTaxRatesTaxRate: {
        parameters: {
            path: {
                tax_rate: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    active?: boolean;
                    country?: string;
                    description?: string;
                    display_name?: string;
                    expand?: string[];
                    jurisdiction?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    state?: string;
                    tax_type?: "amusement_tax" | "communications_tax" | "gst" | "hst" | "igst" | "jct" | "lease_tax" | "pst" | "qst" | "rst" | "sales_tax" | "service_tax" | "vat";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["tax_rate"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTerminalConfigurations: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                is_account_default?: boolean;
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["terminal.configuration"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalConfigurations: {
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    bbpos_wisepos_e?: {
                        splashscreen?: string | "";
                    };
                    expand?: string[];
                    tipping?: {
                        aud?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        cad?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        chf?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        czk?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        dkk?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        eur?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        gbp?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        hkd?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        myr?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        nok?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        nzd?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        sek?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        sgd?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        usd?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                    } | "";
                    verifone_p400?: {
                        splashscreen?: string | "";
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["terminal.configuration"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTerminalConfigurationsConfiguration: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                configuration: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["terminal.configuration"] | components["schemas"]["deleted_terminal.configuration"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalConfigurationsConfiguration: {
        parameters: {
            path: {
                configuration: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    bbpos_wisepos_e?: ({
                        splashscreen?: string | "";
                    }) | "";
                    expand?: string[];
                    tipping?: {
                        aud?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        cad?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        chf?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        czk?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        dkk?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        eur?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        gbp?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        hkd?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        myr?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        nok?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        nzd?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        sek?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        sgd?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                        usd?: {
                            fixed_amounts?: number[];
                            percentages?: number[];
                            smart_tip_threshold?: number;
                        };
                    } | "";
                    verifone_p400?: ({
                        splashscreen?: string | "";
                    }) | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["terminal.configuration"] | components["schemas"]["deleted_terminal.configuration"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteTerminalConfigurationsConfiguration: {
        parameters: {
            path: {
                configuration: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_terminal.configuration"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalConnectionTokens: {
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    location?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["terminal.connection_token"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTerminalLocations: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["terminal.location"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalLocations: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    address: {
                        city?: string;
                        country: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    configuration_overrides?: string;
                    display_name: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["terminal.location"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTerminalLocationsLocation: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                location: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["terminal.location"] | components["schemas"]["deleted_terminal.location"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalLocationsLocation: {
        parameters: {
            path: {
                location: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    address?: {
                        city?: string;
                        country?: string;
                        line1?: string;
                        line2?: string;
                        postal_code?: string;
                        state?: string;
                    };
                    configuration_overrides?: string | "";
                    display_name?: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["terminal.location"] | components["schemas"]["deleted_terminal.location"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteTerminalLocationsLocation: {
        parameters: {
            path: {
                location: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_terminal.location"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTerminalReaders: {
        parameters: {
            query?: {
                device_type?: "bbpos_chipper2x" | "bbpos_wisepad3" | "bbpos_wisepos_e" | "simulated_wisepos_e" | "stripe_m2" | "verifone_P400";
                ending_before?: string;
                expand?: string[];
                limit?: number;
                location?: string;
                starting_after?: string;
                status?: "offline" | "online";
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["terminal.reader"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalReaders: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    label?: string;
                    location?: string;
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    registration_code: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["terminal.reader"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTerminalReadersReader: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                reader: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["terminal.reader"] | components["schemas"]["deleted_terminal.reader"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalReadersReader: {
        parameters: {
            path: {
                reader: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    label?: string | "";
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["terminal.reader"] | components["schemas"]["deleted_terminal.reader"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteTerminalReadersReader: {
        parameters: {
            path: {
                reader: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_terminal.reader"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalReadersReaderCancelAction: {
        parameters: {
            path: {
                reader: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["terminal.reader"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalReadersReaderProcessPaymentIntent: {
        parameters: {
            path: {
                reader: string;
            };
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    payment_intent: string;
                    process_config?: {
                        skip_tipping?: boolean;
                        tipping?: {
                            amount_eligible?: number;
                        };
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["terminal.reader"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalReadersReaderProcessSetupIntent: {
        parameters: {
            path: {
                reader: string;
            };
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    customer_consent_collected: boolean;
                    expand?: string[];
                    process_config?: Record<string, never>;
                    setup_intent: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["terminal.reader"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalReadersReaderRefundPayment: {
        parameters: {
            path: {
                reader: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    charge?: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    };
                    payment_intent?: string;
                    refund_application_fee?: boolean;
                    reverse_transfer?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["terminal.reader"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTerminalReadersReaderSetReaderDisplay: {
        parameters: {
            path: {
                reader: string;
            };
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    cart?: {
                        currency: string;
                        line_items: {
                            amount: number;
                            description: string;
                            quantity: number;
                        }[];
                        tax?: number;
                        total: number;
                    };
                    expand?: string[];
                    type: "cart";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["terminal.reader"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersCustomersCustomerFundCashBalance: {
        parameters: {
            path: {
                customer: string;
            };
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount: number;
                    currency: string;
                    expand?: string[];
                    reference?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["customer_cash_balance_transaction"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingCardsCardShippingDeliver: {
        parameters: {
            path: {
                card: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.card"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingCardsCardShippingFail: {
        parameters: {
            path: {
                card: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.card"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingCardsCardShippingReturn: {
        parameters: {
            path: {
                card: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.card"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersIssuingCardsCardShippingShip: {
        parameters: {
            path: {
                card: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["issuing.card"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersRefundsRefundExpire: {
        parameters: {
            path: {
                refund: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["refund"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTerminalReadersReaderPresentPaymentMethod: {
        parameters: {
            path: {
                reader: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount_tip?: number;
                    card_present?: {
                        number?: string;
                    };
                    expand?: string[];
                    interac_present?: {
                        number?: string;
                    };
                    type?: "card_present" | "interac_present";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["terminal.reader"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTestHelpersTestClocks: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["test_helpers.test_clock"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTestClocks: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    frozen_time: number;
                    name?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["test_helpers.test_clock"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTestHelpersTestClocksTestClock: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                test_clock: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["test_helpers.test_clock"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteTestHelpersTestClocksTestClock: {
        parameters: {
            path: {
                test_clock: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_test_helpers.test_clock"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTestClocksTestClockAdvance: {
        parameters: {
            path: {
                test_clock: string;
            };
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    frozen_time: number;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["test_helpers.test_clock"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryInboundTransfersIdFail: {
        parameters: {
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    failure_details?: {
                        code?: "account_closed" | "account_frozen" | "bank_account_restricted" | "bank_ownership_changed" | "debit_not_authorized" | "incorrect_account_holder_address" | "incorrect_account_holder_name" | "incorrect_account_holder_tax_id" | "insufficient_funds" | "invalid_account_number" | "invalid_currency" | "no_account" | "other";
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.inbound_transfer"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryInboundTransfersIdReturn: {
        parameters: {
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.inbound_transfer"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryInboundTransfersIdSucceed: {
        parameters: {
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.inbound_transfer"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryOutboundPaymentsIdFail: {
        parameters: {
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.outbound_payment"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryOutboundPaymentsIdPost: {
        parameters: {
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.outbound_payment"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryOutboundPaymentsIdReturn: {
        parameters: {
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    returned_details?: {
                        code?: "account_closed" | "account_frozen" | "bank_account_restricted" | "bank_ownership_changed" | "declined" | "incorrect_account_holder_name" | "invalid_account_number" | "invalid_currency" | "no_account" | "other";
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.outbound_payment"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryOutboundTransfersOutboundTransferFail: {
        parameters: {
            path: {
                outbound_transfer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.outbound_transfer"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryOutboundTransfersOutboundTransferPost: {
        parameters: {
            path: {
                outbound_transfer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.outbound_transfer"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturn: {
        parameters: {
            path: {
                outbound_transfer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    returned_details?: {
                        code?: "account_closed" | "account_frozen" | "bank_account_restricted" | "bank_ownership_changed" | "declined" | "incorrect_account_holder_name" | "invalid_account_number" | "invalid_currency" | "no_account" | "other";
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.outbound_transfer"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryReceivedCredits: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount: number;
                    currency: string;
                    description?: string;
                    expand?: string[];
                    financial_account: string;
                    initiating_payment_method_details?: {
                        type: "us_bank_account";
                        us_bank_account?: {
                            account_holder_name?: string;
                            account_number?: string;
                            routing_number?: string;
                        };
                    };
                    network: "ach" | "us_domestic_wire";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.received_credit"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTestHelpersTreasuryReceivedDebits: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount: number;
                    currency: string;
                    description?: string;
                    expand?: string[];
                    financial_account: string;
                    initiating_payment_method_details?: {
                        type: "us_bank_account";
                        us_bank_account?: {
                            account_holder_name?: string;
                            account_number?: string;
                            routing_number?: string;
                        };
                    };
                    network: "ach";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.received_debit"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTokens: {
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    account?: {
                        business_type?: "company" | "government_entity" | "individual" | "non_profit";
                        company?: {
                            address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            };
                            address_kana?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                                town?: string;
                            };
                            address_kanji?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                                town?: string;
                            };
                            directors_provided?: boolean;
                            executives_provided?: boolean;
                            export_license_id?: string;
                            export_purpose_code?: string;
                            name?: string;
                            name_kana?: string;
                            name_kanji?: string;
                            owners_provided?: boolean;
                            ownership_declaration?: {
                                date?: number;
                                ip?: string;
                                user_agent?: string;
                            };
                            ownership_declaration_shown_and_signed?: boolean;
                            phone?: string;
                            registration_number?: string;
                            structure?: "" | "free_zone_establishment" | "free_zone_llc" | "government_instrumentality" | "governmental_unit" | "incorporated_non_profit" | "incorporated_partnership" | "limited_liability_partnership" | "llc" | "multi_member_llc" | "private_company" | "private_corporation" | "private_partnership" | "public_company" | "public_corporation" | "public_partnership" | "single_member_llc" | "sole_establishment" | "sole_proprietorship" | "tax_exempt_government_instrumentality" | "unincorporated_association" | "unincorporated_non_profit" | "unincorporated_partnership";
                            tax_id?: string;
                            tax_id_registrar?: string;
                            vat_id?: string;
                            verification?: {
                                document?: {
                                    back?: string;
                                    front?: string;
                                };
                            };
                        };
                        individual?: {
                            address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            };
                            address_kana?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                                town?: string;
                            };
                            address_kanji?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                                town?: string;
                            };
                            dob?: {
                                day: number;
                                month: number;
                                year: number;
                            } | "";
                            email?: string;
                            first_name?: string;
                            first_name_kana?: string;
                            first_name_kanji?: string;
                            full_name_aliases?: string[] | "";
                            gender?: string;
                            id_number?: string;
                            id_number_secondary?: string;
                            last_name?: string;
                            last_name_kana?: string;
                            last_name_kanji?: string;
                            maiden_name?: string;
                            metadata?: {
                                [key: string]: string;
                            } | "";
                            phone?: string;
                            political_exposure?: "existing" | "none";
                            registered_address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            };
                            ssn_last_4?: string;
                            verification?: {
                                additional_document?: {
                                    back?: string;
                                    front?: string;
                                };
                                document?: {
                                    back?: string;
                                    front?: string;
                                };
                            };
                        };
                        tos_shown_and_accepted?: boolean;
                    };
                    bank_account?: {
                        account_holder_name?: string;
                        account_holder_type?: "company" | "individual";
                        account_number: string;
                        account_type?: "checking" | "futsu" | "savings" | "toza";
                        country: string;
                        currency?: string;
                        routing_number?: string;
                    };
                    card?: {
                        address_city?: string;
                        address_country?: string;
                        address_line1?: string;
                        address_line2?: string;
                        address_state?: string;
                        address_zip?: string;
                        currency?: string;
                        cvc?: string;
                        exp_month: string;
                        exp_year: string;
                        name?: string;
                        number: string;
                    } | string;
                    customer?: string;
                    cvc_update?: {
                        cvc: string;
                    };
                    expand?: string[];
                    person?: {
                        address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        address_kana?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        address_kanji?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                            town?: string;
                        };
                        dob?: {
                            day: number;
                            month: number;
                            year: number;
                        } | "";
                        documents?: {
                            company_authorization?: {
                                files?: (string | "")[];
                            };
                            passport?: {
                                files?: (string | "")[];
                            };
                            visa?: {
                                files?: (string | "")[];
                            };
                        };
                        email?: string;
                        first_name?: string;
                        first_name_kana?: string;
                        first_name_kanji?: string;
                        full_name_aliases?: string[] | "";
                        gender?: string;
                        id_number?: string;
                        id_number_secondary?: string;
                        last_name?: string;
                        last_name_kana?: string;
                        last_name_kanji?: string;
                        maiden_name?: string;
                        metadata?: {
                            [key: string]: string;
                        } | "";
                        nationality?: string;
                        phone?: string;
                        political_exposure?: string;
                        registered_address?: {
                            city?: string;
                            country?: string;
                            line1?: string;
                            line2?: string;
                            postal_code?: string;
                            state?: string;
                        };
                        relationship?: {
                            director?: boolean;
                            executive?: boolean;
                            owner?: boolean;
                            percent_ownership?: number | "";
                            representative?: boolean;
                            title?: string;
                        };
                        ssn_last_4?: string;
                        verification?: {
                            additional_document?: {
                                back?: string;
                                front?: string;
                            };
                            document?: {
                                back?: string;
                                front?: string;
                            };
                        };
                    };
                    pii?: {
                        id_number?: string;
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["token"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTokensToken: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                token: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["token"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTopups: {
        parameters: {
            query?: {
                amount?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
                status?: "canceled" | "failed" | "pending" | "succeeded";
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["topup"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTopups: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount: number;
                    currency: string;
                    description?: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    source?: string;
                    statement_descriptor?: string;
                    transfer_group?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["topup"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTopupsTopup: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                topup: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["topup"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTopupsTopup: {
        parameters: {
            path: {
                topup: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    description?: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["topup"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTopupsTopupCancel: {
        parameters: {
            path: {
                topup: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["topup"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTransfers: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                destination?: string;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
                transfer_group?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["transfer"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTransfers: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    currency: string;
                    description?: string;
                    destination: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    };
                    source_transaction?: string;
                    source_type?: "bank_account" | "card" | "fpx";
                    transfer_group?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["transfer"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTransfersIdReversals: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["transfer_reversal"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTransfersIdReversals: {
        parameters: {
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount?: number;
                    description?: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    refund_application_fee?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["transfer_reversal"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTransfersTransfer: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                transfer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["transfer"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTransfersTransfer: {
        parameters: {
            path: {
                transfer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    description?: string;
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["transfer"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTransfersTransferReversalsId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                id: string;
                transfer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["transfer_reversal"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTransfersTransferReversalsId: {
        parameters: {
            path: {
                id: string;
                transfer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["transfer_reversal"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryCreditReversals: {
        parameters: {
            query: {
                ending_before?: string;
                expand?: string[];
                financial_account: string;
                limit?: number;
                received_credit?: string;
                starting_after?: string;
                status?: "canceled" | "posted" | "processing";
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["treasury.credit_reversal"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryCreditReversals: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    };
                    received_credit: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.credit_reversal"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryCreditReversalsCreditReversal: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                credit_reversal: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.credit_reversal"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryDebitReversals: {
        parameters: {
            query: {
                ending_before?: string;
                expand?: string[];
                financial_account: string;
                limit?: number;
                received_debit?: string;
                resolution?: "lost" | "won";
                starting_after?: string;
                status?: "canceled" | "completed" | "processing";
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["treasury.debit_reversal"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryDebitReversals: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    };
                    received_debit: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.debit_reversal"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryDebitReversalsDebitReversal: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                debit_reversal: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.debit_reversal"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryFinancialAccounts: {
        parameters: {
            query?: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["treasury.financial_account"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryFinancialAccounts: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    features?: {
                        card_issuing?: {
                            requested: boolean;
                        };
                        deposit_insurance?: {
                            requested: boolean;
                        };
                        financial_addresses?: {
                            aba?: {
                                requested: boolean;
                            };
                        };
                        inbound_transfers?: {
                            ach?: {
                                requested: boolean;
                            };
                        };
                        intra_stripe_flows?: {
                            requested: boolean;
                        };
                        outbound_payments?: {
                            ach?: {
                                requested: boolean;
                            };
                            us_domestic_wire?: {
                                requested: boolean;
                            };
                        };
                        outbound_transfers?: {
                            ach?: {
                                requested: boolean;
                            };
                            us_domestic_wire?: {
                                requested: boolean;
                            };
                        };
                    };
                    metadata?: {
                        [key: string]: string;
                    };
                    platform_restrictions?: {
                        inbound_flows?: "restricted" | "unrestricted";
                        outbound_flows?: "restricted" | "unrestricted";
                    };
                    supported_currencies: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.financial_account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryFinancialAccountsFinancialAccount: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                financial_account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.financial_account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryFinancialAccountsFinancialAccount: {
        parameters: {
            path: {
                financial_account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                    features?: {
                        card_issuing?: {
                            requested: boolean;
                        };
                        deposit_insurance?: {
                            requested: boolean;
                        };
                        financial_addresses?: {
                            aba?: {
                                requested: boolean;
                            };
                        };
                        inbound_transfers?: {
                            ach?: {
                                requested: boolean;
                            };
                        };
                        intra_stripe_flows?: {
                            requested: boolean;
                        };
                        outbound_payments?: {
                            ach?: {
                                requested: boolean;
                            };
                            us_domestic_wire?: {
                                requested: boolean;
                            };
                        };
                        outbound_transfers?: {
                            ach?: {
                                requested: boolean;
                            };
                            us_domestic_wire?: {
                                requested: boolean;
                            };
                        };
                    };
                    metadata?: {
                        [key: string]: string;
                    };
                    platform_restrictions?: {
                        inbound_flows?: "restricted" | "unrestricted";
                        outbound_flows?: "restricted" | "unrestricted";
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.financial_account"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryFinancialAccountsFinancialAccountFeatures: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                financial_account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.financial_account_features"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryFinancialAccountsFinancialAccountFeatures: {
        parameters: {
            path: {
                financial_account: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    card_issuing?: {
                        requested: boolean;
                    };
                    deposit_insurance?: {
                        requested: boolean;
                    };
                    expand?: string[];
                    financial_addresses?: {
                        aba?: {
                            requested: boolean;
                        };
                    };
                    inbound_transfers?: {
                        ach?: {
                            requested: boolean;
                        };
                    };
                    intra_stripe_flows?: {
                        requested: boolean;
                    };
                    outbound_payments?: {
                        ach?: {
                            requested: boolean;
                        };
                        us_domestic_wire?: {
                            requested: boolean;
                        };
                    };
                    outbound_transfers?: {
                        ach?: {
                            requested: boolean;
                        };
                        us_domestic_wire?: {
                            requested: boolean;
                        };
                    };
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.financial_account_features"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryInboundTransfers: {
        parameters: {
            query: {
                ending_before?: string;
                expand?: string[];
                financial_account: string;
                limit?: number;
                starting_after?: string;
                status?: "canceled" | "failed" | "processing" | "succeeded";
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["treasury.inbound_transfer"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryInboundTransfers: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount: number;
                    currency: string;
                    description?: string;
                    expand?: string[];
                    financial_account: string;
                    metadata?: {
                        [key: string]: string;
                    };
                    origin_payment_method: string;
                    statement_descriptor?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.inbound_transfer"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryInboundTransfersId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.inbound_transfer"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryInboundTransfersInboundTransferCancel: {
        parameters: {
            path: {
                inbound_transfer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.inbound_transfer"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryOutboundPayments: {
        parameters: {
            query: {
                customer?: string;
                ending_before?: string;
                expand?: string[];
                financial_account: string;
                limit?: number;
                starting_after?: string;
                status?: "canceled" | "failed" | "posted" | "processing" | "returned";
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["treasury.outbound_payment"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryOutboundPayments: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount: number;
                    currency: string;
                    customer?: string;
                    description?: string;
                    destination_payment_method?: string;
                    destination_payment_method_data?: {
                        billing_details?: {
                            address?: {
                                city?: string;
                                country?: string;
                                line1?: string;
                                line2?: string;
                                postal_code?: string;
                                state?: string;
                            } | "";
                            email?: string | "";
                            name?: string | "";
                            phone?: string | "";
                        };
                        financial_account?: string;
                        metadata?: {
                            [key: string]: string;
                        };
                        type: "financial_account" | "us_bank_account";
                        us_bank_account?: {
                            account_holder_type?: "company" | "individual";
                            account_number?: string;
                            account_type?: "checking" | "savings";
                            financial_connections_account?: string;
                            routing_number?: string;
                        };
                    };
                    destination_payment_method_options?: {
                        us_bank_account?: ({
                            network?: "ach" | "us_domestic_wire";
                        }) | "";
                    };
                    end_user_details?: {
                        ip_address?: string;
                        present: boolean;
                    };
                    expand?: string[];
                    financial_account: string;
                    metadata?: {
                        [key: string]: string;
                    };
                    statement_descriptor?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.outbound_payment"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryOutboundPaymentsId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.outbound_payment"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryOutboundPaymentsIdCancel: {
        parameters: {
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.outbound_payment"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryOutboundTransfers: {
        parameters: {
            query: {
                ending_before?: string;
                expand?: string[];
                financial_account: string;
                limit?: number;
                starting_after?: string;
                status?: "canceled" | "failed" | "posted" | "processing" | "returned";
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["treasury.outbound_transfer"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryOutboundTransfers: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    amount: number;
                    currency: string;
                    description?: string;
                    destination_payment_method?: string;
                    destination_payment_method_options?: {
                        us_bank_account?: ({
                            network?: "ach" | "us_domestic_wire";
                        }) | "";
                    };
                    expand?: string[];
                    financial_account: string;
                    metadata?: {
                        [key: string]: string;
                    };
                    statement_descriptor?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.outbound_transfer"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryOutboundTransfersOutboundTransfer: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                outbound_transfer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.outbound_transfer"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostTreasuryOutboundTransfersOutboundTransferCancel: {
        parameters: {
            path: {
                outbound_transfer: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    expand?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.outbound_transfer"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryReceivedCredits: {
        parameters: {
            query: {
                ending_before?: string;
                expand?: string[];
                financial_account: string;
                limit?: number;
                linked_flows?: {
                    source_flow_type: "credit_reversal" | "other" | "outbound_payment" | "payout";
                };
                starting_after?: string;
                status?: "failed" | "succeeded";
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["treasury.received_credit"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryReceivedCreditsId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.received_credit"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryReceivedDebits: {
        parameters: {
            query: {
                ending_before?: string;
                expand?: string[];
                financial_account: string;
                limit?: number;
                starting_after?: string;
                status?: "failed" | "succeeded";
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["treasury.received_debit"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryReceivedDebitsId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.received_debit"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryTransactionEntries: {
        parameters: {
            query: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                effective_at?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                financial_account: string;
                limit?: number;
                order_by?: "created" | "effective_at";
                starting_after?: string;
                transaction?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["treasury.transaction_entry"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryTransactionEntriesId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.transaction_entry"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryTransactions: {
        parameters: {
            query: {
                created?: {
                    gt?: number;
                    gte?: number;
                    lt?: number;
                    lte?: number;
                } | number;
                ending_before?: string;
                expand?: string[];
                financial_account: string;
                limit?: number;
                order_by?: "created" | "posted_at";
                starting_after?: string;
                status?: "open" | "posted" | "void";
                status_transitions?: {
                    posted_at?: {
                        gt?: number;
                        gte?: number;
                        lt?: number;
                        lte?: number;
                    } | number;
                };
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["treasury.transaction"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetTreasuryTransactionsId: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                id: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["treasury.transaction"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetWebhookEndpoints: {
        parameters: {
            query?: {
                ending_before?: string;
                expand?: string[];
                limit?: number;
                starting_after?: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        data: components["schemas"]["webhook_endpoint"][];
                        has_more: boolean;
                        object: "list";
                        url: string;
                    };
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostWebhookEndpoints: {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    api_version?: "2011-01-01" | "2011-06-21" | "2011-06-28" | "2011-08-01" | "2011-09-15" | "2011-11-17" | "2012-02-23" | "2012-03-25" | "2012-06-18" | "2012-06-28" | "2012-07-09" | "2012-09-24" | "2012-10-26" | "2012-11-07" | "2013-02-11" | "2013-02-13" | "2013-07-05" | "2013-08-12" | "2013-08-13" | "2013-10-29" | "2013-12-03" | "2014-01-31" | "2014-03-13" | "2014-03-28" | "2014-05-19" | "2014-06-13" | "2014-06-17" | "2014-07-22" | "2014-07-26" | "2014-08-04" | "2014-08-20" | "2014-09-08" | "2014-10-07" | "2014-11-05" | "2014-11-20" | "2014-12-08" | "2014-12-17" | "2014-12-22" | "2015-01-11" | "2015-01-26" | "2015-02-10" | "2015-02-16" | "2015-02-18" | "2015-03-24" | "2015-04-07" | "2015-06-15" | "2015-07-07" | "2015-07-13" | "2015-07-28" | "2015-08-07" | "2015-08-19" | "2015-09-03" | "2015-09-08" | "2015-09-23" | "2015-10-01" | "2015-10-12" | "2015-10-16" | "2016-02-03" | "2016-02-19" | "2016-02-22" | "2016-02-23" | "2016-02-29" | "2016-03-07" | "2016-06-15" | "2016-07-06" | "2016-10-19" | "2017-01-27" | "2017-02-14" | "2017-04-06" | "2017-05-25" | "2017-06-05" | "2017-08-15" | "2017-12-14" | "2018-01-23" | "2018-02-05" | "2018-02-06" | "2018-02-28" | "2018-05-21" | "2018-07-27" | "2018-08-23" | "2018-09-06" | "2018-09-24" | "2018-10-31" | "2018-11-08" | "2019-02-11" | "2019-02-19" | "2019-03-14" | "2019-05-16" | "2019-08-14" | "2019-09-09" | "2019-10-08" | "2019-10-17" | "2019-11-05" | "2019-12-03" | "2020-03-02" | "2020-08-27" | "2022-08-01" | "2022-11-15" | "2023-08-16";
                    connect?: boolean;
                    description?: string | "";
                    enabled_events: ("*" | "account.application.authorized" | "account.application.deauthorized" | "account.external_account.created" | "account.external_account.deleted" | "account.external_account.updated" | "account.updated" | "application_fee.created" | "application_fee.refund.updated" | "application_fee.refunded" | "balance.available" | "billing_portal.configuration.created" | "billing_portal.configuration.updated" | "billing_portal.session.created" | "capability.updated" | "cash_balance.funds_available" | "charge.captured" | "charge.dispute.closed" | "charge.dispute.created" | "charge.dispute.funds_reinstated" | "charge.dispute.funds_withdrawn" | "charge.dispute.updated" | "charge.expired" | "charge.failed" | "charge.pending" | "charge.refund.updated" | "charge.refunded" | "charge.succeeded" | "charge.updated" | "checkout.session.async_payment_failed" | "checkout.session.async_payment_succeeded" | "checkout.session.completed" | "checkout.session.expired" | "coupon.created" | "coupon.deleted" | "coupon.updated" | "credit_note.created" | "credit_note.updated" | "credit_note.voided" | "customer.created" | "customer.deleted" | "customer.discount.created" | "customer.discount.deleted" | "customer.discount.updated" | "customer.source.created" | "customer.source.deleted" | "customer.source.expiring" | "customer.source.updated" | "customer.subscription.created" | "customer.subscription.deleted" | "customer.subscription.paused" | "customer.subscription.pending_update_applied" | "customer.subscription.pending_update_expired" | "customer.subscription.resumed" | "customer.subscription.trial_will_end" | "customer.subscription.updated" | "customer.tax_id.created" | "customer.tax_id.deleted" | "customer.tax_id.updated" | "customer.updated" | "customer_cash_balance_transaction.created" | "file.created" | "financial_connections.account.created" | "financial_connections.account.deactivated" | "financial_connections.account.disconnected" | "financial_connections.account.reactivated" | "financial_connections.account.refreshed_balance" | "identity.verification_session.canceled" | "identity.verification_session.created" | "identity.verification_session.processing" | "identity.verification_session.redacted" | "identity.verification_session.requires_input" | "identity.verification_session.verified" | "invoice.created" | "invoice.deleted" | "invoice.finalization_failed" | "invoice.finalized" | "invoice.marked_uncollectible" | "invoice.paid" | "invoice.payment_action_required" | "invoice.payment_failed" | "invoice.payment_succeeded" | "invoice.sent" | "invoice.upcoming" | "invoice.updated" | "invoice.voided" | "invoiceitem.created" | "invoiceitem.deleted" | "invoiceitem.updated" | "issuing_authorization.created" | "issuing_authorization.request" | "issuing_authorization.updated" | "issuing_card.created" | "issuing_card.updated" | "issuing_cardholder.created" | "issuing_cardholder.updated" | "issuing_dispute.closed" | "issuing_dispute.created" | "issuing_dispute.funds_reinstated" | "issuing_dispute.submitted" | "issuing_dispute.updated" | "issuing_transaction.created" | "issuing_transaction.updated" | "mandate.updated" | "order.created" | "payment_intent.amount_capturable_updated" | "payment_intent.canceled" | "payment_intent.created" | "payment_intent.partially_funded" | "payment_intent.payment_failed" | "payment_intent.processing" | "payment_intent.requires_action" | "payment_intent.succeeded" | "payment_link.created" | "payment_link.updated" | "payment_method.attached" | "payment_method.automatically_updated" | "payment_method.detached" | "payment_method.updated" | "payout.canceled" | "payout.created" | "payout.failed" | "payout.paid" | "payout.reconciliation_completed" | "payout.updated" | "person.created" | "person.deleted" | "person.updated" | "plan.created" | "plan.deleted" | "plan.updated" | "price.created" | "price.deleted" | "price.updated" | "product.created" | "product.deleted" | "product.updated" | "promotion_code.created" | "promotion_code.updated" | "quote.accepted" | "quote.canceled" | "quote.created" | "quote.finalized" | "radar.early_fraud_warning.created" | "radar.early_fraud_warning.updated" | "recipient.created" | "recipient.deleted" | "recipient.updated" | "refund.created" | "refund.updated" | "reporting.report_run.failed" | "reporting.report_run.succeeded" | "reporting.report_type.updated" | "review.closed" | "review.opened" | "setup_intent.canceled" | "setup_intent.created" | "setup_intent.requires_action" | "setup_intent.setup_failed" | "setup_intent.succeeded" | "sigma.scheduled_query_run.created" | "sku.created" | "sku.deleted" | "sku.updated" | "source.canceled" | "source.chargeable" | "source.failed" | "source.mandate_notification" | "source.refund_attributes_required" | "source.transaction.created" | "source.transaction.updated" | "subscription_schedule.aborted" | "subscription_schedule.canceled" | "subscription_schedule.completed" | "subscription_schedule.created" | "subscription_schedule.expiring" | "subscription_schedule.released" | "subscription_schedule.updated" | "tax.settings.updated" | "tax_rate.created" | "tax_rate.updated" | "terminal.reader.action_failed" | "terminal.reader.action_succeeded" | "test_helpers.test_clock.advancing" | "test_helpers.test_clock.created" | "test_helpers.test_clock.deleted" | "test_helpers.test_clock.internal_failure" | "test_helpers.test_clock.ready" | "topup.canceled" | "topup.created" | "topup.failed" | "topup.reversed" | "topup.succeeded" | "transfer.created" | "transfer.reversed" | "transfer.updated" | "treasury.credit_reversal.created" | "treasury.credit_reversal.posted" | "treasury.debit_reversal.completed" | "treasury.debit_reversal.created" | "treasury.debit_reversal.initial_credit_granted" | "treasury.financial_account.closed" | "treasury.financial_account.created" | "treasury.financial_account.features_status_updated" | "treasury.inbound_transfer.canceled" | "treasury.inbound_transfer.created" | "treasury.inbound_transfer.failed" | "treasury.inbound_transfer.succeeded" | "treasury.outbound_payment.canceled" | "treasury.outbound_payment.created" | "treasury.outbound_payment.expected_arrival_date_updated" | "treasury.outbound_payment.failed" | "treasury.outbound_payment.posted" | "treasury.outbound_payment.returned" | "treasury.outbound_transfer.canceled" | "treasury.outbound_transfer.created" | "treasury.outbound_transfer.expected_arrival_date_updated" | "treasury.outbound_transfer.failed" | "treasury.outbound_transfer.posted" | "treasury.outbound_transfer.returned" | "treasury.received_credit.created" | "treasury.received_credit.failed" | "treasury.received_credit.succeeded" | "treasury.received_debit.created")[];
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    url: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["webhook_endpoint"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    GetWebhookEndpointsWebhookEndpoint: {
        parameters: {
            query?: {
                expand?: string[];
            };
            path: {
                webhook_endpoint: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["webhook_endpoint"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    PostWebhookEndpointsWebhookEndpoint: {
        parameters: {
            path: {
                webhook_endpoint: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    description?: string | "";
                    disabled?: boolean;
                    enabled_events?: ("*" | "account.application.authorized" | "account.application.deauthorized" | "account.external_account.created" | "account.external_account.deleted" | "account.external_account.updated" | "account.updated" | "application_fee.created" | "application_fee.refund.updated" | "application_fee.refunded" | "balance.available" | "billing_portal.configuration.created" | "billing_portal.configuration.updated" | "billing_portal.session.created" | "capability.updated" | "cash_balance.funds_available" | "charge.captured" | "charge.dispute.closed" | "charge.dispute.created" | "charge.dispute.funds_reinstated" | "charge.dispute.funds_withdrawn" | "charge.dispute.updated" | "charge.expired" | "charge.failed" | "charge.pending" | "charge.refund.updated" | "charge.refunded" | "charge.succeeded" | "charge.updated" | "checkout.session.async_payment_failed" | "checkout.session.async_payment_succeeded" | "checkout.session.completed" | "checkout.session.expired" | "coupon.created" | "coupon.deleted" | "coupon.updated" | "credit_note.created" | "credit_note.updated" | "credit_note.voided" | "customer.created" | "customer.deleted" | "customer.discount.created" | "customer.discount.deleted" | "customer.discount.updated" | "customer.source.created" | "customer.source.deleted" | "customer.source.expiring" | "customer.source.updated" | "customer.subscription.created" | "customer.subscription.deleted" | "customer.subscription.paused" | "customer.subscription.pending_update_applied" | "customer.subscription.pending_update_expired" | "customer.subscription.resumed" | "customer.subscription.trial_will_end" | "customer.subscription.updated" | "customer.tax_id.created" | "customer.tax_id.deleted" | "customer.tax_id.updated" | "customer.updated" | "customer_cash_balance_transaction.created" | "file.created" | "financial_connections.account.created" | "financial_connections.account.deactivated" | "financial_connections.account.disconnected" | "financial_connections.account.reactivated" | "financial_connections.account.refreshed_balance" | "identity.verification_session.canceled" | "identity.verification_session.created" | "identity.verification_session.processing" | "identity.verification_session.redacted" | "identity.verification_session.requires_input" | "identity.verification_session.verified" | "invoice.created" | "invoice.deleted" | "invoice.finalization_failed" | "invoice.finalized" | "invoice.marked_uncollectible" | "invoice.paid" | "invoice.payment_action_required" | "invoice.payment_failed" | "invoice.payment_succeeded" | "invoice.sent" | "invoice.upcoming" | "invoice.updated" | "invoice.voided" | "invoiceitem.created" | "invoiceitem.deleted" | "invoiceitem.updated" | "issuing_authorization.created" | "issuing_authorization.request" | "issuing_authorization.updated" | "issuing_card.created" | "issuing_card.updated" | "issuing_cardholder.created" | "issuing_cardholder.updated" | "issuing_dispute.closed" | "issuing_dispute.created" | "issuing_dispute.funds_reinstated" | "issuing_dispute.submitted" | "issuing_dispute.updated" | "issuing_transaction.created" | "issuing_transaction.updated" | "mandate.updated" | "order.created" | "payment_intent.amount_capturable_updated" | "payment_intent.canceled" | "payment_intent.created" | "payment_intent.partially_funded" | "payment_intent.payment_failed" | "payment_intent.processing" | "payment_intent.requires_action" | "payment_intent.succeeded" | "payment_link.created" | "payment_link.updated" | "payment_method.attached" | "payment_method.automatically_updated" | "payment_method.detached" | "payment_method.updated" | "payout.canceled" | "payout.created" | "payout.failed" | "payout.paid" | "payout.reconciliation_completed" | "payout.updated" | "person.created" | "person.deleted" | "person.updated" | "plan.created" | "plan.deleted" | "plan.updated" | "price.created" | "price.deleted" | "price.updated" | "product.created" | "product.deleted" | "product.updated" | "promotion_code.created" | "promotion_code.updated" | "quote.accepted" | "quote.canceled" | "quote.created" | "quote.finalized" | "radar.early_fraud_warning.created" | "radar.early_fraud_warning.updated" | "recipient.created" | "recipient.deleted" | "recipient.updated" | "refund.created" | "refund.updated" | "reporting.report_run.failed" | "reporting.report_run.succeeded" | "reporting.report_type.updated" | "review.closed" | "review.opened" | "setup_intent.canceled" | "setup_intent.created" | "setup_intent.requires_action" | "setup_intent.setup_failed" | "setup_intent.succeeded" | "sigma.scheduled_query_run.created" | "sku.created" | "sku.deleted" | "sku.updated" | "source.canceled" | "source.chargeable" | "source.failed" | "source.mandate_notification" | "source.refund_attributes_required" | "source.transaction.created" | "source.transaction.updated" | "subscription_schedule.aborted" | "subscription_schedule.canceled" | "subscription_schedule.completed" | "subscription_schedule.created" | "subscription_schedule.expiring" | "subscription_schedule.released" | "subscription_schedule.updated" | "tax.settings.updated" | "tax_rate.created" | "tax_rate.updated" | "terminal.reader.action_failed" | "terminal.reader.action_succeeded" | "test_helpers.test_clock.advancing" | "test_helpers.test_clock.created" | "test_helpers.test_clock.deleted" | "test_helpers.test_clock.internal_failure" | "test_helpers.test_clock.ready" | "topup.canceled" | "topup.created" | "topup.failed" | "topup.reversed" | "topup.succeeded" | "transfer.created" | "transfer.reversed" | "transfer.updated" | "treasury.credit_reversal.created" | "treasury.credit_reversal.posted" | "treasury.debit_reversal.completed" | "treasury.debit_reversal.created" | "treasury.debit_reversal.initial_credit_granted" | "treasury.financial_account.closed" | "treasury.financial_account.created" | "treasury.financial_account.features_status_updated" | "treasury.inbound_transfer.canceled" | "treasury.inbound_transfer.created" | "treasury.inbound_transfer.failed" | "treasury.inbound_transfer.succeeded" | "treasury.outbound_payment.canceled" | "treasury.outbound_payment.created" | "treasury.outbound_payment.expected_arrival_date_updated" | "treasury.outbound_payment.failed" | "treasury.outbound_payment.posted" | "treasury.outbound_payment.returned" | "treasury.outbound_transfer.canceled" | "treasury.outbound_transfer.created" | "treasury.outbound_transfer.expected_arrival_date_updated" | "treasury.outbound_transfer.failed" | "treasury.outbound_transfer.posted" | "treasury.outbound_transfer.returned" | "treasury.received_credit.created" | "treasury.received_credit.failed" | "treasury.received_credit.succeeded" | "treasury.received_debit.created")[];
                    expand?: string[];
                    metadata?: {
                        [key: string]: string;
                    } | "";
                    url?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["webhook_endpoint"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteWebhookEndpointsWebhookEndpoint: {
        parameters: {
            path: {
                webhook_endpoint: string;
            };
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": Record<string, never>;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deleted_webhook_endpoint"];
                };
            };
            default: {
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
}
