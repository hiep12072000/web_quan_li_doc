export interface paths {
    "/admin/hooks": {
        get: operations["enterprise-admin/list-global-webhooks"];
        post: operations["enterprise-admin/create-global-webhook"];
    };
    "/admin/hooks/{hook_id}": {
        get: operations["enterprise-admin/get-global-webhook"];
        delete: operations["enterprise-admin/delete-global-webhook"];
        patch: operations["enterprise-admin/update-global-webhook"];
    };
    "/admin/hooks/{hook_id}/pings": {
        post: operations["enterprise-admin/ping-global-webhook"];
    };
    "/admin/keys": {
        get: operations["enterprise-admin/list-public-keys"];
    };
    "/admin/keys/{key_ids}": {
        delete: operations["enterprise-admin/delete-public-key"];
    };
    "/admin/ldap/teams/{team_id}/mapping": {
        patch: operations["enterprise-admin/update-ldap-mapping-for-team"];
    };
    "/admin/ldap/teams/{team_id}/sync": {
        post: operations["enterprise-admin/sync-ldap-mapping-for-team"];
    };
    "/admin/ldap/users/{username}/mapping": {
        patch: operations["enterprise-admin/update-ldap-mapping-for-user"];
    };
    "/admin/ldap/users/{username}/sync": {
        post: operations["enterprise-admin/sync-ldap-mapping-for-user"];
    };
    "/admin/organizations": {
        post: operations["enterprise-admin/create-org"];
    };
    "/admin/organizations/{org}": {
        patch: operations["enterprise-admin/update-org-name"];
    };
    "/admin/pre-receive-environments": {
        get: operations["enterprise-admin/list-pre-receive-environments"];
        post: operations["enterprise-admin/create-pre-receive-environment"];
    };
    "/admin/pre-receive-environments/{pre_receive_environment_id}": {
        get: operations["enterprise-admin/get-pre-receive-environment"];
        delete: operations["enterprise-admin/delete-pre-receive-environment"];
        patch: operations["enterprise-admin/update-pre-receive-environment"];
    };
    "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads": {
        post: operations["enterprise-admin/start-pre-receive-environment-download"];
    };
    "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest": {
        get: operations["enterprise-admin/get-download-status-for-pre-receive-environment"];
    };
    "/admin/pre-receive-hooks": {
        get: operations["enterprise-admin/list-pre-receive-hooks"];
        post: operations["enterprise-admin/create-pre-receive-hook"];
    };
    "/admin/pre-receive-hooks/{pre_receive_hook_id}": {
        get: operations["enterprise-admin/get-pre-receive-hook"];
        delete: operations["enterprise-admin/delete-pre-receive-hook"];
        patch: operations["enterprise-admin/update-pre-receive-hook"];
    };
    "/admin/tokens": {
        get: operations["enterprise-admin/list-personal-access-tokens"];
    };
    "/admin/tokens/{token_id}": {
        delete: operations["enterprise-admin/delete-personal-access-token"];
    };
    "/admin/users": {
        post: operations["enterprise-admin/create-user"];
    };
    "/admin/users/{username}": {
        delete: operations["enterprise-admin/delete-user"];
        patch: operations["enterprise-admin/update-username-for-user"];
    };
    "/admin/users/{username}/authorizations": {
        post: operations["enterprise-admin/create-impersonation-o-auth-token"];
        delete: operations["enterprise-admin/delete-impersonation-o-auth-token"];
    };
    "/app/installations": {
        get: operations["apps/list-installations"];
    };
    "/app/installations/{installation_id}": {
        get: operations["apps/get-installation"];
    };
    "/app/installations/{installation_id}/access_tokens": {
        post: operations["apps/create-installation-access-token"];
    };
    "/applications/grants": {
        get: operations["oauth-authorizations/list-grants"];
    };
    "/applications/grants/{grant_id}": {
        get: operations["oauth-authorizations/get-grant"];
        delete: operations["oauth-authorizations/delete-grant"];
    };
    "/applications/{client_id}/token": {
        post: operations["apps/check-token"];
        patch: operations["apps/reset-token"];
    };
    "/applications/{client_id}/token/scoped": {
        post: operations["apps/scope-token"];
    };
    "/authorizations": {
        get: operations["oauth-authorizations/list-authorizations"];
        post: operations["oauth-authorizations/create-authorization"];
    };
    "/authorizations/clients/{client_id}": {
        put: operations["oauth-authorizations/get-or-create-authorization-for-app"];
    };
    "/authorizations/clients/{client_id}/{fingerprint}": {
        put: operations["oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint"];
    };
    "/authorizations/{authorization_id}": {
        get: operations["oauth-authorizations/get-authorization"];
        delete: operations["oauth-authorizations/delete-authorization"];
        patch: operations["oauth-authorizations/update-authorization"];
    };
    "/enterprise/announcement": {
        get: operations["enterprise-admin/get-announcement"];
        delete: operations["enterprise-admin/remove-announcement"];
        patch: operations["enterprise-admin/set-announcement"];
    };
    "/enterprise/settings/license": {
        get: operations["enterprise-admin/get-license-information"];
    };
    "/enterprise/stats/all": {
        get: operations["enterprise-admin/get-all-stats"];
    };
    "/enterprise/stats/comments": {
        get: operations["enterprise-admin/get-comment-stats"];
    };
    "/enterprise/stats/gists": {
        get: operations["enterprise-admin/get-gist-stats"];
    };
    "/enterprise/stats/hooks": {
        get: operations["enterprise-admin/get-hooks-stats"];
    };
    "/enterprise/stats/issues": {
        get: operations["enterprise-admin/get-issue-stats"];
    };
    "/enterprise/stats/milestones": {
        get: operations["enterprise-admin/get-milestone-stats"];
    };
    "/enterprise/stats/orgs": {
        get: operations["enterprise-admin/get-org-stats"];
    };
    "/enterprise/stats/pages": {
        get: operations["enterprise-admin/get-pages-stats"];
    };
    "/enterprise/stats/pulls": {
        get: operations["enterprise-admin/get-pull-request-stats"];
    };
    "/enterprise/stats/repos": {
        get: operations["enterprise-admin/get-repo-stats"];
    };
    "/enterprise/stats/users": {
        get: operations["enterprise-admin/get-user-stats"];
    };
    "/enterprises/{enterprise}/actions/cache/usage-policy": {
        get: operations["actions/get-actions-cache-usage-policy-for-enterprise"];
        patch: operations["actions/set-actions-cache-usage-policy-for-enterprise"];
    };
    "/enterprises/{enterprise}/actions/permissions/selected-actions": {
        get: operations["enterprise-admin/get-allowed-actions-enterprise"];
        put: operations["enterprise-admin/set-allowed-actions-enterprise"];
    };
    "/enterprises/{enterprise}/audit-log": {
        get: operations["enterprise-admin/get-audit-log"];
    };
    "/enterprises/{enterprise}/secret-scanning/alerts": {
        get: operations["secret-scanning/list-alerts-for-enterprise"];
    };
    "/meta": {
        get: operations["meta/get"];
    };
    "/organizations/{organization_id}/custom_roles": {
        get: operations["orgs/list-custom-roles"];
    };
    "/orgs/{org}": {
        get: operations["orgs/get"];
        patch: operations["orgs/update"];
    };
    "/orgs/{org}/actions/permissions/selected-actions": {
        get: operations["actions/get-allowed-actions-organization"];
        put: operations["actions/set-allowed-actions-organization"];
    };
    "/orgs/{org}/audit-log": {
        get: operations["orgs/get-audit-log"];
    };
    "/orgs/{org}/external-group/{group_id}": {
        get: operations["teams/external-idp-group-info-for-org"];
    };
    "/orgs/{org}/external-groups": {
        get: operations["teams/list-external-idp-groups-for-org"];
    };
    "/orgs/{org}/installation": {
        get: operations["apps/get-org-installation"];
    };
    "/orgs/{org}/installations": {
        get: operations["orgs/list-app-installations"];
    };
    "/orgs/{org}/pre-receive-hooks": {
        get: operations["enterprise-admin/list-pre-receive-hooks-for-org"];
    };
    "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}": {
        get: operations["enterprise-admin/get-pre-receive-hook-for-org"];
        delete: operations["enterprise-admin/remove-pre-receive-hook-enforcement-for-org"];
        patch: operations["enterprise-admin/update-pre-receive-hook-enforcement-for-org"];
    };
    "/orgs/{org}/secret-scanning/alerts": {
        get: operations["secret-scanning/list-alerts-for-org"];
    };
    "/orgs/{org}/teams": {
        post: operations["teams/create"];
    };
    "/orgs/{org}/teams/{team_slug}/external-groups": {
        get: operations["teams/list-linked-external-idp-groups-to-team-for-org"];
        delete: operations["teams/unlink-external-idp-group-from-team-for-org"];
        patch: operations["teams/link-external-idp-group-to-team-for-org"];
    };
    "/rate_limit": {
        get: operations["rate-limit/get"];
    };
    "/repos/{owner}/{repo}/actions/cache/usage-policy": {
        get: operations["actions/get-actions-cache-usage-policy"];
        patch: operations["actions/set-actions-cache-usage-policy"];
    };
    "/repos/{owner}/{repo}/actions/permissions/selected-actions": {
        get: operations["actions/get-allowed-actions-repository"];
        put: operations["actions/set-allowed-actions-repository"];
    };
    "/repos/{owner}/{repo}/actions/runs": {
        get: operations["actions/list-workflow-runs-for-repo"];
    };
    "/repos/{owner}/{repo}/actions/runs/{run_id}": {
        get: operations["actions/get-workflow-run"];
    };
    "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}": {
        get: operations["actions/get-workflow-run-attempt"];
    };
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs": {
        get: operations["actions/list-workflow-runs"];
    };
    "/repos/{owner}/{repo}/autolinks": {
        get: operations["repos/list-autolinks"];
        post: operations["repos/create-autolink"];
    };
    "/repos/{owner}/{repo}/autolinks/{autolink_id}": {
        get: operations["repos/get-autolink"];
    };
    "/repos/{owner}/{repo}/code-scanning/analyses": {
        get: operations["code-scanning/list-recent-analyses"];
    };
    "/repos/{owner}/{repo}/collaborators": {
        get: operations["repos/list-collaborators"];
    };
    "/repos/{owner}/{repo}/collaborators/{username}/permission": {
        get: operations["repos/get-collaborator-permission-level"];
    };
    "/repos/{owner}/{repo}/dependency-graph/compare/{basehead}": {
        get: operations["dependency-graph/diff-range"];
    };
    "/repos/{owner}/{repo}/forks": {
        post: operations["repos/create-fork"];
    };
    "/repos/{owner}/{repo}/installation": {
        get: operations["apps/get-repo-installation"];
    };
    "/repos/{owner}/{repo}/keys": {
        get: operations["repos/list-deploy-keys"];
        post: operations["repos/create-deploy-key"];
    };
    "/repos/{owner}/{repo}/keys/{key_id}": {
        get: operations["repos/get-deploy-key"];
    };
    "/repos/{owner}/{repo}/pre-receive-hooks": {
        get: operations["enterprise-admin/list-pre-receive-hooks-for-repo"];
    };
    "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}": {
        get: operations["enterprise-admin/get-pre-receive-hook-for-repo"];
        delete: operations["enterprise-admin/remove-pre-receive-hook-enforcement-for-repo"];
        patch: operations["enterprise-admin/update-pre-receive-hook-enforcement-for-repo"];
    };
    "/repos/{owner}/{repo}/releases": {
        get: operations["repos/list-releases"];
        post: operations["repos/create-release"];
    };
    "/repos/{owner}/{repo}/releases/latest": {
        get: operations["repos/get-latest-release"];
    };
    "/repos/{owner}/{repo}/releases/tags/{tag}": {
        get: operations["repos/get-release-by-tag"];
    };
    "/repos/{owner}/{repo}/releases/{release_id}": {
        get: operations["repos/get-release"];
        patch: operations["repos/update-release"];
    };
    "/repos/{owner}/{repo}/replicas/caches": {
        get: operations["repos/list-cache-info"];
    };
    "/repos/{owner}/{repo}/secret-scanning/alerts": {
        get: operations["secret-scanning/list-alerts-for-repo"];
    };
    "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}": {
        get: operations["secret-scanning/get-alert"];
        patch: operations["secret-scanning/update-alert"];
    };
    "/repositories": {
        get: operations["repos/list-public"];
    };
    "/scim/v2/enterprises/{enterprise}/Groups": {
        get: operations["enterprise-admin/list-provisioned-groups-enterprise"];
        post: operations["enterprise-admin/provision-and-invite-enterprise-group"];
    };
    "/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}": {
        get: operations["enterprise-admin/get-provisioning-information-for-enterprise-group"];
        put: operations["enterprise-admin/set-information-for-provisioned-enterprise-group"];
        delete: operations["enterprise-admin/delete-scim-group-from-enterprise"];
        patch: operations["enterprise-admin/update-attribute-for-enterprise-group"];
    };
    "/scim/v2/enterprises/{enterprise}/Users": {
        get: operations["enterprise-admin/list-provisioned-identities-enterprise"];
        post: operations["enterprise-admin/provision-and-invite-enterprise-user"];
    };
    "/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}": {
        get: operations["enterprise-admin/get-provisioning-information-for-enterprise-user"];
        put: operations["enterprise-admin/set-information-for-provisioned-enterprise-user"];
        delete: operations["enterprise-admin/delete-user-from-enterprise"];
        patch: operations["enterprise-admin/update-attribute-for-enterprise-user"];
    };
    "/setup/api/configcheck": {
        get: operations["enterprise-admin/get-configuration-status"];
    };
    "/setup/api/configure": {
        post: operations["enterprise-admin/start-configuration-process"];
    };
    "/setup/api/maintenance": {
        get: operations["enterprise-admin/get-maintenance-status"];
        post: operations["enterprise-admin/enable-or-disable-maintenance-mode"];
    };
    "/setup/api/settings": {
        get: operations["enterprise-admin/get-settings"];
        put: operations["enterprise-admin/set-settings"];
    };
    "/setup/api/settings/authorized-keys": {
        get: operations["enterprise-admin/get-all-authorized-ssh-keys"];
        post: operations["enterprise-admin/add-authorized-ssh-key"];
        delete: operations["enterprise-admin/remove-authorized-ssh-key"];
    };
    "/setup/api/start": {
        post: operations["enterprise-admin/create-enterprise-server-license"];
    };
    "/setup/api/upgrade": {
        post: operations["enterprise-admin/upgrade-license"];
    };
    "/user/installations": {
        get: operations["apps/list-installations-for-authenticated-user"];
    };
    "/users/{username}/installation": {
        get: operations["apps/get-user-installation"];
    };
    "/users/{username}/site_admin": {
        put: operations["enterprise-admin/promote-user-to-be-site-administrator"];
        delete: operations["enterprise-admin/demote-site-administrator"];
    };
    "/users/{username}/suspended": {
        put: operations["enterprise-admin/suspend-user"];
        delete: operations["enterprise-admin/unsuspend-user"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "global-hook": {
            type?: string;
            id?: number;
            name?: string;
            active?: boolean;
            events?: string[];
            config?: {
                url?: string;
                content_type?: string;
                insecure_ssl?: string;
                secret?: string;
            };
            updated_at?: string;
            created_at?: string;
            url?: string;
            ping_url?: string;
        };
        "global-hook-2": {
            type?: string;
            id?: number;
            name?: string;
            active?: boolean;
            events?: string[];
            config?: {
                url?: string;
                content_type?: string;
                insecure_ssl?: string;
            };
            updated_at?: string;
            created_at?: string;
            url?: string;
            ping_url?: string;
        };
        "public-key-full": {
            id: number;
            key: string;
            user_id: number | null;
            repository_id: number | null;
            url: string;
            title: string;
            read_only: boolean;
            verified: boolean;
            created_at: string;
        };
        "ldap-mapping-team": {
            ldap_dn?: string;
            id?: number;
            node_id?: string;
            url?: string;
            html_url?: string;
            name?: string;
            slug?: string;
            description?: string | null;
            privacy?: string;
            permission?: string;
            members_url?: string;
            repositories_url?: string;
            parent?: Record<string, unknown> | null;
        };
        "ldap-mapping-user": {
            ldap_dn?: string;
            login: string;
            id: number;
            node_id: string;
            avatar_url: string;
            gravatar_id: string | null;
            url: string;
            html_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            subscriptions_url: string;
            organizations_url: string;
            repos_url: string;
            events_url: string;
            received_events_url: string;
            type: string;
            site_admin: boolean;
            name: string | null;
            company: string | null;
            blog: string | null;
            location: string | null;
            email: string | null;
            hireable: boolean | null;
            bio: string | null;
            twitter_username?: string | null;
            public_repos: number;
            public_gists: number;
            followers: number;
            following: number;
            created_at: string;
            updated_at: string;
            private_gists: number;
            total_private_repos: number;
            owned_private_repos: number;
            disk_usage: number;
            collaborators: number;
            two_factor_authentication: boolean;
            plan?: {
                collaborators: number;
                name: string;
                space: number;
                private_repos: number;
            };
            suspended_at?: string | null;
            business_plus?: boolean;
        };
        "organization-simple": {
            login: string;
            id: number;
            node_id: string;
            url: string;
            repos_url: string;
            events_url: string;
            hooks_url: string;
            issues_url: string;
            members_url: string;
            public_members_url: string;
            avatar_url: string;
            description: string | null;
        };
        "pre-receive-environment": {
            id?: number;
            name?: string;
            image_url?: string;
            url?: string;
            html_url?: string;
            default_environment?: boolean;
            created_at?: string;
            hooks_count?: number;
            download?: {
                url?: string;
                state?: string;
                downloaded_at?: string | null;
                message?: string | null;
            };
        };
        "pre-receive-environment-download-status": {
            url?: string;
            state?: string;
            downloaded_at?: string | null;
            message?: string | null;
        };
        "pre-receive-hook": {
            id?: number;
            name?: string;
            enforcement?: string;
            script?: string;
            script_repository?: {
                id?: number;
                full_name?: string;
                url?: string;
                html_url?: string;
            };
            environment?: {
                id?: number;
                name?: string;
                image_url?: string;
                url?: string;
                html_url?: string;
                default_environment?: boolean;
                created_at?: string;
                hooks_count?: number;
                download?: {
                    url?: string;
                    state?: string;
                    downloaded_at?: string | null;
                    message?: string | null;
                };
            };
            allow_downstream_configuration?: boolean;
        };
        authorization: {
            id: number;
            url: string;
            scopes: string[] | null;
            token: string;
            token_last_eight: string | null;
            hashed_token: string | null;
            app: {
                client_id: string;
                name: string;
                url: string;
            };
            note: string | null;
            note_url: string | null;
            updated_at: string;
            created_at: string;
            fingerprint: string | null;
            user?: components["schemas"]["nullable-simple-user"];
            installation?: components["schemas"]["nullable-scoped-installation"];
            expires_at: string | null;
        };
        "simple-user": {
            name?: string | null;
            email?: string | null;
            login: string;
            id: number;
            node_id: string;
            avatar_url: string;
            gravatar_id: string | null;
            url: string;
            html_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            subscriptions_url: string;
            organizations_url: string;
            repos_url: string;
            events_url: string;
            received_events_url: string;
            type: string;
            site_admin: boolean;
            starred_at?: string;
        };
        installation: {
            id: number;
            account: (components["schemas"]["simple-user"] | components["schemas"]["enterprise"]) | null;
            repository_selection: "all" | "selected";
            access_tokens_url: string;
            repositories_url: string;
            html_url: string;
            app_id: number;
            target_id: number;
            target_type: string;
            permissions: components["schemas"]["app-permissions"];
            events: string[];
            created_at: string;
            updated_at: string;
            single_file_name: string | null;
            has_multiple_single_files?: boolean;
            single_file_paths?: string[];
            app_slug: string;
            suspended_by: components["schemas"]["nullable-simple-user"];
            suspended_at: string | null;
            contact_email?: string | null;
        };
        "app-permissions": {
            actions?: "read" | "write";
            administration?: "read" | "write";
            checks?: "read" | "write";
            contents?: "read" | "write";
            deployments?: "read" | "write";
            environments?: "read" | "write";
            issues?: "read" | "write";
            metadata?: "read" | "write";
            packages?: "read" | "write";
            pages?: "read" | "write";
            pull_requests?: "read" | "write";
            repository_hooks?: "read" | "write";
            repository_projects?: "read" | "write" | "admin";
            secret_scanning_alerts?: "read" | "write";
            secrets?: "read" | "write";
            security_events?: "read" | "write";
            single_file?: "read" | "write";
            statuses?: "read" | "write";
            vulnerability_alerts?: "read" | "write";
            workflows?: "write";
            members?: "read" | "write";
            organization_administration?: "read" | "write";
            organization_hooks?: "read" | "write";
            organization_plan?: "read";
            organization_projects?: "read" | "write" | "admin";
            organization_packages?: "read" | "write";
            organization_secrets?: "read" | "write";
            organization_self_hosted_runners?: "read" | "write";
            organization_user_blocking?: "read" | "write";
            team_discussions?: "read" | "write";
        };
        "installation-token": {
            token: string;
            expires_at: string;
            permissions?: components["schemas"]["app-permissions"];
            repository_selection?: "all" | "selected";
            repositories?: components["schemas"]["repository"][];
            single_file?: string;
            has_multiple_single_files?: boolean;
            single_file_paths?: string[];
        };
        "application-grant": {
            id: number;
            url: string;
            app: {
                client_id: string;
                name: string;
                url: string;
            };
            created_at: string;
            updated_at: string;
            scopes: string[];
            user?: components["schemas"]["nullable-simple-user"];
        };
        announcement: {
            announcement: components["schemas"]["announcement-message"];
            expires_at?: components["schemas"]["announcement-expiration"];
        };
        "license-info": {
            seats?: string | number;
            seats_used?: number;
            seats_available?: string | number;
            kind?: string;
            days_until_expiration?: number;
            expire_at?: string;
        };
        "enterprise-overview": {
            repos?: components["schemas"]["enterprise-repository-overview"];
            hooks?: components["schemas"]["enterprise-hook-overview"];
            pages?: components["schemas"]["enterprise-page-overview"];
            orgs?: components["schemas"]["enterprise-organization-overview"];
            users?: components["schemas"]["enterprise-user-overview"];
            pulls?: components["schemas"]["enterprise-pull-request-overview"];
            issues?: components["schemas"]["enterprise-issue-overview"];
            milestones?: components["schemas"]["enterprise-milestone-overview"];
            gists?: components["schemas"]["enterprise-gist-overview"];
            comments?: components["schemas"]["enterprise-comment-overview"];
        };
        "enterprise-comment-overview": {
            total_commit_comments: number;
            total_gist_comments: number;
            total_issue_comments: number;
            total_pull_request_comments: number;
        };
        "enterprise-gist-overview": {
            total_gists: number;
            private_gists: number;
            public_gists: number;
        };
        "enterprise-hook-overview": {
            total_hooks: number;
            active_hooks: number;
            inactive_hooks: number;
        };
        "enterprise-issue-overview": {
            total_issues: number;
            open_issues: number;
            closed_issues: number;
        };
        "enterprise-milestone-overview": {
            total_milestones: number;
            open_milestones: number;
            closed_milestones: number;
        };
        "enterprise-organization-overview": {
            total_orgs: number;
            disabled_orgs: number;
            total_teams: number;
            total_team_members: number;
        };
        "enterprise-page-overview": {
            total_pages: number;
        };
        "enterprise-pull-request-overview": {
            total_pulls: number;
            merged_pulls: number;
            mergeable_pulls: number;
            unmergeable_pulls: number;
        };
        "enterprise-repository-overview": {
            total_repos: number;
            root_repos: number;
            fork_repos: number;
            org_repos: number;
            total_pushes: number;
            total_wikis: number;
        };
        "enterprise-user-overview": {
            total_users: number;
            admin_users: number;
            suspended_users: number;
        };
        "actions-cache-usage-policy-enterprise": {
            repo_cache_size_limit_in_gb?: number;
            max_repo_cache_size_limit_in_gb?: number;
        };
        "selected-actions": {
            github_owned_allowed: boolean;
            patterns_allowed: string[];
        };
        "audit-log-event": {
            "@timestamp"?: number;
            action?: string;
            active?: boolean;
            active_was?: boolean;
            actor?: string;
            actor_id?: number;
            actor_location?: {
                country_name?: string;
            };
            data?: {
                [key: string]: unknown;
            };
            org_id?: number;
            blocked_user?: string;
            business?: string;
            config?: Record<string, never>[];
            config_was?: Record<string, never>[];
            content_type?: string;
            created_at?: number;
            deploy_key_fingerprint?: string;
            _document_id?: string;
            emoji?: string;
            events?: Record<string, never>[];
            events_were?: Record<string, never>[];
            explanation?: string;
            fingerprint?: string;
            hook_id?: number;
            limited_availability?: boolean;
            message?: string;
            name?: string;
            old_user?: string;
            openssh_public_key?: string;
            org?: string;
            previous_visibility?: string;
            read_only?: boolean;
            repo?: string;
            repository?: string;
            repository_public?: boolean;
            target_login?: string;
            team?: string;
            transport_protocol?: number;
            transport_protocol_name?: string;
            user?: string;
            visibility?: string;
        };
        "organization-secret-scanning-alert": {
            number?: components["schemas"]["alert-number"];
            created_at?: components["schemas"]["alert-created-at"];
            updated_at?: components["schemas"]["nullable-alert-updated-at"];
            url?: components["schemas"]["alert-url"];
            html_url?: components["schemas"]["alert-html-url"];
            locations_url?: string;
            state?: components["schemas"]["secret-scanning-alert-state"];
            resolution?: components["schemas"]["secret-scanning-alert-resolution"];
            resolved_at?: string | null;
            resolved_by?: components["schemas"]["nullable-simple-user"];
            secret_type?: string;
            secret_type_display_name?: string;
            secret?: string;
            repository?: components["schemas"]["simple-repository"];
            push_protection_bypassed?: boolean | null;
            push_protection_bypassed_by?: components["schemas"]["nullable-simple-user"];
            push_protection_bypassed_at?: string | null;
        };
        "api-overview": {
            verifiable_password_authentication: boolean;
            packages?: string[];
            dependabot?: string[];
            installed_version?: string;
        };
        "organization-custom-repository-role": {
            id: number;
            name: string;
        };
        "organization-full": {
            login: string;
            id: number;
            node_id: string;
            url: string;
            repos_url: string;
            events_url: string;
            hooks_url: string;
            issues_url: string;
            members_url: string;
            public_members_url: string;
            avatar_url: string;
            description: string | null;
            name?: string;
            company?: string;
            blog?: string;
            location?: string;
            email?: string;
            twitter_username?: string | null;
            is_verified?: boolean;
            has_organization_projects: boolean;
            has_repository_projects: boolean;
            public_repos: number;
            public_gists: number;
            followers: number;
            following: number;
            html_url: string;
            created_at: string;
            type: string;
            total_private_repos?: number;
            owned_private_repos?: number;
            private_gists?: number | null;
            disk_usage?: number | null;
            collaborators?: number | null;
            billing_email?: string | null;
            plan?: {
                name: string;
                space: number;
                private_repos: number;
                filled_seats?: number;
                seats?: number;
            };
            default_repository_permission?: string | null;
            members_can_create_repositories?: boolean | null;
            two_factor_requirement_enabled?: boolean | null;
            members_allowed_repository_creation_type?: string;
            members_can_create_public_repositories?: boolean;
            members_can_create_private_repositories?: boolean;
            members_can_create_internal_repositories?: boolean;
            members_can_create_pages?: boolean;
            members_can_create_public_pages?: boolean;
            members_can_create_private_pages?: boolean;
            members_can_fork_private_repositories?: boolean | null;
            web_commit_signoff_required?: boolean;
            updated_at: string;
        };
        "validation-error": {
            message: string;
            documentation_url: string;
            errors?: ({
                resource?: string;
                field?: string;
                message?: string;
                code: string;
                index?: number;
                value?: (string | null) | (number | null) | (string[] | null);
            })[];
        };
        "validation-error-simple": {
            message: string;
            documentation_url: string;
            errors?: string[];
        };
        "external-group": {
            group_id: number;
            group_name: string;
            updated_at?: string;
            teams: {
                team_id: number;
                team_name: string;
            }[];
            members: {
                member_id: number;
                member_login: string;
                member_name: string;
                member_email: string;
            }[];
        };
        "external-groups": {
            groups?: {
                group_id: number;
                group_name: string;
                updated_at: string;
            }[];
        };
        "org-pre-receive-hook": {
            id?: number;
            name?: string;
            enforcement?: string;
            configuration_url?: string;
            allow_downstream_configuration?: boolean;
        };
        "team-full": {
            id: number;
            node_id: string;
            url: string;
            html_url: string;
            name: string;
            slug: string;
            description: string | null;
            privacy?: "closed" | "secret";
            permission: string;
            members_url: string;
            repositories_url: string;
            parent?: components["schemas"]["nullable-team-simple"];
            members_count: number;
            repos_count: number;
            created_at: string;
            updated_at: string;
            organization: components["schemas"]["team-organization"];
            ldap_dn?: string;
        };
        "rate-limit-overview": {
            resources: {
                core: components["schemas"]["rate-limit"];
                graphql?: components["schemas"]["rate-limit"];
                search: components["schemas"]["rate-limit"];
                source_import?: components["schemas"]["rate-limit"];
                integration_manifest?: components["schemas"]["rate-limit"];
                code_scanning_upload?: components["schemas"]["rate-limit"];
                actions_runner_registration?: components["schemas"]["rate-limit"];
                scim?: components["schemas"]["rate-limit"];
            };
            rate: components["schemas"]["rate-limit"];
        };
        "actions-cache-usage-policy-for-repository": {
            repo_cache_size_limit_in_gb: number;
        };
        "workflow-run": {
            id: number;
            name?: string | null;
            node_id: string;
            check_suite_id?: number;
            check_suite_node_id?: string;
            head_branch: string | null;
            head_sha: string;
            path: string;
            run_number: number;
            run_attempt?: number;
            referenced_workflows?: components["schemas"]["referenced-workflow"][] | null;
            event: string;
            status: string | null;
            conclusion: string | null;
            workflow_id: number;
            url: string;
            html_url: string;
            pull_requests: components["schemas"]["pull-request-minimal"][] | null;
            created_at: string;
            updated_at: string;
            actor?: components["schemas"]["simple-user"];
            triggering_actor?: components["schemas"]["simple-user"];
            run_started_at?: string;
            jobs_url: string;
            logs_url: string;
            check_suite_url: string;
            artifacts_url: string;
            cancel_url: string;
            rerun_url: string;
            previous_attempt_url?: string | null;
            workflow_url: string;
            head_commit: components["schemas"]["nullable-simple-commit"];
            repository: components["schemas"]["minimal-repository"];
            head_repository: components["schemas"]["minimal-repository"];
            head_repository_id?: number;
        };
        autolink: {
            id: number;
            key_prefix: string;
            url_template: string;
        };
        "code-scanning-ref": string;
        "code-scanning-analysis-sarif-id": string;
        "code-scanning-analysis": {
            ref: components["schemas"]["code-scanning-ref"];
            commit_sha: components["schemas"]["code-scanning-analysis-commit-sha"];
            analysis_key: components["schemas"]["code-scanning-analysis-analysis-key"];
            environment: components["schemas"]["code-scanning-analysis-environment"];
            category?: components["schemas"]["code-scanning-analysis-category"];
            error: string;
            created_at: components["schemas"]["code-scanning-analysis-created-at"];
            results_count: number;
            rules_count: number;
            id: number;
            url: components["schemas"]["code-scanning-analysis-url"];
            sarif_id: components["schemas"]["code-scanning-analysis-sarif-id"];
            tool: components["schemas"]["code-scanning-analysis-tool"];
            deletable: boolean;
            warning: string;
        };
        collaborator: {
            login: string;
            id: number;
            email?: string | null;
            name?: string | null;
            node_id: string;
            avatar_url: string;
            gravatar_id: string | null;
            url: string;
            html_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            subscriptions_url: string;
            organizations_url: string;
            repos_url: string;
            events_url: string;
            received_events_url: string;
            type: string;
            site_admin: boolean;
            permissions?: {
                pull: boolean;
                triage?: boolean;
                push: boolean;
                maintain?: boolean;
                admin: boolean;
            };
            role_name?: string;
        };
        "repository-collaborator-permission": {
            permission: string;
            role_name: string;
            user: components["schemas"]["nullable-collaborator"];
        };
        "dependency-graph-diff": ({
            change_type: "added" | "removed";
            manifest: string;
            ecosystem: string;
            name: string;
            version: string;
            package_url: string | null;
            license: string | null;
            source_repository_url: string | null;
            vulnerabilities: {
                severity: string;
                advisory_ghsa_id: string;
                advisory_summary: string;
                advisory_url: string;
            }[];
        })[];
        "full-repository": {
            id: number;
            node_id: string;
            name: string;
            full_name: string;
            owner: components["schemas"]["simple-user"];
            private: boolean;
            html_url: string;
            description: string | null;
            fork: boolean;
            url: string;
            archive_url: string;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            deployments_url: string;
            downloads_url: string;
            events_url: string;
            forks_url: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            languages_url: string;
            merges_url: string;
            milestones_url: string;
            notifications_url: string;
            pulls_url: string;
            releases_url: string;
            ssh_url: string;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            tags_url: string;
            teams_url: string;
            trees_url: string;
            clone_url: string;
            mirror_url: string | null;
            hooks_url: string;
            svn_url: string;
            homepage: string | null;
            language: string | null;
            forks_count: number;
            stargazers_count: number;
            watchers_count: number;
            size: number;
            default_branch: string;
            open_issues_count: number;
            is_template?: boolean;
            topics?: string[];
            has_issues: boolean;
            has_projects: boolean;
            has_wiki: boolean;
            has_pages: boolean;
            has_downloads: boolean;
            archived: boolean;
            disabled: boolean;
            visibility?: string;
            pushed_at: string;
            created_at: string;
            updated_at: string;
            permissions?: {
                admin: boolean;
                maintain?: boolean;
                push: boolean;
                triage?: boolean;
                pull: boolean;
            };
            allow_rebase_merge?: boolean;
            template_repository?: components["schemas"]["nullable-repository"];
            temp_clone_token?: string | null;
            allow_squash_merge?: boolean;
            allow_auto_merge?: boolean;
            delete_branch_on_merge?: boolean;
            allow_merge_commit?: boolean;
            allow_update_branch?: boolean;
            use_squash_pr_title_as_default?: boolean;
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            allow_forking?: boolean;
            web_commit_signoff_required?: boolean;
            subscribers_count: number;
            network_count: number;
            license: components["schemas"]["nullable-license-simple"];
            organization?: components["schemas"]["nullable-simple-user"];
            parent?: components["schemas"]["repository"];
            source?: components["schemas"]["repository"];
            forks: number;
            master_branch?: string;
            open_issues: number;
            watchers: number;
            anonymous_access_enabled?: boolean;
            code_of_conduct?: components["schemas"]["code-of-conduct-simple"];
            security_and_analysis?: components["schemas"]["security-and-analysis"];
        };
        "deploy-key": {
            id: number;
            key: string;
            url: string;
            title: string;
            verified: boolean;
            created_at: string;
            read_only: boolean;
        };
        "repository-pre-receive-hook": {
            id?: number;
            name?: string;
            enforcement?: string;
            configuration_url?: string;
        };
        release: {
            url: string;
            html_url: string;
            assets_url: string;
            upload_url: string;
            tarball_url: string | null;
            zipball_url: string | null;
            id: number;
            node_id: string;
            tag_name: string;
            target_commitish: string;
            name: string | null;
            body?: string | null;
            draft: boolean;
            prerelease: boolean;
            created_at: string;
            published_at: string | null;
            author: components["schemas"]["simple-user"];
            assets: components["schemas"]["release-asset"][];
            body_html?: string;
            body_text?: string;
            mentions_count?: number;
            reactions?: components["schemas"]["reaction-rollup"];
        };
        "secret-scanning-alert": {
            number?: components["schemas"]["alert-number"];
            created_at?: components["schemas"]["alert-created-at"];
            updated_at?: components["schemas"]["alert-updated-at"];
            url?: components["schemas"]["alert-url"];
            html_url?: components["schemas"]["alert-html-url"];
            locations_url?: string;
            state?: components["schemas"]["secret-scanning-alert-state"];
            resolution?: components["schemas"]["secret-scanning-alert-resolution"];
            resolved_at?: string | null;
            resolved_by?: components["schemas"]["nullable-simple-user"];
            secret_type?: string;
            secret_type_display_name?: string;
            secret?: string;
            push_protection_bypassed?: boolean | null;
            push_protection_bypassed_by?: components["schemas"]["nullable-simple-user"];
            push_protection_bypassed_at?: string | null;
        };
        "secret-scanning-alert-state": "open" | "resolved";
        "secret-scanning-alert-resolution": null | "false_positive" | "wont_fix" | "revoked" | "used_in_tests";
        "minimal-repository": {
            id: number;
            node_id: string;
            name: string;
            full_name: string;
            owner: components["schemas"]["simple-user"];
            private: boolean;
            html_url: string;
            description: string | null;
            fork: boolean;
            url: string;
            archive_url: string;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            deployments_url: string;
            downloads_url: string;
            events_url: string;
            forks_url: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url?: string;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            languages_url: string;
            merges_url: string;
            milestones_url: string;
            notifications_url: string;
            pulls_url: string;
            releases_url: string;
            ssh_url?: string;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            tags_url: string;
            teams_url: string;
            trees_url: string;
            clone_url?: string;
            mirror_url?: string | null;
            hooks_url: string;
            svn_url?: string;
            homepage?: string | null;
            language?: string | null;
            forks_count?: number;
            stargazers_count?: number;
            watchers_count?: number;
            size?: number;
            default_branch?: string;
            open_issues_count?: number;
            is_template?: boolean;
            topics?: string[];
            has_issues?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            has_pages?: boolean;
            has_downloads?: boolean;
            archived?: boolean;
            disabled?: boolean;
            visibility?: string;
            pushed_at?: string | null;
            created_at?: string | null;
            updated_at?: string | null;
            permissions?: {
                admin?: boolean;
                maintain?: boolean;
                push?: boolean;
                triage?: boolean;
                pull?: boolean;
            };
            role_name?: string;
            template_repository?: components["schemas"]["nullable-repository"];
            temp_clone_token?: string;
            delete_branch_on_merge?: boolean;
            subscribers_count?: number;
            network_count?: number;
            code_of_conduct?: components["schemas"]["code-of-conduct"];
            license?: {
                key?: string;
                name?: string;
                spdx_id?: string;
                url?: string;
                node_id?: string;
            } | null;
            forks?: number;
            open_issues?: number;
            watchers?: number;
            allow_forking?: boolean;
            web_commit_signoff_required?: boolean;
        };
        "scim-group-list-enterprise": {
            schemas: string[];
            totalResults: number;
            itemsPerPage: number;
            startIndex: number;
            Resources: ({
                schemas: string[];
                id: string;
                externalId?: string | null;
                displayName?: string;
                members?: {
                    value?: string;
                    $ref?: string;
                    display?: string;
                }[];
                meta?: {
                    resourceType?: string;
                    created?: string;
                    lastModified?: string;
                    location?: string;
                };
            })[];
        };
        "scim-enterprise-group": {
            schemas: string[];
            id: string;
            externalId?: string | null;
            displayName?: string;
            members?: {
                value?: string;
                $ref?: string;
                display?: string;
            }[];
            meta?: {
                resourceType?: string;
                created?: string;
                lastModified?: string;
                location?: string;
            };
        };
        "scim-user-list-enterprise": {
            schemas: string[];
            totalResults: number;
            itemsPerPage: number;
            startIndex: number;
            Resources: {
                schemas: string[];
                id: string;
                externalId?: string;
                userName?: string;
                name?: {
                    givenName?: string;
                    familyName?: string;
                };
                emails?: {
                    value?: string;
                    primary?: boolean;
                    type?: string;
                }[];
                groups?: {
                    value?: string;
                }[];
                active?: boolean;
                meta?: {
                    resourceType?: string;
                    created?: string;
                    lastModified?: string;
                    location?: string;
                };
            }[];
        };
        "scim-enterprise-user": {
            schemas: string[];
            id: string;
            externalId?: string;
            userName?: string;
            name?: {
                givenName?: string;
                familyName?: string;
            };
            emails?: {
                value?: string;
                type?: string;
                primary?: boolean;
            }[];
            groups?: {
                value?: string;
            }[];
            active?: boolean;
            meta?: {
                resourceType?: string;
                created?: string;
                lastModified?: string;
                location?: string;
            };
        };
        "configuration-status": {
            status?: string;
            progress?: {
                status: string;
                key: string;
            }[];
        };
        "maintenance-status": {
            status?: string;
            scheduled_time?: string;
            connection_services?: {
                name: string;
                number: number;
            }[];
        };
        "enterprise-settings": {
            enterprise?: {
                private_mode?: boolean;
                public_pages?: boolean;
                subdomain_isolation?: boolean;
                signup_enabled?: boolean;
                github_hostname?: string;
                identicons_host?: string;
                http_proxy?: string | null;
                auth_mode?: string;
                expire_sessions?: boolean;
                admin_password?: string | null;
                configuration_id?: number;
                configuration_run_count?: number;
                avatar?: {
                    enabled?: boolean;
                    uri?: string;
                };
                customer?: {
                    name?: string;
                    email?: string;
                    uuid?: string;
                    secret_key_data?: string;
                    public_key_data?: string;
                };
                license?: {
                    seats?: number;
                    evaluation?: boolean;
                    perpetual?: boolean;
                    unlimited_seating?: boolean;
                    support_key?: string;
                    ssh_allowed?: boolean;
                    cluster_support?: boolean;
                    expire_at?: string;
                };
                github_ssl?: {
                    enabled?: boolean;
                    cert?: string | null;
                    key?: string | null;
                };
                ldap?: {
                    host?: string | null;
                    port?: number;
                    base?: unknown[];
                    uid?: string | null;
                    bind_dn?: string | null;
                    password?: string | null;
                    method?: string;
                    search_strategy?: string;
                    user_groups?: unknown[];
                    admin_group?: string | null;
                    virtual_attribute_enabled?: boolean;
                    recursive_group_search?: boolean;
                    posix_support?: boolean;
                    user_sync_emails?: boolean;
                    user_sync_keys?: boolean;
                    user_sync_interval?: number;
                    team_sync_interval?: number;
                    sync_enabled?: boolean;
                    reconciliation?: {
                        user?: string | null;
                        org?: string | null;
                    };
                    profile?: {
                        uid?: string;
                        name?: string | null;
                        mail?: string | null;
                        key?: string | null;
                    };
                };
                cas?: {
                    url?: string | null;
                };
                saml?: {
                    sso_url?: string | null;
                    certificate?: string | null;
                    certificate_path?: string | null;
                    issuer?: string | null;
                    idp_initiated_sso?: boolean;
                    disable_admin_demote?: boolean;
                };
                github_oauth?: {
                    client_id?: string;
                    client_secret?: string;
                    organization_name?: string;
                    organization_team?: string;
                };
                smtp?: {
                    enabled?: boolean;
                    address?: string;
                    authentication?: string;
                    port?: string;
                    domain?: string;
                    username?: string;
                    user_name?: string;
                    enable_starttls_auto?: boolean;
                    password?: string;
                    "discard-to-noreply-address"?: boolean;
                    support_address?: string;
                    support_address_type?: string;
                    noreply_address?: string;
                };
                ntp?: {
                    primary_server?: string;
                    secondary_server?: string;
                };
                timezone?: string | null;
                snmp?: {
                    enabled?: boolean;
                    community?: string;
                };
                syslog?: {
                    enabled?: boolean;
                    server?: string | null;
                    protocol_name?: string;
                };
                assets?: string | null;
                pages?: {
                    enabled?: boolean;
                };
                collectd?: {
                    enabled?: boolean;
                    server?: string | null;
                    port?: number;
                    encryption?: string | null;
                    username?: string | null;
                    password?: string | null;
                };
                mapping?: {
                    enabled?: boolean;
                    tileserver?: string | null;
                    basemap?: string;
                    token?: string | null;
                };
                load_balancer?: string | null;
            };
            run_list?: string[];
        };
        "ssh-key": {
            key?: string;
            "pretty-print"?: string;
        };
        "nullable-simple-user": ({
            name?: string | null;
            email?: string | null;
            login: string;
            id: number;
            node_id: string;
            avatar_url: string;
            gravatar_id: string | null;
            url: string;
            html_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            subscriptions_url: string;
            organizations_url: string;
            repos_url: string;
            events_url: string;
            received_events_url: string;
            type: string;
            site_admin: boolean;
            starred_at?: string;
        }) | null;
        "nullable-scoped-installation": ({
            permissions: components["schemas"]["app-permissions"];
            repository_selection: "all" | "selected";
            single_file_name: string | null;
            has_multiple_single_files?: boolean;
            single_file_paths?: string[];
            repositories_url: string;
            account: components["schemas"]["simple-user"];
        }) | null;
        enterprise: {
            description?: string | null;
            html_url: string;
            website_url?: string | null;
            id: number;
            node_id: string;
            name: string;
            slug: string;
            created_at: string | null;
            updated_at: string | null;
            avatar_url: string;
        };
        "basic-error": {
            message?: string;
            documentation_url?: string;
            url?: string;
            status?: string;
        };
        repository: {
            id: number;
            node_id: string;
            name: string;
            full_name: string;
            license: components["schemas"]["nullable-license-simple"];
            organization?: components["schemas"]["nullable-simple-user"];
            forks: number;
            permissions?: {
                admin: boolean;
                pull: boolean;
                triage?: boolean;
                push: boolean;
                maintain?: boolean;
            };
            owner: components["schemas"]["simple-user"];
            private: boolean;
            html_url: string;
            description: string | null;
            fork: boolean;
            url: string;
            archive_url: string;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            deployments_url: string;
            downloads_url: string;
            events_url: string;
            forks_url: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            languages_url: string;
            merges_url: string;
            milestones_url: string;
            notifications_url: string;
            pulls_url: string;
            releases_url: string;
            ssh_url: string;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            tags_url: string;
            teams_url: string;
            trees_url: string;
            clone_url: string;
            mirror_url: string | null;
            hooks_url: string;
            svn_url: string;
            homepage: string | null;
            language: string | null;
            forks_count: number;
            stargazers_count: number;
            watchers_count: number;
            size: number;
            default_branch: string;
            open_issues_count: number;
            is_template?: boolean;
            topics?: string[];
            has_issues: boolean;
            has_projects: boolean;
            has_wiki: boolean;
            has_pages: boolean;
            has_downloads: boolean;
            archived: boolean;
            disabled: boolean;
            visibility?: string;
            pushed_at: string | null;
            created_at: string | null;
            updated_at: string | null;
            allow_rebase_merge?: boolean;
            template_repository?: ({
                id?: number;
                node_id?: string;
                name?: string;
                full_name?: string;
                owner?: {
                    login?: string;
                    id?: number;
                    node_id?: string;
                    avatar_url?: string;
                    gravatar_id?: string;
                    url?: string;
                    html_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    starred_url?: string;
                    subscriptions_url?: string;
                    organizations_url?: string;
                    repos_url?: string;
                    events_url?: string;
                    received_events_url?: string;
                    type?: string;
                    site_admin?: boolean;
                };
                private?: boolean;
                html_url?: string;
                description?: string;
                fork?: boolean;
                url?: string;
                archive_url?: string;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                deployments_url?: string;
                downloads_url?: string;
                events_url?: string;
                forks_url?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                notifications_url?: string;
                pulls_url?: string;
                releases_url?: string;
                ssh_url?: string;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_url?: string;
                subscription_url?: string;
                tags_url?: string;
                teams_url?: string;
                trees_url?: string;
                clone_url?: string;
                mirror_url?: string;
                hooks_url?: string;
                svn_url?: string;
                homepage?: string;
                language?: string;
                forks_count?: number;
                stargazers_count?: number;
                watchers_count?: number;
                size?: number;
                default_branch?: string;
                open_issues_count?: number;
                is_template?: boolean;
                topics?: string[];
                has_issues?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                has_pages?: boolean;
                has_downloads?: boolean;
                archived?: boolean;
                disabled?: boolean;
                visibility?: string;
                pushed_at?: string;
                created_at?: string;
                updated_at?: string;
                permissions?: {
                    admin?: boolean;
                    maintain?: boolean;
                    push?: boolean;
                    triage?: boolean;
                    pull?: boolean;
                };
                allow_rebase_merge?: boolean;
                temp_clone_token?: string;
                allow_squash_merge?: boolean;
                allow_auto_merge?: boolean;
                delete_branch_on_merge?: boolean;
                allow_update_branch?: boolean;
                use_squash_pr_title_as_default?: boolean;
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                allow_merge_commit?: boolean;
                subscribers_count?: number;
                network_count?: number;
            }) | null;
            temp_clone_token?: string;
            allow_squash_merge?: boolean;
            allow_auto_merge?: boolean;
            delete_branch_on_merge?: boolean;
            allow_update_branch?: boolean;
            use_squash_pr_title_as_default?: boolean;
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            allow_merge_commit?: boolean;
            allow_forking?: boolean;
            web_commit_signoff_required?: boolean;
            subscribers_count?: number;
            network_count?: number;
            open_issues: number;
            watchers: number;
            master_branch?: string;
            starred_at?: string;
            anonymous_access_enabled?: boolean;
        };
        "nullable-license-simple": ({
            key: string;
            name: string;
            url: string | null;
            spdx_id: string | null;
            node_id: string;
            html_url?: string;
        }) | null;
        "announcement-message": string;
        "announcement-expiration": string | null;
        readonly "alert-number": number;
        readonly "alert-created-at": string;
        readonly "nullable-alert-updated-at": string | null;
        readonly "alert-url": string;
        readonly "alert-html-url": string;
        "simple-repository": {
            id: number;
            node_id: string;
            name: string;
            full_name: string;
            owner: components["schemas"]["simple-user"];
            private: boolean;
            html_url: string;
            description: string | null;
            fork: boolean;
            url: string;
            archive_url: string;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            deployments_url: string;
            downloads_url: string;
            events_url: string;
            forks_url: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            languages_url: string;
            merges_url: string;
            milestones_url: string;
            notifications_url: string;
            pulls_url: string;
            releases_url: string;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            tags_url: string;
            teams_url: string;
            trees_url: string;
            hooks_url: string;
        };
        "nullable-team-simple": ({
            id: number;
            node_id: string;
            url: string;
            members_url: string;
            name: string;
            description: string | null;
            permission: string;
            privacy?: string;
            html_url: string;
            repositories_url: string;
            slug: string;
            ldap_dn?: string;
        }) | null;
        "team-organization": {
            login: string;
            id: number;
            node_id: string;
            url: string;
            repos_url: string;
            events_url: string;
            hooks_url: string;
            issues_url: string;
            members_url: string;
            public_members_url: string;
            avatar_url: string;
            description: string | null;
            name?: string;
            company?: string;
            blog?: string;
            location?: string;
            email?: string;
            twitter_username?: string | null;
            is_verified?: boolean;
            has_organization_projects: boolean;
            has_repository_projects: boolean;
            public_repos: number;
            public_gists: number;
            followers: number;
            following: number;
            html_url: string;
            created_at: string;
            type: string;
            total_private_repos?: number;
            owned_private_repos?: number;
            private_gists?: number | null;
            disk_usage?: number | null;
            collaborators?: number | null;
            billing_email?: string | null;
            plan?: {
                name: string;
                space: number;
                private_repos: number;
                filled_seats?: number;
                seats?: number;
            };
            default_repository_permission?: string | null;
            members_can_create_repositories?: boolean | null;
            two_factor_requirement_enabled?: boolean | null;
            members_allowed_repository_creation_type?: string;
            members_can_create_public_repositories?: boolean;
            members_can_create_private_repositories?: boolean;
            members_can_create_internal_repositories?: boolean;
            members_can_create_pages?: boolean;
            members_can_create_public_pages?: boolean;
            members_can_create_private_pages?: boolean;
            members_can_fork_private_repositories?: boolean | null;
            web_commit_signoff_required?: boolean;
            updated_at: string;
        };
        "rate-limit": {
            limit: number;
            remaining: number;
            reset: number;
            used: number;
        };
        "referenced-workflow": {
            path: string;
            sha: string;
            ref?: string;
        };
        "pull-request-minimal": {
            id: number;
            number: number;
            url: string;
            head: {
                ref: string;
                sha: string;
                repo: {
                    id: number;
                    url: string;
                    name: string;
                };
            };
            base: {
                ref: string;
                sha: string;
                repo: {
                    id: number;
                    url: string;
                    name: string;
                };
            };
        };
        "nullable-simple-commit": ({
            id: string;
            tree_id: string;
            message: string;
            timestamp: string;
            author: {
                name: string;
                email: string;
            } | null;
            committer: {
                name: string;
                email: string;
            } | null;
        }) | null;
        "code-scanning-analysis-tool-name": string;
        "code-scanning-analysis-tool-guid": string | null;
        "code-scanning-analysis-commit-sha": string;
        "code-scanning-analysis-analysis-key": string;
        "code-scanning-analysis-environment": string;
        "code-scanning-analysis-category": string;
        readonly "code-scanning-analysis-created-at": string;
        readonly "code-scanning-analysis-url": string;
        "code-scanning-analysis-tool": {
            name?: components["schemas"]["code-scanning-analysis-tool-name"];
            version?: components["schemas"]["code-scanning-analysis-tool-version"];
            guid?: components["schemas"]["code-scanning-analysis-tool-guid"];
        };
        "code-scanning-analysis-tool-version": string | null;
        "nullable-collaborator": ({
            login: string;
            id: number;
            email?: string | null;
            name?: string | null;
            node_id: string;
            avatar_url: string;
            gravatar_id: string | null;
            url: string;
            html_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            subscriptions_url: string;
            organizations_url: string;
            repos_url: string;
            events_url: string;
            received_events_url: string;
            type: string;
            site_admin: boolean;
            permissions?: {
                pull: boolean;
                triage?: boolean;
                push: boolean;
                maintain?: boolean;
                admin: boolean;
            };
            role_name?: string;
        }) | null;
        "nullable-repository": ({
            id: number;
            node_id: string;
            name: string;
            full_name: string;
            license: components["schemas"]["nullable-license-simple"];
            organization?: components["schemas"]["nullable-simple-user"];
            forks: number;
            permissions?: {
                admin: boolean;
                pull: boolean;
                triage?: boolean;
                push: boolean;
                maintain?: boolean;
            };
            owner: components["schemas"]["simple-user"];
            private: boolean;
            html_url: string;
            description: string | null;
            fork: boolean;
            url: string;
            archive_url: string;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            deployments_url: string;
            downloads_url: string;
            events_url: string;
            forks_url: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            languages_url: string;
            merges_url: string;
            milestones_url: string;
            notifications_url: string;
            pulls_url: string;
            releases_url: string;
            ssh_url: string;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            tags_url: string;
            teams_url: string;
            trees_url: string;
            clone_url: string;
            mirror_url: string | null;
            hooks_url: string;
            svn_url: string;
            homepage: string | null;
            language: string | null;
            forks_count: number;
            stargazers_count: number;
            watchers_count: number;
            size: number;
            default_branch: string;
            open_issues_count: number;
            is_template?: boolean;
            topics?: string[];
            has_issues: boolean;
            has_projects: boolean;
            has_wiki: boolean;
            has_pages: boolean;
            has_downloads: boolean;
            archived: boolean;
            disabled: boolean;
            visibility?: string;
            pushed_at: string | null;
            created_at: string | null;
            updated_at: string | null;
            allow_rebase_merge?: boolean;
            template_repository?: ({
                id?: number;
                node_id?: string;
                name?: string;
                full_name?: string;
                owner?: {
                    login?: string;
                    id?: number;
                    node_id?: string;
                    avatar_url?: string;
                    gravatar_id?: string;
                    url?: string;
                    html_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    starred_url?: string;
                    subscriptions_url?: string;
                    organizations_url?: string;
                    repos_url?: string;
                    events_url?: string;
                    received_events_url?: string;
                    type?: string;
                    site_admin?: boolean;
                };
                private?: boolean;
                html_url?: string;
                description?: string;
                fork?: boolean;
                url?: string;
                archive_url?: string;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                deployments_url?: string;
                downloads_url?: string;
                events_url?: string;
                forks_url?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                notifications_url?: string;
                pulls_url?: string;
                releases_url?: string;
                ssh_url?: string;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_url?: string;
                subscription_url?: string;
                tags_url?: string;
                teams_url?: string;
                trees_url?: string;
                clone_url?: string;
                mirror_url?: string;
                hooks_url?: string;
                svn_url?: string;
                homepage?: string;
                language?: string;
                forks_count?: number;
                stargazers_count?: number;
                watchers_count?: number;
                size?: number;
                default_branch?: string;
                open_issues_count?: number;
                is_template?: boolean;
                topics?: string[];
                has_issues?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                has_pages?: boolean;
                has_downloads?: boolean;
                archived?: boolean;
                disabled?: boolean;
                visibility?: string;
                pushed_at?: string;
                created_at?: string;
                updated_at?: string;
                permissions?: {
                    admin?: boolean;
                    maintain?: boolean;
                    push?: boolean;
                    triage?: boolean;
                    pull?: boolean;
                };
                allow_rebase_merge?: boolean;
                temp_clone_token?: string;
                allow_squash_merge?: boolean;
                allow_auto_merge?: boolean;
                delete_branch_on_merge?: boolean;
                allow_update_branch?: boolean;
                use_squash_pr_title_as_default?: boolean;
                squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
                squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
                merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
                merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
                allow_merge_commit?: boolean;
                subscribers_count?: number;
                network_count?: number;
            }) | null;
            temp_clone_token?: string;
            allow_squash_merge?: boolean;
            allow_auto_merge?: boolean;
            delete_branch_on_merge?: boolean;
            allow_update_branch?: boolean;
            use_squash_pr_title_as_default?: boolean;
            squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
            squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
            merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
            merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
            allow_merge_commit?: boolean;
            allow_forking?: boolean;
            web_commit_signoff_required?: boolean;
            subscribers_count?: number;
            network_count?: number;
            open_issues: number;
            watchers: number;
            master_branch?: string;
            starred_at?: string;
            anonymous_access_enabled?: boolean;
        }) | null;
        "code-of-conduct-simple": {
            url: string;
            key: string;
            name: string;
            html_url: string | null;
        };
        "security-and-analysis": ({
            advanced_security?: {
                status?: "enabled" | "disabled";
            };
            secret_scanning?: {
                status?: "enabled" | "disabled";
            };
            secret_scanning_push_protection?: {
                status?: "enabled" | "disabled";
            };
        }) | null;
        "scim-error": {
            message?: string | null;
            documentation_url?: string | null;
            detail?: string | null;
            status?: number;
            scimType?: string | null;
            schemas?: string[];
        };
        "release-asset": {
            url: string;
            browser_download_url: string;
            id: number;
            node_id: string;
            name: string;
            label: string | null;
            state: "uploaded" | "open";
            content_type: string;
            size: number;
            download_count: number;
            created_at: string;
            updated_at: string;
            uploader: components["schemas"]["nullable-simple-user"];
        };
        "reaction-rollup": {
            url: string;
            total_count: number;
            "+1": number;
            "-1": number;
            laugh: number;
            confused: number;
            heart: number;
            hooray: number;
            eyes: number;
            rocket: number;
        };
        readonly "alert-updated-at": string;
        "code-of-conduct": {
            key: string;
            name: string;
            url: string;
            body?: string;
            html_url: string | null;
        };
    };
    responses: {
        not_found: {
            content: {
                "application/json": components["schemas"]["basic-error"];
            };
        };
        requires_authentication: {
            content: {
                "application/json": components["schemas"]["basic-error"];
            };
        };
        forbidden: {
            content: {
                "application/json": components["schemas"]["basic-error"];
            };
        };
        validation_failed: {
            content: {
                "application/json": components["schemas"]["validation-error"];
            };
        };
        not_modified: {
            content: never;
        };
        gone: {
            content: {
                "application/json": components["schemas"]["basic-error"];
            };
        };
        service_unavailable: {
            content: {
                "application/json": {
                    code?: string;
                    message?: string;
                    documentation_url?: string;
                };
            };
        };
        conflict: {
            content: {
                "application/json": components["schemas"]["basic-error"];
            };
        };
        code_scanning_forbidden_read: {
            content: {
                "application/json": components["schemas"]["basic-error"];
            };
        };
        bad_request: {
            content: {
                "application/json": components["schemas"]["basic-error"];
                "application/scim+json": components["schemas"]["scim-error"];
            };
        };
        moved_permanently: {
            content: {
                "application/json": components["schemas"]["basic-error"];
            };
        };
    };
    parameters: {
        "per-page"?: number;
        page?: number;
        "hook-id": number;
        direction?: "asc" | "desc";
        "key-ids": string;
        "team-id": number;
        username: string;
        org: string;
        "pre-receive-environment-id": number;
        "pre-receive-hook-id": number;
        "token-id": number;
        since?: string;
        "installation-id": number;
        "grant-id": number;
        "client-id": string;
        "oauth-client-id": string;
        "authorization-id": number;
        enterprise: string;
        "audit-log-phrase"?: string;
        "audit-log-include"?: "web" | "git" | "all";
        "audit-log-after"?: string;
        "audit-log-before"?: string;
        "audit-log-order"?: "desc" | "asc";
        "secret-scanning-alert-state"?: "open" | "resolved";
        "secret-scanning-alert-secret-type"?: string;
        "secret-scanning-alert-resolution"?: string;
        "secret-scanning-alert-sort"?: "created" | "updated";
        "pagination-before"?: string;
        "pagination-after"?: string;
        "group-id": number;
        "team-slug": string;
        owner: string;
        repo: string;
        actor?: string;
        "workflow-run-branch"?: string;
        event?: string;
        "workflow-run-status"?: "completed" | "action_required" | "cancelled" | "failure" | "neutral" | "skipped" | "stale" | "success" | "timed_out" | "in_progress" | "queued" | "requested" | "waiting";
        created?: string;
        "exclude-pull-requests"?: boolean;
        "workflow-run-check-suite-id"?: number;
        "run-id": number;
        "attempt-number": number;
        "workflow-id": number | string;
        "autolink-id": number;
        "tool-name"?: components["schemas"]["code-scanning-analysis-tool-name"];
        "tool-guid"?: components["schemas"]["code-scanning-analysis-tool-guid"];
        "manifest-path"?: string;
        "key-id": number;
        "release-id": number;
        "alert-number": components["schemas"]["alert-number"];
        "since-repo"?: number;
        "start-index"?: number;
        count?: number;
        "scim-group-id": string;
        "scim-user-id": string;
    };
    requestBodies: never;
    headers: {
        link: string;
        "x-rate-limit-limit": number;
        "x-rate-limit-remaining": number;
        "x-rate-limit-reset": number;
    };
    pathItems: never;
}
export type $defs = Record<string, never>;
export type external = Record<string, never>;
export interface operations {
    "enterprise-admin/list-global-webhooks": {
        parameters: {
            query?: {
                per_page?: components["parameters"]["per-page"];
                page?: components["parameters"]["page"];
            };
        };
        responses: {
            200: {
                headers: {
                    Link: components["headers"]["link"];
                };
                content: {
                    "application/json": components["schemas"]["global-hook"][];
                };
            };
        };
    };
    "enterprise-admin/create-global-webhook": {
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    config: {
                        url: string;
                        content_type?: string;
                        secret?: string;
                        insecure_ssl?: string;
                    };
                    events?: string[];
                    active?: boolean;
                };
            };
        };
        responses: {
            201: {
                content: {
                    "application/json": components["schemas"]["global-hook"];
                };
            };
        };
    };
    "enterprise-admin/get-global-webhook": {
        parameters: {
            path: {
                hook_id: components["parameters"]["hook-id"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["global-hook"];
                };
            };
        };
    };
    "enterprise-admin/delete-global-webhook": {
        parameters: {
            path: {
                hook_id: components["parameters"]["hook-id"];
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
    "enterprise-admin/update-global-webhook": {
        parameters: {
            path: {
                hook_id: components["parameters"]["hook-id"];
            };
        };
        requestBody?: {
            content: {
                "application/json": {
                    config?: {
                        url: string;
                        content_type?: string;
                        secret?: string;
                        insecure_ssl?: string;
                    };
                    events?: string[];
                    active?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["global-hook-2"];
                };
            };
        };
    };
    "enterprise-admin/ping-global-webhook": {
        parameters: {
            path: {
                hook_id: components["parameters"]["hook-id"];
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
    "enterprise-admin/list-public-keys": {
        parameters: {
            query?: {
                per_page?: components["parameters"]["per-page"];
                page?: components["parameters"]["page"];
                direction?: components["parameters"]["direction"];
                sort?: "created" | "updated" | "accessed";
                since?: string;
            };
        };
        responses: {
            200: {
                headers: {
                    Link: components["headers"]["link"];
                };
                content: {
                    "application/json": components["schemas"]["public-key-full"][];
                };
            };
        };
    };
    "enterprise-admin/delete-public-key": {
        parameters: {
            path: {
                key_ids: components["parameters"]["key-ids"];
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
    "enterprise-admin/update-ldap-mapping-for-team": {
        parameters: {
            path: {
                team_id: components["parameters"]["team-id"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    ldap_dn: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["ldap-mapping-team"];
                };
            };
        };
    };
    "enterprise-admin/sync-ldap-mapping-for-team": {
        parameters: {
            path: {
                team_id: components["parameters"]["team-id"];
            };
        };
        responses: {
            201: {
                content: {
                    "application/json": {
                        status?: string;
                    };
                };
            };
        };
    };
    "enterprise-admin/update-ldap-mapping-for-user": {
        parameters: {
            path: {
                username: components["parameters"]["username"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    ldap_dn: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["ldap-mapping-user"];
                };
            };
        };
    };
    "enterprise-admin/sync-ldap-mapping-for-user": {
        parameters: {
            path: {
                username: components["parameters"]["username"];
            };
        };
        responses: {
            201: {
                content: {
                    "application/json": {
                        status?: string;
                    };
                };
            };
        };
    };
    "enterprise-admin/create-org": {
        requestBody: {
            content: {
                "application/json": {
                    login: string;
                    admin: string;
                    profile_name?: string;
                };
            };
        };
        responses: {
            201: {
                content: {
                    "application/json": components["schemas"]["organization-simple"];
                };
            };
        };
    };
    "enterprise-admin/update-org-name": {
        parameters: {
            path: {
                org: components["parameters"]["org"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    login: string;
                };
            };
        };
        responses: {
            202: {
                content: {
                    "application/json": {
                        message?: string;
                        url?: string;
                    };
                };
            };
        };
    };
    "enterprise-admin/list-pre-receive-environments": {
        parameters: {
            query?: {
                per_page?: components["parameters"]["per-page"];
                page?: components["parameters"]["page"];
                direction?: components["parameters"]["direction"];
                sort?: "created" | "updated" | "name";
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["pre-receive-environment"][];
                };
            };
        };
    };
    "enterprise-admin/create-pre-receive-environment": {
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    image_url: string;
                };
            };
        };
        responses: {
            201: {
                content: {
                    "application/json": components["schemas"]["pre-receive-environment"];
                };
            };
        };
    };
    "enterprise-admin/get-pre-receive-environment": {
        parameters: {
            path: {
                pre_receive_environment_id: components["parameters"]["pre-receive-environment-id"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["pre-receive-environment"];
                };
            };
        };
    };
    "enterprise-admin/delete-pre-receive-environment": {
        parameters: {
            path: {
                pre_receive_environment_id: components["parameters"]["pre-receive-environment-id"];
            };
        };
        responses: {
            204: {
                content: never;
            };
            422: {
                content: {
                    "application/json": {
                        message?: string;
                        errors?: {
                            resource?: string;
                            code?: string;
                            message?: string;
                        }[];
                    };
                };
            };
        };
    };
    "enterprise-admin/update-pre-receive-environment": {
        parameters: {
            path: {
                pre_receive_environment_id: components["parameters"]["pre-receive-environment-id"];
            };
        };
        requestBody?: {
            content: {
                "application/json": {
                    name?: string;
                    image_url?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["pre-receive-environment"];
                };
            };
            422: {
                content: {
                    "application/json": {
                        message?: string;
                        errors?: {
                            resource?: string;
                            code?: string;
                            message?: string;
                        }[];
                    };
                };
            };
        };
    };
    "enterprise-admin/start-pre-receive-environment-download": {
        parameters: {
            path: {
                pre_receive_environment_id: components["parameters"]["pre-receive-environment-id"];
            };
        };
        responses: {
            202: {
                content: {
                    "application/json": components["schemas"]["pre-receive-environment-download-status"];
                };
            };
            422: {
                content: {
                    "application/json": {
                        message?: string;
                        errors?: {
                            resource?: string;
                            code?: string;
                            message?: string;
                        }[];
                    };
                };
            };
        };
    };
    "enterprise-admin/get-download-status-for-pre-receive-environment": {
        parameters: {
            path: {
                pre_receive_environment_id: components["parameters"]["pre-receive-environment-id"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["pre-receive-environment-download-status"];
                };
            };
        };
    };
    "enterprise-admin/list-pre-receive-hooks": {
        parameters: {
            query?: {
                per_page?: components["parameters"]["per-page"];
                page?: components["parameters"]["page"];
                direction?: components["parameters"]["direction"];
                sort?: "created" | "updated" | "name";
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["pre-receive-hook"][];
                };
            };
        };
    };
    "enterprise-admin/create-pre-receive-hook": {
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    script: string;
                    script_repository: {
                        [key: string]: unknown;
                    };
                    environment: {
                        [key: string]: unknown;
                    };
                    enforcement?: string;
                    allow_downstream_configuration?: boolean;
                };
            };
        };
        responses: {
            201: {
                content: {
                    "application/json": components["schemas"]["pre-receive-hook"];
                };
            };
        };
    };
    "enterprise-admin/get-pre-receive-hook": {
        parameters: {
            path: {
                pre_receive_hook_id: components["parameters"]["pre-receive-hook-id"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["pre-receive-hook"];
                };
            };
        };
    };
    "enterprise-admin/delete-pre-receive-hook": {
        parameters: {
            path: {
                pre_receive_hook_id: components["parameters"]["pre-receive-hook-id"];
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
    "enterprise-admin/update-pre-receive-hook": {
        parameters: {
            path: {
                pre_receive_hook_id: components["parameters"]["pre-receive-hook-id"];
            };
        };
        requestBody?: {
            content: {
                "application/json": {
                    name?: string;
                    script?: string;
                    script_repository?: {
                        [key: string]: unknown;
                    };
                    environment?: {
                        [key: string]: unknown;
                    };
                    enforcement?: string;
                    allow_downstream_configuration?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["pre-receive-hook"];
                };
            };
        };
    };
    "enterprise-admin/list-personal-access-tokens": {
        parameters: {
            query?: {
                per_page?: components["parameters"]["per-page"];
                page?: components["parameters"]["page"];
            };
        };
        responses: {
            200: {
                headers: {
                    Link: components["headers"]["link"];
                };
                content: {
                    "application/json": components["schemas"]["authorization"][];
                };
            };
        };
    };
    "enterprise-admin/delete-personal-access-token": {
        parameters: {
            path: {
                token_id: components["parameters"]["token-id"];
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
    "enterprise-admin/create-user": {
        requestBody: {
            content: {
                "application/json": {
                    login: string;
                    email?: string;
                };
            };
        };
        responses: {
            201: {
                content: {
                    "application/json": components["schemas"]["simple-user"];
                };
            };
        };
    };
    "enterprise-admin/delete-user": {
        parameters: {
            path: {
                username: components["parameters"]["username"];
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
    "enterprise-admin/update-username-for-user": {
        parameters: {
            path: {
                username: components["parameters"]["username"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    login: string;
                };
            };
        };
        responses: {
            202: {
                content: {
                    "application/json": {
                        message?: string;
                        url?: string;
                    };
                };
            };
        };
    };
    "enterprise-admin/create-impersonation-o-auth-token": {
        parameters: {
            path: {
                username: components["parameters"]["username"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    scopes?: string[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            201: {
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
        };
    };
    "enterprise-admin/delete-impersonation-o-auth-token": {
        parameters: {
            path: {
                username: components["parameters"]["username"];
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
    "apps/list-installations": {
        parameters: {
            query?: {
                per_page?: components["parameters"]["per-page"];
                page?: components["parameters"]["page"];
                since?: components["parameters"]["since"];
                outdated?: string;
            };
        };
        responses: {
            200: {
                headers: {
                    Link: components["headers"]["link"];
                };
                content: {
                    "application/json": components["schemas"]["installation"][];
                };
            };
        };
    };
    "apps/get-installation": {
        parameters: {
            path: {
                installation_id: components["parameters"]["installation-id"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["installation"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "apps/create-installation-access-token": {
        parameters: {
            path: {
                installation_id: components["parameters"]["installation-id"];
            };
        };
        requestBody?: {
            content: {
                "application/json": {
                    repositories?: string[];
                    repository_ids?: number[];
                    permissions?: components["schemas"]["app-permissions"];
                };
            };
        };
        responses: {
            201: {
                content: {
                    "application/json": components["schemas"]["installation-token"];
                };
            };
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "oauth-authorizations/list-grants": {
        parameters: {
            query?: {
                per_page?: components["parameters"]["per-page"];
                page?: components["parameters"]["page"];
                client_id?: string;
            };
        };
        responses: {
            200: {
                headers: {
                    Link: components["headers"]["link"];
                };
                content: {
                    "application/json": components["schemas"]["application-grant"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "oauth-authorizations/get-grant": {
        parameters: {
            path: {
                grant_id: components["parameters"]["grant-id"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["application-grant"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "oauth-authorizations/delete-grant": {
        parameters: {
            path: {
                grant_id: components["parameters"]["grant-id"];
            };
        };
        responses: {
            204: {
                content: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "apps/check-token": {
        parameters: {
            path: {
                client_id: components["parameters"]["client-id"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    access_token: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "apps/reset-token": {
        parameters: {
            path: {
                client_id: components["parameters"]["client-id"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    access_token: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "apps/scope-token": {
        parameters: {
            path: {
                client_id: components["parameters"]["client-id"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    access_token: string;
                    target?: string;
                    target_id?: number;
                    repositories?: string[];
                    repository_ids?: number[];
                    permissions?: components["schemas"]["app-permissions"];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "oauth-authorizations/list-authorizations": {
        parameters: {
            query?: {
                per_page?: components["parameters"]["per-page"];
                page?: components["parameters"]["page"];
                client_id?: string;
            };
        };
        responses: {
            200: {
                headers: {
                    Link: components["headers"]["link"];
                };
                content: {
                    "application/json": components["schemas"]["authorization"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "oauth-authorizations/create-authorization": {
        requestBody?: {
            content: {
                "application/json": {
                    scopes?: string[] | null;
                    note?: string;
                    note_url?: string;
                    client_id?: string;
                    client_secret?: string;
                    fingerprint?: string;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    Location?: string;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            410: components["responses"]["gone"];
            422: components["responses"]["validation_failed"];
        };
    };
    "oauth-authorizations/get-or-create-authorization-for-app": {
        parameters: {
            path: {
                client_id: components["parameters"]["oauth-client-id"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    client_secret: string;
                    scopes?: string[] | null;
                    note?: string;
                    note_url?: string;
                    fingerprint?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    Location?: string;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            201: {
                headers: {
                    Location?: string;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed"];
        };
    };
    "oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint": {
        parameters: {
            path: {
                client_id: components["parameters"]["oauth-client-id"];
                fingerprint: string;
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    client_secret: string;
                    scopes?: string[] | null;
                    note?: string;
                    note_url?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    Location?: string;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            201: {
                headers: {
                    Location?: string;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "oauth-authorizations/get-authorization": {
        parameters: {
            path: {
                authorization_id: components["parameters"]["authorization-id"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "oauth-authorizations/delete-authorization": {
        parameters: {
            path: {
                authorization_id: components["parameters"]["authorization-id"];
            };
        };
        responses: {
            204: {
                content: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "oauth-authorizations/update-authorization": {
        parameters: {
            path: {
                authorization_id: components["parameters"]["authorization-id"];
            };
        };
        requestBody?: {
            content: {
                "application/json": {
                    scopes?: string[] | null;
                    add_scopes?: string[];
                    remove_scopes?: string[];
                    note?: string;
                    note_url?: string;
                    fingerprint?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "enterprise-admin/get-announcement": {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["announcement"];
                };
            };
        };
    };
    "enterprise-admin/remove-announcement": {
        responses: {
            204: {
                content: never;
            };
        };
    };
    "enterprise-admin/set-announcement": {
        requestBody: {
            content: {
                "application/json": components["schemas"]["announcement"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["announcement"];
                };
            };
        };
    };
    "enterprise-admin/get-license-information": {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["license-info"];
                };
            };
        };
    };
    "enterprise-admin/get-all-stats": {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["enterprise-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-comment-stats": {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["enterprise-comment-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-gist-stats": {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["enterprise-gist-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-hooks-stats": {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["enterprise-hook-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-issue-stats": {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["enterprise-issue-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-milestone-stats": {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["enterprise-milestone-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-org-stats": {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["enterprise-organization-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-pages-stats": {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["enterprise-page-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-pull-request-stats": {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["enterprise-pull-request-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-repo-stats": {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["enterprise-repository-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-user-stats": {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["enterprise-user-overview"];
                };
            };
        };
    };
    "actions/get-actions-cache-usage-policy-for-enterprise": {
        parameters: {
            path: {
                enterprise: components["parameters"]["enterprise"];
            };
        };
        responses: {
            200: {
                headers: {
                    Link: components["headers"]["link"];
                };
                content: {
                    "application/json": components["schemas"]["actions-cache-usage-policy-enterprise"];
                };
            };
        };
    };
    "actions/set-actions-cache-usage-policy-for-enterprise": {
        parameters: {
            path: {
                enterprise: components["parameters"]["enterprise"];
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["actions-cache-usage-policy-enterprise"];
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
    "enterprise-admin/get-allowed-actions-enterprise": {
        parameters: {
            path: {
                enterprise: components["parameters"]["enterprise"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["selected-actions"];
                };
            };
        };
    };
    "enterprise-admin/set-allowed-actions-enterprise": {
        parameters: {
            path: {
                enterprise: components["parameters"]["enterprise"];
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["selected-actions"];
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
    "enterprise-admin/get-audit-log": {
        parameters: {
            query?: {
                phrase?: components["parameters"]["audit-log-phrase"];
                include?: components["parameters"]["audit-log-include"];
                after?: components["parameters"]["audit-log-after"];
                before?: components["parameters"]["audit-log-before"];
                order?: components["parameters"]["audit-log-order"];
                page?: components["parameters"]["page"];
                per_page?: components["parameters"]["per-page"];
            };
            path: {
                enterprise: components["parameters"]["enterprise"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["audit-log-event"][];
                };
            };
        };
    };
    "secret-scanning/list-alerts-for-enterprise": {
        parameters: {
            query?: {
                state?: components["parameters"]["secret-scanning-alert-state"];
                secret_type?: components["parameters"]["secret-scanning-alert-secret-type"];
                resolution?: components["parameters"]["secret-scanning-alert-resolution"];
                sort?: components["parameters"]["secret-scanning-alert-sort"];
                direction?: components["parameters"]["direction"];
                per_page?: components["parameters"]["per-page"];
                before?: components["parameters"]["pagination-before"];
                after?: components["parameters"]["pagination-after"];
            };
            path: {
                enterprise: components["parameters"]["enterprise"];
            };
        };
        responses: {
            200: {
                headers: {
                    Link: components["headers"]["link"];
                };
                content: {
                    "application/json": components["schemas"]["organization-secret-scanning-alert"][];
                };
            };
            404: components["responses"]["not_found"];
            503: components["responses"]["service_unavailable"];
        };
    };
    "meta/get": {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["api-overview"];
                };
            };
            304: components["responses"]["not_modified"];
        };
    };
    "orgs/list-custom-roles": {
        parameters: {
            path: {
                organization_id: string;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": {
                        total_count?: number;
                        custom_roles?: components["schemas"]["organization-custom-repository-role"][];
                    };
                };
            };
        };
    };
    "orgs/get": {
        parameters: {
            path: {
                org: components["parameters"]["org"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["organization-full"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "orgs/update": {
        parameters: {
            path: {
                org: components["parameters"]["org"];
            };
        };
        requestBody?: {
            content: {
                "application/json": {
                    billing_email?: string;
                    company?: string;
                    email?: string;
                    twitter_username?: string;
                    location?: string;
                    name?: string;
                    description?: string;
                    has_organization_projects?: boolean;
                    has_repository_projects?: boolean;
                    default_repository_permission?: "read" | "write" | "admin" | "none";
                    members_can_create_repositories?: boolean;
                    members_can_create_internal_repositories?: boolean;
                    members_can_create_private_repositories?: boolean;
                    members_can_create_public_repositories?: boolean;
                    members_allowed_repository_creation_type?: "all" | "private" | "none";
                    members_can_create_pages?: boolean;
                    members_can_fork_private_repositories?: boolean;
                    web_commit_signoff_required?: boolean;
                    blog?: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["organization-full"];
                };
            };
            409: components["responses"]["conflict"];
            422: {
                content: {
                    "application/json": components["schemas"]["validation-error"] | components["schemas"]["validation-error-simple"];
                };
            };
        };
    };
    "actions/get-allowed-actions-organization": {
        parameters: {
            path: {
                org: components["parameters"]["org"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["selected-actions"];
                };
            };
        };
    };
    "actions/set-allowed-actions-organization": {
        parameters: {
            path: {
                org: components["parameters"]["org"];
            };
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["selected-actions"];
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
    "orgs/get-audit-log": {
        parameters: {
            query?: {
                phrase?: components["parameters"]["audit-log-phrase"];
                include?: components["parameters"]["audit-log-include"];
                after?: components["parameters"]["audit-log-after"];
                before?: components["parameters"]["audit-log-before"];
                order?: components["parameters"]["audit-log-order"];
                per_page?: components["parameters"]["per-page"];
                page?: components["parameters"]["page"];
            };
            path: {
                org: components["parameters"]["org"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["audit-log-event"][];
                };
            };
        };
    };
    "teams/external-idp-group-info-for-org": {
        parameters: {
            path: {
                org: components["parameters"]["org"];
                group_id: components["parameters"]["group-id"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["external-group"];
                };
            };
        };
    };
    "teams/list-external-idp-groups-for-org": {
        parameters: {
            query?: {
                per_page?: components["parameters"]["per-page"];
                page?: number;
                display_name?: string;
            };
            path: {
                org: components["parameters"]["org"];
            };
        };
        responses: {
            200: {
                headers: {
                    Link?: string;
                };
                content: {
                    "application/json": components["schemas"]["external-groups"];
                };
            };
        };
    };
    "apps/get-org-installation": {
        parameters: {
            path: {
                org: components["parameters"]["org"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["installation"];
                };
            };
        };
    };
    "orgs/list-app-installations": {
        parameters: {
            query?: {
                per_page?: components["parameters"]["per-page"];
                page?: components["parameters"]["page"];
            };
            path: {
                org: components["parameters"]["org"];
            };
        };
        responses: {
            200: {
                headers: {
                    Link: components["headers"]["link"];
                };
                content: {
                    "application/json": {
                        total_count: number;
                        installations: components["schemas"]["installation"][];
                    };
                };
            };
        };
    };
    "enterprise-admin/list-pre-receive-hooks-for-org": {
        parameters: {
            query?: {
                per_page?: components["parameters"]["per-page"];
                page?: components["parameters"]["page"];
                direction?: components["parameters"]["direction"];
                sort?: "created" | "updated" | "name";
            };
            path: {
                org: components["parameters"]["org"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["org-pre-receive-hook"][];
                };
            };
        };
    };
    "enterprise-admin/get-pre-receive-hook-for-org": {
        parameters: {
            path: {
                org: components["parameters"]["org"];
                pre_receive_hook_id: components["parameters"]["pre-receive-hook-id"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["org-pre-receive-hook"];
                };
            };
        };
    };
    "enterprise-admin/remove-pre-receive-hook-enforcement-for-org": {
        parameters: {
            path: {
                org: components["parameters"]["org"];
                pre_receive_hook_id: components["parameters"]["pre-receive-hook-id"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["org-pre-receive-hook"];
                };
            };
        };
    };
    "enterprise-admin/update-pre-receive-hook-enforcement-for-org": {
        parameters: {
            path: {
                org: components["parameters"]["org"];
                pre_receive_hook_id: components["parameters"]["pre-receive-hook-id"];
            };
        };
        requestBody?: {
            content: {
                "application/json": {
                    enforcement?: string;
                    allow_downstream_configuration?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["org-pre-receive-hook"];
                };
            };
        };
    };
    "secret-scanning/list-alerts-for-org": {
        parameters: {
            query?: {
                state?: components["parameters"]["secret-scanning-alert-state"];
                secret_type?: components["parameters"]["secret-scanning-alert-secret-type"];
                resolution?: components["parameters"]["secret-scanning-alert-resolution"];
                sort?: components["parameters"]["secret-scanning-alert-sort"];
                direction?: components["parameters"]["direction"];
                page?: components["parameters"]["page"];
                per_page?: components["parameters"]["per-page"];
            };
            path: {
                org: components["parameters"]["org"];
            };
        };
        responses: {
            200: {
                headers: {
                    Link: components["headers"]["link"];
                };
                content: {
                    "application/json": components["schemas"]["organization-secret-scanning-alert"][];
                };
            };
            404: components["responses"]["not_found"];
            503: components["responses"]["service_unavailable"];
        };
    };
    "teams/create": {
        parameters: {
            path: {
                org: components["parameters"]["org"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    description?: string;
                    maintainers?: string[];
                    repo_names?: string[];
                    privacy?: "secret" | "closed";
                    permission?: "pull" | "push";
                    parent_team_id?: number;
                    ldap_dn?: string;
                };
            };
        };
        responses: {
            201: {
                content: {
                    "application/json": components["schemas"]["team-full"];
                };
            };
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed"];
        };
    };
    "teams/list-linked-external-idp-groups-to-team-for-org": {
        parameters: {
            path: {
                org: components["parameters"]["org"];
                team_slug: components["parameters"]["team-slug"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["external-groups"];
                };
            };
        };
    };
    "teams/unlink-external-idp-group-from-team-for-org": {
        parameters: {
            path: {
                org: components["parameters"]["org"];
                team_slug: components["parameters"]["team-slug"];
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
    "teams/link-external-idp-group-to-team-for-org": {
        parameters: {
            path: {
                org: components["parameters"]["org"];
                team_slug: components["parameters"]["team-slug"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    group_id: number;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["external-group"];
                };
            };
        };
    };
    "rate-limit/get": {
        responses: {
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["x-rate-limit-limit"];
                    "X-RateLimit-Remaining": components["headers"]["x-rate-limit-remaining"];
                    "X-RateLimit-Reset": components["headers"]["x-rate-limit-reset"];
                };
                content: {
                    "application/json": components["schemas"]["rate-limit-overview"];
                };
            };
            304: components["responses"]["not_modified"];
            404: components["responses"]["not_found"];
        };
    };
    "actions/get-actions-cache-usage-policy": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["actions-cache-usage-policy-for-repository"];
                };
            };
        };
    };
    "actions/set-actions-cache-usage-policy": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["actions-cache-usage-policy-for-repository"];
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
    "actions/get-allowed-actions-repository": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["selected-actions"];
                };
            };
        };
    };
    "actions/set-allowed-actions-repository": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["selected-actions"];
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
    "actions/list-workflow-runs-for-repo": {
        parameters: {
            query?: {
                actor?: components["parameters"]["actor"];
                branch?: components["parameters"]["workflow-run-branch"];
                event?: components["parameters"]["event"];
                status?: components["parameters"]["workflow-run-status"];
                per_page?: components["parameters"]["per-page"];
                page?: components["parameters"]["page"];
                created?: components["parameters"]["created"];
                exclude_pull_requests?: components["parameters"]["exclude-pull-requests"];
                check_suite_id?: components["parameters"]["workflow-run-check-suite-id"];
            };
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
        };
        responses: {
            200: {
                headers: {
                    Link: components["headers"]["link"];
                };
                content: {
                    "application/json": {
                        total_count: number;
                        workflow_runs: components["schemas"]["workflow-run"][];
                    };
                };
            };
        };
    };
    "actions/get-workflow-run": {
        parameters: {
            query?: {
                exclude_pull_requests?: components["parameters"]["exclude-pull-requests"];
            };
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                run_id: components["parameters"]["run-id"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["workflow-run"];
                };
            };
        };
    };
    "actions/get-workflow-run-attempt": {
        parameters: {
            query?: {
                exclude_pull_requests?: components["parameters"]["exclude-pull-requests"];
            };
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                run_id: components["parameters"]["run-id"];
                attempt_number: components["parameters"]["attempt-number"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["workflow-run"];
                };
            };
        };
    };
    "actions/list-workflow-runs": {
        parameters: {
            query?: {
                actor?: components["parameters"]["actor"];
                branch?: components["parameters"]["workflow-run-branch"];
                event?: components["parameters"]["event"];
                status?: components["parameters"]["workflow-run-status"];
                per_page?: components["parameters"]["per-page"];
                page?: components["parameters"]["page"];
                created?: components["parameters"]["created"];
                exclude_pull_requests?: components["parameters"]["exclude-pull-requests"];
                check_suite_id?: components["parameters"]["workflow-run-check-suite-id"];
            };
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                workflow_id: components["parameters"]["workflow-id"];
            };
        };
        responses: {
            200: {
                headers: {
                    Link: components["headers"]["link"];
                };
                content: {
                    "application/json": {
                        total_count: number;
                        workflow_runs: components["schemas"]["workflow-run"][];
                    };
                };
            };
        };
    };
    "repos/list-autolinks": {
        parameters: {
            query?: {
                page?: components["parameters"]["page"];
            };
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["autolink"][];
                };
            };
        };
    };
    "repos/create-autolink": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    key_prefix: string;
                    url_template: string;
                    is_alphanumeric?: boolean;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    Location?: string;
                };
                content: {
                    "application/json": components["schemas"]["autolink"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/get-autolink": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                autolink_id: components["parameters"]["autolink-id"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["autolink"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "code-scanning/list-recent-analyses": {
        parameters: {
            query?: {
                tool_name?: components["parameters"]["tool-name"];
                tool_guid?: components["parameters"]["tool-guid"];
                page?: components["parameters"]["page"];
                per_page?: components["parameters"]["per-page"];
                ref?: components["schemas"]["code-scanning-ref"];
                sarif_id?: components["schemas"]["code-scanning-analysis-sarif-id"];
            };
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["code-scanning-analysis"][];
                };
            };
            403: components["responses"]["code_scanning_forbidden_read"];
            404: components["responses"]["not_found"];
            503: components["responses"]["service_unavailable"];
        };
    };
    "repos/list-collaborators": {
        parameters: {
            query?: {
                affiliation?: "outside" | "direct" | "all";
                permission?: "pull" | "triage" | "push" | "maintain" | "admin";
                per_page?: components["parameters"]["per-page"];
                page?: components["parameters"]["page"];
            };
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
        };
        responses: {
            200: {
                headers: {
                    Link: components["headers"]["link"];
                };
                content: {
                    "application/json": components["schemas"]["collaborator"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/get-collaborator-permission-level": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                username: components["parameters"]["username"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["repository-collaborator-permission"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "dependency-graph/diff-range": {
        parameters: {
            query?: {
                name?: components["parameters"]["manifest-path"];
            };
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                basehead: string;
            };
        };
        responses: {
            200: {
                headers: {
                    Link: components["headers"]["link"];
                };
                content: {
                    "application/json": components["schemas"]["dependency-graph-diff"];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "repos/create-fork": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
        };
        requestBody?: {
            content: {
                "application/json": {
                    organization?: string;
                } | null;
            };
        };
        responses: {
            202: {
                content: {
                    "application/json": components["schemas"]["full-repository"];
                };
            };
            400: components["responses"]["bad_request"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "apps/get-repo-installation": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["installation"];
                };
            };
            301: components["responses"]["moved_permanently"];
            404: components["responses"]["not_found"];
        };
    };
    "repos/list-deploy-keys": {
        parameters: {
            query?: {
                per_page?: components["parameters"]["per-page"];
                page?: components["parameters"]["page"];
            };
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
        };
        responses: {
            200: {
                headers: {
                    Link: components["headers"]["link"];
                };
                content: {
                    "application/json": components["schemas"]["deploy-key"][];
                };
            };
        };
    };
    "repos/create-deploy-key": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    title?: string;
                    key: string;
                    read_only?: boolean;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    Location?: string;
                };
                content: {
                    "application/json": components["schemas"]["deploy-key"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/get-deploy-key": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                key_id: components["parameters"]["key-id"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["deploy-key"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "enterprise-admin/list-pre-receive-hooks-for-repo": {
        parameters: {
            query?: {
                per_page?: components["parameters"]["per-page"];
                page?: components["parameters"]["page"];
                direction?: components["parameters"]["direction"];
                sort?: "created" | "updated" | "name";
            };
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["repository-pre-receive-hook"][];
                };
            };
        };
    };
    "enterprise-admin/get-pre-receive-hook-for-repo": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pre_receive_hook_id: components["parameters"]["pre-receive-hook-id"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["repository-pre-receive-hook"];
                };
            };
        };
    };
    "enterprise-admin/remove-pre-receive-hook-enforcement-for-repo": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pre_receive_hook_id: components["parameters"]["pre-receive-hook-id"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["repository-pre-receive-hook"];
                };
            };
        };
    };
    "enterprise-admin/update-pre-receive-hook-enforcement-for-repo": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pre_receive_hook_id: components["parameters"]["pre-receive-hook-id"];
            };
        };
        requestBody?: {
            content: {
                "application/json": {
                    enforcement?: "enabled" | "disabled" | "testing";
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["repository-pre-receive-hook"];
                };
            };
        };
    };
    "repos/list-releases": {
        parameters: {
            query?: {
                per_page?: components["parameters"]["per-page"];
                page?: components["parameters"]["page"];
            };
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
        };
        responses: {
            200: {
                headers: {
                    Link: components["headers"]["link"];
                };
                content: {
                    "application/json": components["schemas"]["release"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/create-release": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    tag_name: string;
                    target_commitish?: string;
                    name?: string;
                    body?: string;
                    draft?: boolean;
                    prerelease?: boolean;
                    generate_release_notes?: boolean;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    Location?: string;
                };
                content: {
                    "application/json": components["schemas"]["release"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/get-latest-release": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["release"];
                };
            };
        };
    };
    "repos/get-release-by-tag": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                tag: string;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["release"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/get-release": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                release_id: components["parameters"]["release-id"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["release"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/update-release": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                release_id: components["parameters"]["release-id"];
            };
        };
        requestBody?: {
            content: {
                "application/json": {
                    tag_name?: string;
                    target_commitish?: string;
                    name?: string;
                    body?: string;
                    draft?: boolean;
                    prerelease?: boolean;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["release"];
                };
            };
        };
    };
    "repos/list-cache-info": {
        parameters: {
            query?: {
                per_page?: components["parameters"]["per-page"];
                page?: components["parameters"]["page"];
            };
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
        };
        responses: {
            200: {
                headers: {
                    Link: components["headers"]["link"];
                };
                content: {
                    "application/json": ({
                        host: string;
                        location: string;
                        git: {
                            sync_status: "offline" | "inactive" | "in_sync" | "not_in_sync";
                            last_sync: string;
                        };
                    })[];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "secret-scanning/list-alerts-for-repo": {
        parameters: {
            query?: {
                state?: components["parameters"]["secret-scanning-alert-state"];
                secret_type?: components["parameters"]["secret-scanning-alert-secret-type"];
                resolution?: components["parameters"]["secret-scanning-alert-resolution"];
                sort?: components["parameters"]["secret-scanning-alert-sort"];
                direction?: components["parameters"]["direction"];
                page?: components["parameters"]["page"];
                per_page?: components["parameters"]["per-page"];
            };
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["secret-scanning-alert"][];
                };
            };
            404: {
                content: never;
            };
            503: components["responses"]["service_unavailable"];
        };
    };
    "secret-scanning/get-alert": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                alert_number: components["parameters"]["alert-number"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["secret-scanning-alert"];
                };
            };
            304: components["responses"]["not_modified"];
            404: {
                content: never;
            };
            503: components["responses"]["service_unavailable"];
        };
    };
    "secret-scanning/update-alert": {
        parameters: {
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                alert_number: components["parameters"]["alert-number"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    state: components["schemas"]["secret-scanning-alert-state"];
                    resolution?: components["schemas"]["secret-scanning-alert-resolution"];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["secret-scanning-alert"];
                };
            };
            404: {
                content: never;
            };
            422: {
                content: never;
            };
            503: components["responses"]["service_unavailable"];
        };
    };
    "repos/list-public": {
        parameters: {
            query?: {
                since?: components["parameters"]["since-repo"];
                visibility?: "all" | "public";
            };
        };
        responses: {
            200: {
                headers: {
                    Link?: string;
                };
                content: {
                    "application/json": components["schemas"]["minimal-repository"][];
                };
            };
            304: components["responses"]["not_modified"];
            422: components["responses"]["validation_failed"];
        };
    };
    "enterprise-admin/list-provisioned-groups-enterprise": {
        parameters: {
            query?: {
                startIndex?: components["parameters"]["start-index"];
                count?: components["parameters"]["count"];
                filter?: string;
                excludedAttributes?: string;
            };
            path: {
                enterprise: components["parameters"]["enterprise"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["scim-group-list-enterprise"];
                };
            };
        };
    };
    "enterprise-admin/provision-and-invite-enterprise-group": {
        parameters: {
            path: {
                enterprise: components["parameters"]["enterprise"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    schemas: string[];
                    displayName: string;
                    members?: {
                        value: string;
                    }[];
                };
            };
        };
        responses: {
            201: {
                content: {
                    "application/json": components["schemas"]["scim-enterprise-group"];
                };
            };
        };
    };
    "enterprise-admin/get-provisioning-information-for-enterprise-group": {
        parameters: {
            query?: {
                excludedAttributes?: string;
            };
            path: {
                enterprise: components["parameters"]["enterprise"];
                scim_group_id: components["parameters"]["scim-group-id"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["scim-enterprise-group"];
                };
            };
        };
    };
    "enterprise-admin/set-information-for-provisioned-enterprise-group": {
        parameters: {
            path: {
                enterprise: components["parameters"]["enterprise"];
                scim_group_id: components["parameters"]["scim-group-id"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    schemas: string[];
                    displayName: string;
                    members?: {
                        value: string;
                    }[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["scim-enterprise-group"];
                };
            };
        };
    };
    "enterprise-admin/delete-scim-group-from-enterprise": {
        parameters: {
            path: {
                enterprise: components["parameters"]["enterprise"];
                scim_group_id: components["parameters"]["scim-group-id"];
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
    "enterprise-admin/update-attribute-for-enterprise-group": {
        parameters: {
            path: {
                enterprise: components["parameters"]["enterprise"];
                scim_group_id: components["parameters"]["scim-group-id"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    schemas: string[];
                    Operations: ({
                        op: "add" | "Add" | "remove" | "Remove" | "replace" | "Replace";
                        path?: string;
                        value?: unknown;
                    })[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["scim-enterprise-group"];
                };
            };
        };
    };
    "enterprise-admin/list-provisioned-identities-enterprise": {
        parameters: {
            query?: {
                startIndex?: components["parameters"]["start-index"];
                count?: components["parameters"]["count"];
                filter?: string;
            };
            path: {
                enterprise: components["parameters"]["enterprise"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["scim-user-list-enterprise"];
                };
            };
        };
    };
    "enterprise-admin/provision-and-invite-enterprise-user": {
        parameters: {
            path: {
                enterprise: components["parameters"]["enterprise"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    schemas: string[];
                    userName: string;
                    name: {
                        givenName: string;
                        familyName: string;
                    };
                    emails: {
                        value: string;
                        type: string;
                        primary: boolean;
                    }[];
                    groups?: {
                        value?: string;
                    }[];
                };
            };
        };
        responses: {
            201: {
                content: {
                    "application/json": components["schemas"]["scim-enterprise-user"];
                };
            };
        };
    };
    "enterprise-admin/get-provisioning-information-for-enterprise-user": {
        parameters: {
            path: {
                enterprise: components["parameters"]["enterprise"];
                scim_user_id: components["parameters"]["scim-user-id"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["scim-enterprise-user"];
                };
            };
        };
    };
    "enterprise-admin/set-information-for-provisioned-enterprise-user": {
        parameters: {
            path: {
                enterprise: components["parameters"]["enterprise"];
                scim_user_id: components["parameters"]["scim-user-id"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    schemas: string[];
                    userName: string;
                    name: {
                        givenName: string;
                        familyName: string;
                    };
                    emails: {
                        value: string;
                        type: string;
                        primary: boolean;
                    }[];
                    groups?: {
                        value?: string;
                    }[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["scim-enterprise-user"];
                };
            };
        };
    };
    "enterprise-admin/delete-user-from-enterprise": {
        parameters: {
            path: {
                enterprise: components["parameters"]["enterprise"];
                scim_user_id: components["parameters"]["scim-user-id"];
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
    "enterprise-admin/update-attribute-for-enterprise-user": {
        parameters: {
            path: {
                enterprise: components["parameters"]["enterprise"];
                scim_user_id: components["parameters"]["scim-user-id"];
            };
        };
        requestBody: {
            content: {
                "application/json": {
                    schemas: string[];
                    Operations: Record<string, never>[];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["scim-enterprise-user"];
                };
            };
        };
    };
    "enterprise-admin/get-configuration-status": {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["configuration-status"];
                };
            };
        };
    };
    "enterprise-admin/start-configuration-process": {
        responses: {
            202: {
                content: never;
            };
        };
    };
    "enterprise-admin/get-maintenance-status": {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["maintenance-status"];
                };
            };
        };
    };
    "enterprise-admin/enable-or-disable-maintenance-mode": {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    maintenance: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["maintenance-status"];
                };
            };
        };
    };
    "enterprise-admin/get-settings": {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["enterprise-settings"];
                };
            };
        };
    };
    "enterprise-admin/set-settings": {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    settings: string;
                };
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
    "enterprise-admin/get-all-authorized-ssh-keys": {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["ssh-key"][];
                };
            };
        };
    };
    "enterprise-admin/add-authorized-ssh-key": {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    authorized_key: string;
                };
            };
        };
        responses: {
            201: {
                content: {
                    "application/json": components["schemas"]["ssh-key"][];
                };
            };
        };
    };
    "enterprise-admin/remove-authorized-ssh-key": {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    authorized_key: string;
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["ssh-key"][];
                };
            };
        };
    };
    "enterprise-admin/create-enterprise-server-license": {
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    license: string;
                    password?: string;
                    settings?: string;
                };
            };
        };
        responses: {
            202: {
                content: never;
            };
        };
    };
    "enterprise-admin/upgrade-license": {
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    license?: string;
                };
            };
        };
        responses: {
            202: {
                content: never;
            };
        };
    };
    "apps/list-installations-for-authenticated-user": {
        parameters: {
            query?: {
                per_page?: components["parameters"]["per-page"];
                page?: components["parameters"]["page"];
            };
        };
        responses: {
            200: {
                headers: {
                    Link: components["headers"]["link"];
                };
                content: {
                    "application/json": {
                        total_count: number;
                        installations: components["schemas"]["installation"][];
                    };
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "apps/get-user-installation": {
        parameters: {
            path: {
                username: components["parameters"]["username"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["installation"];
                };
            };
        };
    };
    "enterprise-admin/promote-user-to-be-site-administrator": {
        parameters: {
            path: {
                username: components["parameters"]["username"];
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
    "enterprise-admin/demote-site-administrator": {
        parameters: {
            path: {
                username: components["parameters"]["username"];
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
    "enterprise-admin/suspend-user": {
        parameters: {
            path: {
                username: components["parameters"]["username"];
            };
        };
        requestBody?: {
            content: {
                "application/json": {
                    reason?: string;
                } | null;
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
    "enterprise-admin/unsuspend-user": {
        parameters: {
            path: {
                username: components["parameters"]["username"];
            };
        };
        requestBody?: {
            content: {
                "application/json": {
                    reason?: string;
                } | null;
            };
        };
        responses: {
            204: {
                content: never;
            };
        };
    };
}
