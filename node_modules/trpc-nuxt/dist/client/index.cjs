"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/client/index.ts
var client_exports = {};
__export(client_exports, {
  createNuxtProxyDecoration: () => createNuxtProxyDecoration,
  createTRPCNuxtClient: () => createTRPCNuxtClient,
  getQueryKey: () => getQueryKey,
  httpBatchLink: () => httpBatchLink,
  httpLink: () => httpLink
});
module.exports = __toCommonJS(client_exports);
var import_client2 = require("@trpc/client");
var import_shared = require("@trpc/server/shared");
var import_ohash = require("ohash");
var import_imports2 = require("#imports");

// src/client/links.ts
var import_client = require("@trpc/client");
var import_ofetch = require("ofetch");
var import_imports = require("#imports");
function customFetch(input, init) {
  return globalThis.$fetch.raw(input.toString(), init).catch((e) => {
    if (e instanceof import_ofetch.FetchError && e.response) {
      return e.response;
    }
    throw e;
  }).then((response) => ({
    ...response,
    headers: response.headers,
    json: () => Promise.resolve(response._data)
  }));
}
function httpLink(opts) {
  const headers = (0, import_imports.useRequestHeaders)(opts?.pickHeaders);
  return (0, import_client.httpLink)({
    url: "/api/trpc",
    headers() {
      return headers;
    },
    fetch: customFetch,
    ...opts
  });
}
function httpBatchLink(opts) {
  const headers = (0, import_imports.useRequestHeaders)(opts?.pickHeaders);
  return (0, import_client.httpBatchLink)({
    url: "/api/trpc",
    // @ts-expect-error: Missing property from batchLink. Fix this later.
    headers() {
      return headers;
    },
    fetch: customFetch,
    ...opts
  });
}

// src/client/index.ts
function getQueryKey(path, input) {
  return input === void 0 ? path : `${path}-${(0, import_ohash.hash)(input || "")}`;
}
function createNuxtProxyDecoration(name, client) {
  return (0, import_shared.createRecursiveProxy)((opts) => {
    const args = opts.args;
    const pathCopy = [name, ...opts.path];
    const lastArg = pathCopy.pop();
    const path = pathCopy.join(".");
    const [input, otherOptions] = args;
    if (["useQuery", "useLazyQuery"].includes(lastArg)) {
      const { trpc, queryKey: customQueryKey, ...asyncDataOptions } = otherOptions || {};
      let controller;
      if (trpc?.abortOnUnmount) {
        if ((0, import_imports2.getCurrentInstance)()) {
          (0, import_imports2.onScopeDispose)(() => {
            controller?.abort?.();
          });
        }
        controller = typeof AbortController !== "undefined" ? new AbortController() : {};
      }
      const queryKey = customQueryKey || getQueryKey(path, (0, import_imports2.unref)(input));
      const watch = (0, import_imports2.isRef)(input) ? [...asyncDataOptions.watch || [], input] : asyncDataOptions.watch;
      const isLazy = lastArg === "useLazyQuery" ? true : asyncDataOptions.lazy || false;
      return (0, import_imports2.useAsyncData)(queryKey, () => client[path].query((0, import_imports2.unref)(input), {
        signal: controller?.signal,
        ...trpc
      }), {
        ...asyncDataOptions,
        watch,
        lazy: isLazy
      });
    }
    return client[path][lastArg](...args);
  });
}
function createTRPCNuxtClient(opts) {
  const client = (0, import_client2.createTRPCProxyClient)(opts);
  const decoratedClient = (0, import_shared.createFlatProxy)((key) => {
    return createNuxtProxyDecoration(key, client);
  });
  return decoratedClient;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createNuxtProxyDecoration,
  createTRPCNuxtClient,
  getQueryKey,
  httpBatchLink,
  httpLink
});
