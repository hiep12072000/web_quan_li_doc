// src/client/index.ts
import { createTRPCProxyClient } from "@trpc/client";
import { createFlatProxy, createRecursiveProxy } from "@trpc/server/shared";
import { hash } from "ohash";
import { getCurrentInstance, onScopeDispose, useAsyncData, unref, isRef } from "#imports";

// src/client/links.ts
import { httpLink as _httpLink, httpBatchLink as _httpBatchLink } from "@trpc/client";
import { FetchError } from "ofetch";
import { useRequestHeaders } from "#imports";
function customFetch(input, init) {
  return globalThis.$fetch.raw(input.toString(), init).catch((e) => {
    if (e instanceof FetchError && e.response) {
      return e.response;
    }
    throw e;
  }).then((response) => ({
    ...response,
    headers: response.headers,
    json: () => Promise.resolve(response._data)
  }));
}
function httpLink(opts) {
  const headers = useRequestHeaders(opts?.pickHeaders);
  return _httpLink({
    url: "/api/trpc",
    headers() {
      return headers;
    },
    fetch: customFetch,
    ...opts
  });
}
function httpBatchLink(opts) {
  const headers = useRequestHeaders(opts?.pickHeaders);
  return _httpBatchLink({
    url: "/api/trpc",
    // @ts-expect-error: Missing property from batchLink. Fix this later.
    headers() {
      return headers;
    },
    fetch: customFetch,
    ...opts
  });
}

// src/client/index.ts
function getQueryKey(path, input) {
  return input === void 0 ? path : `${path}-${hash(input || "")}`;
}
function createNuxtProxyDecoration(name, client) {
  return createRecursiveProxy((opts) => {
    const args = opts.args;
    const pathCopy = [name, ...opts.path];
    const lastArg = pathCopy.pop();
    const path = pathCopy.join(".");
    const [input, otherOptions] = args;
    if (["useQuery", "useLazyQuery"].includes(lastArg)) {
      const { trpc, queryKey: customQueryKey, ...asyncDataOptions } = otherOptions || {};
      let controller;
      if (trpc?.abortOnUnmount) {
        if (getCurrentInstance()) {
          onScopeDispose(() => {
            controller?.abort?.();
          });
        }
        controller = typeof AbortController !== "undefined" ? new AbortController() : {};
      }
      const queryKey = customQueryKey || getQueryKey(path, unref(input));
      const watch = isRef(input) ? [...asyncDataOptions.watch || [], input] : asyncDataOptions.watch;
      const isLazy = lastArg === "useLazyQuery" ? true : asyncDataOptions.lazy || false;
      return useAsyncData(queryKey, () => client[path].query(unref(input), {
        signal: controller?.signal,
        ...trpc
      }), {
        ...asyncDataOptions,
        watch,
        lazy: isLazy
      });
    }
    return client[path][lastArg](...args);
  });
}
function createTRPCNuxtClient(opts) {
  const client = createTRPCProxyClient(opts);
  const decoratedClient = createFlatProxy((key) => {
    return createNuxtProxyDecoration(key, client);
  });
  return decoratedClient;
}
export {
  createNuxtProxyDecoration,
  createTRPCNuxtClient,
  getQueryKey,
  httpBatchLink,
  httpLink
};
